// Generated by gencpp from file coorsa_rfsm/move_forwardRequest.msg
// DO NOT EDIT!


#ifndef COORSA_RFSM_MESSAGE_MOVE_FORWARDREQUEST_H
#define COORSA_RFSM_MESSAGE_MOVE_FORWARDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coorsa_rfsm
{
template <class ContainerAllocator>
struct move_forwardRequest_
{
  typedef move_forwardRequest_<ContainerAllocator> Type;

  move_forwardRequest_()
    : distance(0.0)
    , tollerance(0.0)  {
    }
  move_forwardRequest_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , tollerance(0.0)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef float _tollerance_type;
  _tollerance_type tollerance;





  typedef boost::shared_ptr< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> const> ConstPtr;

}; // struct move_forwardRequest_

typedef ::coorsa_rfsm::move_forwardRequest_<std::allocator<void> > move_forwardRequest;

typedef boost::shared_ptr< ::coorsa_rfsm::move_forwardRequest > move_forwardRequestPtr;
typedef boost::shared_ptr< ::coorsa_rfsm::move_forwardRequest const> move_forwardRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator1> & lhs, const ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.tollerance == rhs.tollerance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator1> & lhs, const ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coorsa_rfsm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9dd3534bfa42243ad538074d47a7fb4a";
  }

  static const char* value(const ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9dd3534bfa42243aULL;
  static const uint64_t static_value2 = 0xd538074d47a7fb4aULL;
};

template<class ContainerAllocator>
struct DataType< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coorsa_rfsm/move_forwardRequest";
  }

  static const char* value(const ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 distance\n"
"float32 tollerance\n"
;
  }

  static const char* value(const ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.tollerance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct move_forwardRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coorsa_rfsm::move_forwardRequest_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "tollerance: ";
    Printer<float>::stream(s, indent + "  ", v.tollerance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORSA_RFSM_MESSAGE_MOVE_FORWARDREQUEST_H
