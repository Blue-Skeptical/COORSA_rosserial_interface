
COORSA_rosserial_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a690  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800a868  0800a868  0001a868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab90  0800ab90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab90  0800ab90  0001ab90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab98  0800ab98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800aba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd0  20000074  0800ac18  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e44  0800ac18  00020e44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4e5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038f9  00000000  00000000  0003f589  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001950  00000000  00000000  00042e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c0  00000000  00000000  000447d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232c3  00000000  00000000  00045f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013846  00000000  00000000  0006925b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3c31  00000000  00000000  0007caa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001606d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007174  00000000  00000000  00160750  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a850 	.word	0x0800a850

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	0800a850 	.word	0x0800a850

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a78:	f000 b972 	b.w	8000d60 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9e08      	ldr	r6, [sp, #32]
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4688      	mov	r8, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d14b      	bne.n	8000b3a <__udivmoddi4+0xa6>
 8000aa2:	428a      	cmp	r2, r1
 8000aa4:	4615      	mov	r5, r2
 8000aa6:	d967      	bls.n	8000b78 <__udivmoddi4+0xe4>
 8000aa8:	fab2 f282 	clz	r2, r2
 8000aac:	b14a      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000aae:	f1c2 0720 	rsb	r7, r2, #32
 8000ab2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ab6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aba:	4095      	lsls	r5, r2
 8000abc:	ea47 0803 	orr.w	r8, r7, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ac6:	0c23      	lsrs	r3, r4, #16
 8000ac8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000acc:	fa1f fc85 	uxth.w	ip, r5
 8000ad0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ad4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad8:	fb07 f10c 	mul.w	r1, r7, ip
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x60>
 8000ae0:	18eb      	adds	r3, r5, r3
 8000ae2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ae6:	f080 811b 	bcs.w	8000d20 <__udivmoddi4+0x28c>
 8000aea:	4299      	cmp	r1, r3
 8000aec:	f240 8118 	bls.w	8000d20 <__udivmoddi4+0x28c>
 8000af0:	3f02      	subs	r7, #2
 8000af2:	442b      	add	r3, r5
 8000af4:	1a5b      	subs	r3, r3, r1
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000afc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b08:	45a4      	cmp	ip, r4
 8000b0a:	d909      	bls.n	8000b20 <__udivmoddi4+0x8c>
 8000b0c:	192c      	adds	r4, r5, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b12:	f080 8107 	bcs.w	8000d24 <__udivmoddi4+0x290>
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	f240 8104 	bls.w	8000d24 <__udivmoddi4+0x290>
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	442c      	add	r4, r5
 8000b20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b24:	eba4 040c 	sub.w	r4, r4, ip
 8000b28:	2700      	movs	r7, #0
 8000b2a:	b11e      	cbz	r6, 8000b34 <__udivmoddi4+0xa0>
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e9c6 4300 	strd	r4, r3, [r6]
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0xbe>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	f000 80eb 	beq.w	8000d1a <__udivmoddi4+0x286>
 8000b44:	2700      	movs	r7, #0
 8000b46:	e9c6 0100 	strd	r0, r1, [r6]
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f783 	clz	r7, r3
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d147      	bne.n	8000bea <__udivmoddi4+0x156>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xd0>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80fa 	bhi.w	8000d58 <__udivmoddi4+0x2c4>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0303 	sbc.w	r3, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d0e0      	beq.n	8000b34 <__udivmoddi4+0xa0>
 8000b72:	e9c6 4800 	strd	r4, r8, [r6]
 8000b76:	e7dd      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000b78:	b902      	cbnz	r2, 8000b7c <__udivmoddi4+0xe8>
 8000b7a:	deff      	udf	#255	; 0xff
 8000b7c:	fab2 f282 	clz	r2, r2
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	f040 808f 	bne.w	8000ca4 <__udivmoddi4+0x210>
 8000b86:	1b49      	subs	r1, r1, r5
 8000b88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8c:	fa1f f885 	uxth.w	r8, r5
 8000b90:	2701      	movs	r7, #1
 8000b92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b96:	0c23      	lsrs	r3, r4, #16
 8000b98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x122>
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2bc>
 8000bb6:	4684      	mov	ip, r0
 8000bb8:	1a59      	subs	r1, r3, r1
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc8:	fb08 f800 	mul.w	r8, r8, r0
 8000bcc:	45a0      	cmp	r8, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x14c>
 8000bd0:	192c      	adds	r4, r5, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x14a>
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	f200 80b6 	bhi.w	8000d4a <__udivmoddi4+0x2b6>
 8000bde:	4618      	mov	r0, r3
 8000be0:	eba4 0408 	sub.w	r4, r4, r8
 8000be4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be8:	e79f      	b.n	8000b2a <__udivmoddi4+0x96>
 8000bea:	f1c7 0c20 	rsb	ip, r7, #32
 8000bee:	40bb      	lsls	r3, r7
 8000bf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c0e:	0c2c      	lsrs	r4, r5, #16
 8000c10:	fb08 3319 	mls	r3, r8, r9, r3
 8000c14:	fa1f fa8e 	uxth.w	sl, lr
 8000c18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c20:	429c      	cmp	r4, r3
 8000c22:	fa02 f207 	lsl.w	r2, r2, r7
 8000c26:	fa00 f107 	lsl.w	r1, r0, r7
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c30:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c34:	f080 8087 	bcs.w	8000d46 <__udivmoddi4+0x2b2>
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	f240 8084 	bls.w	8000d46 <__udivmoddi4+0x2b2>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4473      	add	r3, lr
 8000c44:	1b1b      	subs	r3, r3, r4
 8000c46:	b2ad      	uxth	r5, r5
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c58:	45a2      	cmp	sl, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1da>
 8000c5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c64:	d26b      	bcs.n	8000d3e <__udivmoddi4+0x2aa>
 8000c66:	45a2      	cmp	sl, r4
 8000c68:	d969      	bls.n	8000d3e <__udivmoddi4+0x2aa>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4474      	add	r4, lr
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	fba0 8902 	umull	r8, r9, r0, r2
 8000c76:	eba4 040a 	sub.w	r4, r4, sl
 8000c7a:	454c      	cmp	r4, r9
 8000c7c:	46c2      	mov	sl, r8
 8000c7e:	464b      	mov	r3, r9
 8000c80:	d354      	bcc.n	8000d2c <__udivmoddi4+0x298>
 8000c82:	d051      	beq.n	8000d28 <__udivmoddi4+0x294>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d069      	beq.n	8000d5c <__udivmoddi4+0x2c8>
 8000c88:	ebb1 050a 	subs.w	r5, r1, sl
 8000c8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c94:	40fd      	lsrs	r5, r7
 8000c96:	40fc      	lsrs	r4, r7
 8000c98:	ea4c 0505 	orr.w	r5, ip, r5
 8000c9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	e747      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000ca4:	f1c2 0320 	rsb	r3, r2, #32
 8000ca8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cac:	4095      	lsls	r5, r2
 8000cae:	fa01 f002 	lsl.w	r0, r1, r2
 8000cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	4338      	orrs	r0, r7
 8000cbc:	0c01      	lsrs	r1, r0, #16
 8000cbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cc2:	fa1f f885 	uxth.w	r8, r5
 8000cc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb07 f308 	mul.w	r3, r7, r8
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d907      	bls.n	8000cea <__udivmoddi4+0x256>
 8000cda:	1869      	adds	r1, r5, r1
 8000cdc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ce0:	d22f      	bcs.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d92d      	bls.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce6:	3f02      	subs	r7, #2
 8000ce8:	4429      	add	r1, r5
 8000cea:	1acb      	subs	r3, r1, r3
 8000cec:	b281      	uxth	r1, r0
 8000cee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfa:	fb00 f308 	mul.w	r3, r0, r8
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x27e>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d08:	d217      	bcs.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d915      	bls.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1ac9      	subs	r1, r1, r3
 8000d14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d18:	e73b      	b.n	8000b92 <__udivmoddi4+0xfe>
 8000d1a:	4637      	mov	r7, r6
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	e709      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000d20:	4607      	mov	r7, r0
 8000d22:	e6e7      	b.n	8000af4 <__udivmoddi4+0x60>
 8000d24:	4618      	mov	r0, r3
 8000d26:	e6fb      	b.n	8000b20 <__udivmoddi4+0x8c>
 8000d28:	4541      	cmp	r1, r8
 8000d2a:	d2ab      	bcs.n	8000c84 <__udivmoddi4+0x1f0>
 8000d2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d30:	eb69 020e 	sbc.w	r2, r9, lr
 8000d34:	3801      	subs	r0, #1
 8000d36:	4613      	mov	r3, r2
 8000d38:	e7a4      	b.n	8000c84 <__udivmoddi4+0x1f0>
 8000d3a:	4660      	mov	r0, ip
 8000d3c:	e7e9      	b.n	8000d12 <__udivmoddi4+0x27e>
 8000d3e:	4618      	mov	r0, r3
 8000d40:	e795      	b.n	8000c6e <__udivmoddi4+0x1da>
 8000d42:	4667      	mov	r7, ip
 8000d44:	e7d1      	b.n	8000cea <__udivmoddi4+0x256>
 8000d46:	4681      	mov	r9, r0
 8000d48:	e77c      	b.n	8000c44 <__udivmoddi4+0x1b0>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	442c      	add	r4, r5
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0x14c>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	442b      	add	r3, r5
 8000d56:	e72f      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d58:	4638      	mov	r0, r7
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xda>
 8000d5c:	4637      	mov	r7, r6
 8000d5e:	e6e9      	b.n	8000b34 <__udivmoddi4+0xa0>

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <Control_Panel>:
float UP_LIM;
t_PI_Struct Pos_PI;



void Control_Panel(int down_lim, int mid_lim, int up_lim, float Adc_Pot, t_Control_Panel_Struct *params){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6178      	str	r0, [r7, #20]
 8000d6c:	6139      	str	r1, [r7, #16]
 8000d6e:	60fa      	str	r2, [r7, #12]
 8000d70:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d74:	607b      	str	r3, [r7, #4]

	  ///////////////////////////////////////
	 ///   CONTROLLO ATTUATORE LINEARE   ///
	///////////////////////////////////////

	params->down_lim = down_lim;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	ee07 3a90 	vmov	s15, r3
 8000d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	edc3 7a00 	vstr	s15, [r3]
	params->mid_lim = mid_lim;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	edc3 7a01 	vstr	s15, [r3, #4]
	params->up_lim = up_lim;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	edc3 7a02 	vstr	s15, [r3, #8]
	DOWN_LIM = params->DOWN_LIM;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	4a93      	ldr	r2, [pc, #588]	; (8000ff8 <Control_Panel+0x294>)
 8000dac:	6013      	str	r3, [r2, #0]
	MID_LIM_UP = params->MID_LIM_UP;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a92      	ldr	r2, [pc, #584]	; (8000ffc <Control_Panel+0x298>)
 8000db4:	6013      	str	r3, [r2, #0]
	MID_LIM_DOWN = params->MID_LIM_DOWN;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a91      	ldr	r2, [pc, #580]	; (8001000 <Control_Panel+0x29c>)
 8000dbc:	6013      	str	r3, [r2, #0]
	UP_LIM = params->UP_LIM;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a90      	ldr	r2, [pc, #576]	; (8001004 <Control_Panel+0x2a0>)
 8000dc4:	6013      	str	r3, [r2, #0]

	if(down_lim == 1 && WaitingForResult){		//POSIZIONE 0
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d10b      	bne.n	8000de4 <Control_Panel+0x80>
 8000dcc:	4b8e      	ldr	r3, [pc, #568]	; (8001008 <Control_Panel+0x2a4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d007      	beq.n	8000de4 <Control_Panel+0x80>
		Pos_ref = DOWN_LIM;
 8000dd4:	4b88      	ldr	r3, [pc, #544]	; (8000ff8 <Control_Panel+0x294>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a8c      	ldr	r2, [pc, #560]	; (800100c <Control_Panel+0x2a8>)
 8000dda:	6013      	str	r3, [r2, #0]
		down_f = 1;
 8000ddc:	4b8c      	ldr	r3, [pc, #560]	; (8001010 <Control_Panel+0x2ac>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e031      	b.n	8000e48 <Control_Panel+0xe4>
	}
	else if(mid_lim == 2 && WaitingForResult && down_f == 1){	//POSIZIONE 1
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d10c      	bne.n	8000e04 <Control_Panel+0xa0>
 8000dea:	4b87      	ldr	r3, [pc, #540]	; (8001008 <Control_Panel+0x2a4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d008      	beq.n	8000e04 <Control_Panel+0xa0>
 8000df2:	4b87      	ldr	r3, [pc, #540]	; (8001010 <Control_Panel+0x2ac>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d104      	bne.n	8000e04 <Control_Panel+0xa0>
		Pos_ref = MID_LIM_DOWN;
 8000dfa:	4b81      	ldr	r3, [pc, #516]	; (8001000 <Control_Panel+0x29c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a83      	ldr	r2, [pc, #524]	; (800100c <Control_Panel+0x2a8>)
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e021      	b.n	8000e48 <Control_Panel+0xe4>
	}
	else if(mid_lim == 2 && WaitingForResult && up_f == 1){	//POSIZIONE 1
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d10c      	bne.n	8000e24 <Control_Panel+0xc0>
 8000e0a:	4b7f      	ldr	r3, [pc, #508]	; (8001008 <Control_Panel+0x2a4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d008      	beq.n	8000e24 <Control_Panel+0xc0>
 8000e12:	4b80      	ldr	r3, [pc, #512]	; (8001014 <Control_Panel+0x2b0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d104      	bne.n	8000e24 <Control_Panel+0xc0>
		Pos_ref = MID_LIM_UP;
 8000e1a:	4b78      	ldr	r3, [pc, #480]	; (8000ffc <Control_Panel+0x298>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a7b      	ldr	r2, [pc, #492]	; (800100c <Control_Panel+0x2a8>)
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e011      	b.n	8000e48 <Control_Panel+0xe4>
	}
	else if(up_lim == 4 && WaitingForResult){	//POSIZIONE 2
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d10b      	bne.n	8000e42 <Control_Panel+0xde>
 8000e2a:	4b77      	ldr	r3, [pc, #476]	; (8001008 <Control_Panel+0x2a4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d007      	beq.n	8000e42 <Control_Panel+0xde>
		Pos_ref = UP_LIM;
 8000e32:	4b74      	ldr	r3, [pc, #464]	; (8001004 <Control_Panel+0x2a0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a75      	ldr	r2, [pc, #468]	; (800100c <Control_Panel+0x2a8>)
 8000e38:	6013      	str	r3, [r2, #0]
		up_f = 1;
 8000e3a:	4b76      	ldr	r3, [pc, #472]	; (8001014 <Control_Panel+0x2b0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e002      	b.n	8000e48 <Control_Panel+0xe4>
	}
	else{					//MANTIENI POSIZIONE
		Pos_ref = Adc_Pot;
 8000e42:	4a72      	ldr	r2, [pc, #456]	; (800100c <Control_Panel+0x2a8>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	6013      	str	r3, [r2, #0]
	}

	Pos_error = Pos_ref - Adc_Pot;
 8000e48:	4b70      	ldr	r3, [pc, #448]	; (800100c <Control_Panel+0x2a8>)
 8000e4a:	ed93 7a00 	vldr	s14, [r3]
 8000e4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e56:	4b70      	ldr	r3, [pc, #448]	; (8001018 <Control_Panel+0x2b4>)
 8000e58:	edc3 7a00 	vstr	s15, [r3]
	I_star = PIDfloat(Pos_error, &Pos_PI);
 8000e5c:	4b6e      	ldr	r3, [pc, #440]	; (8001018 <Control_Panel+0x2b4>)
 8000e5e:	edd3 7a00 	vldr	s15, [r3]
 8000e62:	486e      	ldr	r0, [pc, #440]	; (800101c <Control_Panel+0x2b8>)
 8000e64:	eeb0 0a67 	vmov.f32	s0, s15
 8000e68:	f000 fa4d 	bl	8001306 <PIDfloat>
 8000e6c:	eef0 7a40 	vmov.f32	s15, s0
 8000e70:	4b6b      	ldr	r3, [pc, #428]	; (8001020 <Control_Panel+0x2bc>)
 8000e72:	edc3 7a00 	vstr	s15, [r3]


	if(I_star >= CURRENT_MAX_UP){  //SATURAZIONE [-I_MAX,+I_MAX]
 8000e76:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <Control_Panel+0x2bc>)
 8000e78:	edd3 7a00 	vldr	s15, [r3]
 8000e7c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001024 <Control_Panel+0x2c0>
 8000e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e88:	db03      	blt.n	8000e92 <Control_Panel+0x12e>
		I_star = CURRENT_MAX_UP;
 8000e8a:	4b65      	ldr	r3, [pc, #404]	; (8001020 <Control_Panel+0x2bc>)
 8000e8c:	4a66      	ldr	r2, [pc, #408]	; (8001028 <Control_Panel+0x2c4>)
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e00c      	b.n	8000eac <Control_Panel+0x148>
	}
	else if(I_star <= -CURRENT_MAX_DOWN){
 8000e92:	4b63      	ldr	r3, [pc, #396]	; (8001020 <Control_Panel+0x2bc>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8000e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea4:	d802      	bhi.n	8000eac <Control_Panel+0x148>
		I_star = -CURRENT_MAX_DOWN;
 8000ea6:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <Control_Panel+0x2bc>)
 8000ea8:	4a60      	ldr	r2, [pc, #384]	; (800102c <Control_Panel+0x2c8>)
 8000eaa:	601a      	str	r2, [r3, #0]
	}


	if(Adc_Pot >= Pos_ref - 0.005f && Adc_Pot <= Pos_ref + 0.005f){ //RAGGIUNGIMENTO SET-POINT ISTERESI ADC POTENZIOMETRO
 8000eac:	4b57      	ldr	r3, [pc, #348]	; (800100c <Control_Panel+0x2a8>)
 8000eae:	edd3 7a00 	vldr	s15, [r3]
 8000eb2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001030 <Control_Panel+0x2cc>
 8000eb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eba:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec6:	db72      	blt.n	8000fae <Control_Panel+0x24a>
 8000ec8:	4b50      	ldr	r3, [pc, #320]	; (800100c <Control_Panel+0x2a8>)
 8000eca:	edd3 7a00 	vldr	s15, [r3]
 8000ece:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001030 <Control_Panel+0x2cc>
 8000ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ed6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee2:	d864      	bhi.n	8000fae <Control_Panel+0x24a>

		if(Pos_ref == DOWN_LIM && WaitingForResult){
 8000ee4:	4b49      	ldr	r3, [pc, #292]	; (800100c <Control_Panel+0x2a8>)
 8000ee6:	ed93 7a00 	vldr	s14, [r3]
 8000eea:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <Control_Panel+0x294>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	eeb4 7a67 	vcmp.f32	s14, s15
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	d10c      	bne.n	8000f14 <Control_Panel+0x1b0>
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <Control_Panel+0x2a4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d008      	beq.n	8000f14 <Control_Panel+0x1b0>
			WaitingForResult = 0;
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <Control_Panel+0x2a4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
			down_lim = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
			sendMess(8);
 8000f0c:	2008      	movs	r0, #8
 8000f0e:	f002 f83d 	bl	8002f8c <sendMess>
 8000f12:	e04c      	b.n	8000fae <Control_Panel+0x24a>
		}
		else if(Pos_ref == MID_LIM_DOWN && WaitingForResult){
 8000f14:	4b3d      	ldr	r3, [pc, #244]	; (800100c <Control_Panel+0x2a8>)
 8000f16:	ed93 7a00 	vldr	s14, [r3]
 8000f1a:	4b39      	ldr	r3, [pc, #228]	; (8001000 <Control_Panel+0x29c>)
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f28:	d10f      	bne.n	8000f4a <Control_Panel+0x1e6>
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <Control_Panel+0x2a4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00b      	beq.n	8000f4a <Control_Panel+0x1e6>
			WaitingForResult = 0;
 8000f32:	4b35      	ldr	r3, [pc, #212]	; (8001008 <Control_Panel+0x2a4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
			mid_lim = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
			down_f = 0;
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <Control_Panel+0x2ac>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
			sendMess(16);
 8000f42:	2010      	movs	r0, #16
 8000f44:	f002 f822 	bl	8002f8c <sendMess>
 8000f48:	e031      	b.n	8000fae <Control_Panel+0x24a>
			//INVIO MESSAGGIO POSIZIONE 1 RAGGIUNTA
		}
		else if(Pos_ref == MID_LIM_UP && WaitingForResult){
 8000f4a:	4b30      	ldr	r3, [pc, #192]	; (800100c <Control_Panel+0x2a8>)
 8000f4c:	ed93 7a00 	vldr	s14, [r3]
 8000f50:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <Control_Panel+0x298>)
 8000f52:	edd3 7a00 	vldr	s15, [r3]
 8000f56:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5e:	d10f      	bne.n	8000f80 <Control_Panel+0x21c>
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <Control_Panel+0x2a4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <Control_Panel+0x21c>
			WaitingForResult = 0;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <Control_Panel+0x2a4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
			mid_lim = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
			up_f = 0;
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <Control_Panel+0x2b0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
			sendMess(16);
 8000f78:	2010      	movs	r0, #16
 8000f7a:	f002 f807 	bl	8002f8c <sendMess>
 8000f7e:	e016      	b.n	8000fae <Control_Panel+0x24a>
			//INVIO MESSAGGIO POSIZIONE 1 RAGGIUNTA
		}
		else if(Pos_ref == UP_LIM && WaitingForResult){
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <Control_Panel+0x2a8>)
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <Control_Panel+0x2a0>)
 8000f88:	edd3 7a00 	vldr	s15, [r3]
 8000f8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d10b      	bne.n	8000fae <Control_Panel+0x24a>
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <Control_Panel+0x2a4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <Control_Panel+0x24a>
			WaitingForResult = 0;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <Control_Panel+0x2a4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
			up_lim = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
			sendMess(32);
 8000fa8:	2020      	movs	r0, #32
 8000faa:	f001 ffef 	bl	8002f8c <sendMess>
			//INVIO MESSAGGIO POSIZIONE 2 RAGGIUNTA
		}
	}

	Current_Ramp(&I_star, &I_ref);
 8000fae:	4921      	ldr	r1, [pc, #132]	; (8001034 <Control_Panel+0x2d0>)
 8000fb0:	481b      	ldr	r0, [pc, #108]	; (8001020 <Control_Panel+0x2bc>)
 8000fb2:	f000 f86f 	bl	8001094 <Current_Ramp>

	params->I_ref=I_ref;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <Control_Panel+0x2d0>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60da      	str	r2, [r3, #12]
	params->down_lim = down_lim;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edc3 7a00 	vstr	s15, [r3]
	params->mid_lim = mid_lim;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edc3 7a01 	vstr	s15, [r3, #4]
	params->up_lim = up_lim;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000ac8 	.word	0x20000ac8
 8000ffc:	20000afc 	.word	0x20000afc
 8001000:	20000af8 	.word	0x20000af8
 8001004:	20000b00 	.word	0x20000b00
 8001008:	200000ac 	.word	0x200000ac
 800100c:	20000090 	.word	0x20000090
 8001010:	200000a0 	.word	0x200000a0
 8001014:	2000009c 	.word	0x2000009c
 8001018:	20000094 	.word	0x20000094
 800101c:	20000acc 	.word	0x20000acc
 8001020:	20000098 	.word	0x20000098
 8001024:	3f333333 	.word	0x3f333333
 8001028:	3f333333 	.word	0x3f333333
 800102c:	be800000 	.word	0xbe800000
 8001030:	3ba3d70a 	.word	0x3ba3d70a
 8001034:	20000a84 	.word	0x20000a84

08001038 <Control_Panel_Struct_init>:

void Control_Panel_Struct_init(t_Control_Panel_Struct *params){
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	params->down_lim = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	params->mid_lim = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
	params->up_lim = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
	params->I_ref=0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
	params->DOWN_LIM=0.05f;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <Control_Panel_Struct_init+0x50>)
 8001064:	611a      	str	r2, [r3, #16]
	params->MID_LIM_UP=0.40f;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <Control_Panel_Struct_init+0x54>)
 800106a:	615a      	str	r2, [r3, #20]
	params->MID_LIM_DOWN=0.55f;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <Control_Panel_Struct_init+0x58>)
 8001070:	619a      	str	r2, [r3, #24]
	params->UP_LIM=1.5f;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001078:	61da      	str	r2, [r3, #28]

}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	3d4ccccd 	.word	0x3d4ccccd
 800108c:	3ecccccd 	.word	0x3ecccccd
 8001090:	3f0ccccd 	.word	0x3f0ccccd

08001094 <Current_Ramp>:


void Current_Ramp(float *I_star, float *I_ref){
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]

	 if(*I_star >= *I_ref){
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	ed93 7a00 	vldr	s14, [r3]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	db09      	blt.n	80010c8 <Current_Ramp+0x34>
			*I_ref += 0.00005f;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	edd3 7a00 	vldr	s15, [r3]
 80010ba:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001100 <Current_Ramp+0x6c>
 80010be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	edc3 7a00 	vstr	s15, [r3]
		}
	 if(*I_star < *I_ref){
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	ed93 7a00 	vldr	s14, [r3]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	d400      	bmi.n	80010e0 <Current_Ramp+0x4c>
			*I_ref -= 0.00005f;
		}
}
 80010de:	e009      	b.n	80010f4 <Current_Ramp+0x60>
			*I_ref -= 0.00005f;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001100 <Current_Ramp+0x6c>
 80010ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	edc3 7a00 	vstr	s15, [r3]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	3851b717 	.word	0x3851b717
 8001104:	00000000 	.word	0x00000000

08001108 <init_filter>:
 8001108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	ed87 0a03 	vstr	s0, [r7, #12]
 8001114:	edc7 0a02 	vstr	s1, [r7, #8]
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	68b8      	ldr	r0, [r7, #8]
 8001148:	f7ff f9d2 	bl	80004f0 <__aeabi_f2d>
 800114c:	a34e      	add	r3, pc, #312	; (adr r3, 8001288 <init_filter+0x180>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa25 	bl	80005a0 <__aeabi_dmul>
 8001156:	4603      	mov	r3, r0
 8001158:	460c      	mov	r4, r1
 800115a:	4625      	mov	r5, r4
 800115c:	461c      	mov	r4, r3
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff f9c6 	bl	80004f0 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4620      	mov	r0, r4
 800116a:	4629      	mov	r1, r5
 800116c:	f7ff fa18 	bl	80005a0 <__aeabi_dmul>
 8001170:	4603      	mov	r3, r0
 8001172:	460c      	mov	r4, r1
 8001174:	4625      	mov	r5, r4
 8001176:	461c      	mov	r4, r3
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f7ff f9b9 	bl	80004f0 <__aeabi_f2d>
 800117e:	a342      	add	r3, pc, #264	; (adr r3, 8001288 <init_filter+0x180>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa0c 	bl	80005a0 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4690      	mov	r8, r2
 800118e:	4699      	mov	r9, r3
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff f9ad 	bl	80004f0 <__aeabi_f2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4640      	mov	r0, r8
 800119c:	4649      	mov	r1, r9
 800119e:	f7ff f9ff 	bl	80005a0 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b2:	f7ff f83f 	bl	8000234 <__adddf3>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7ff fb19 	bl	80007f4 <__aeabi_ddiv>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	4618      	mov	r0, r3
 80011c8:	4621      	mov	r1, r4
 80011ca:	f7ff fbfb 	bl	80009c4 <__aeabi_d2f>
 80011ce:	4602      	mov	r2, r0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699a      	ldr	r2, [r3, #24]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	61da      	str	r2, [r3, #28]
 80011dc:	68b8      	ldr	r0, [r7, #8]
 80011de:	f7ff f987 	bl	80004f0 <__aeabi_f2d>
 80011e2:	a329      	add	r3, pc, #164	; (adr r3, 8001288 <init_filter+0x180>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff f9da 	bl	80005a0 <__aeabi_dmul>
 80011ec:	4603      	mov	r3, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4625      	mov	r5, r4
 80011f2:	461c      	mov	r4, r3
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff f97b 	bl	80004f0 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4620      	mov	r0, r4
 8001200:	4629      	mov	r1, r5
 8001202:	f7ff f9cd 	bl	80005a0 <__aeabi_dmul>
 8001206:	4603      	mov	r3, r0
 8001208:	460c      	mov	r4, r1
 800120a:	461a      	mov	r2, r3
 800120c:	4623      	mov	r3, r4
 800120e:	f04f 0000 	mov.w	r0, #0
 8001212:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001216:	f7ff f80b 	bl	8000230 <__aeabi_dsub>
 800121a:	4603      	mov	r3, r0
 800121c:	460c      	mov	r4, r1
 800121e:	4625      	mov	r5, r4
 8001220:	461c      	mov	r4, r3
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f7ff f964 	bl	80004f0 <__aeabi_f2d>
 8001228:	a317      	add	r3, pc, #92	; (adr r3, 8001288 <init_filter+0x180>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f9b7 	bl	80005a0 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4690      	mov	r8, r2
 8001238:	4699      	mov	r9, r3
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff f958 	bl	80004f0 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4640      	mov	r0, r8
 8001246:	4649      	mov	r1, r9
 8001248:	f7ff f9aa 	bl	80005a0 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800125c:	f7fe ffea 	bl	8000234 <__adddf3>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4620      	mov	r0, r4
 8001266:	4629      	mov	r1, r5
 8001268:	f7ff fac4 	bl	80007f4 <__aeabi_ddiv>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	4618      	mov	r0, r3
 8001272:	4621      	mov	r1, r4
 8001274:	f7ff fba6 	bl	80009c4 <__aeabi_d2f>
 8001278:	4602      	mov	r2, r0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	621a      	str	r2, [r3, #32]
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001288:	5443d6f4 	.word	0x5443d6f4
 800128c:	401921fb 	.word	0x401921fb

08001290 <filter_run>:
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	ed87 0a01 	vstr	s0, [r7, #4]
 800129a:	6038      	str	r0, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	ed93 7a07 	vldr	s14, [r3, #28]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80012ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	edd3 6a06 	vldr	s13, [r3, #24]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80012be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	edd3 6a08 	vldr	s13, [r3, #32]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80012d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	edc3 7a05 	vstr	s15, [r3, #20]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	695a      	ldr	r2, [r3, #20]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <PIDfloat>:
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001310:	6038      	str	r0, [r7, #0]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	ed93 7a05 	vldr	s14, [r3, #20]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	edd3 6a03 	vldr	s13, [r3, #12]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	ed93 6a00 	vldr	s12, [r3]
 8001324:	edd7 7a01 	vldr	s15, [r7, #4]
 8001328:	ee76 7a27 	vadd.f32	s15, s12, s15
 800132c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800133e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	edd3 7a08 	vldr	s15, [r3, #32]
 8001358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	dd03      	ble.n	800136a <PIDfloat+0x64>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	d503      	bpl.n	8001388 <PIDfloat+0x82>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	ed93 7a02 	vldr	s14, [r3, #8]
 800138e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	edc7 7a03 	vstr	s15, [r7, #12]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80013aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b6:	dd02      	ble.n	80013be <PIDfloat+0xb8>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80013c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	d502      	bpl.n	80013d8 <PIDfloat+0xd2>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eeb0 0a67 	vmov.f32	s0, s15
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <InitPI_BC>:
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <read_ADC>:
int Reg_1;		//Variabile temporanea in cui memorizzo il valore del registro DR per ADC1
float Adc_1;		//ADC1
int Reg_2;		//Variabile temporanea in cui memorizzo il valore del registro DR per ADC2
float Adc_2;		//ADC2

void read_ADC(t_AdcStruct *params){
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]


	if(ADC1->ISR &= ADC_ISR_EOC){    	//Andiamo a vedere se EOC è settato, se lo è leggo il registro DR.
 8001450:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8088 	beq.w	8001576 <read_ADC+0x12e>

		Reg_1 = ADC1->DR;		//Viene allocata sulla variabile Reg_1 il valore del registri DR
 8001466:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	461a      	mov	r2, r3
 800146e:	4b45      	ldr	r3, [pc, #276]	; (8001584 <read_ADC+0x13c>)
 8001470:	601a      	str	r2, [r3, #0]
		Reg_2 = ADC2->DR;		//Avendo letto DR vado a resettare EOC e la conversione può ripartire.
 8001472:	4b45      	ldr	r3, [pc, #276]	; (8001588 <read_ADC+0x140>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	461a      	mov	r2, r3
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <read_ADC+0x144>)
 800147a:	601a      	str	r2, [r3, #0]

		Adc_1 = (Reg_1*V_REF)/(RIS_ADC-1);	//Viene calcolato il Valore letto in ADC1
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <read_ADC+0x13c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001488:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001590 <read_ADC+0x148>
 800148c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001490:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001594 <read_ADC+0x14c>
 8001494:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <read_ADC+0x150>)
 800149a:	edc3 7a00 	vstr	s15, [r3]
		Adc_2 = (Reg_2*V_REF)/(RIS_ADC-1);	//Viene calcolato il Valore letto in ADC2
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <read_ADC+0x144>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001590 <read_ADC+0x148>
 80014ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001594 <read_ADC+0x14c>
 80014b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ba:	4b38      	ldr	r3, [pc, #224]	; (800159c <read_ADC+0x154>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]

		if(Adc_2 < V_REF/2)
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <read_ADC+0x154>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80015a0 <read_ADC+0x158>
 80014ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	d516      	bpl.n	8001502 <read_ADC+0xba>
			Adc_2 = -CURRENT_FS*(((V_REF/2)-Adc_2)/(V_REF/2)) + OFFSET;
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <read_ADC+0x154>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80015a0 <read_ADC+0x158>
 80014de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e2:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80015a0 <read_ADC+0x158>
 80014e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ea:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80015a4 <read_ADC+0x15c>
 80014f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <read_ADC+0x154>)
 80014fc:	edc3 7a00 	vstr	s15, [r3]
 8001500:	e015      	b.n	800152e <read_ADC+0xe6>
		else
			Adc_2 = CURRENT_FS*(((Adc_2)-(V_REF/2))/(V_REF/2)) + OFFSET;
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <read_ADC+0x154>)
 8001504:	edd3 7a00 	vldr	s15, [r3]
 8001508:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80015a0 <read_ADC+0x158>
 800150c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001510:	eddf 6a23 	vldr	s13, [pc, #140]	; 80015a0 <read_ADC+0x158>
 8001514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001518:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800151c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001520:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80015a4 <read_ADC+0x15c>
 8001524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <read_ADC+0x154>)
 800152a:	edc3 7a00 	vstr	s15, [r3]


		ADC1->CR |= ADC_CR_ADEN;
 800152e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADEN;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <read_ADC+0x140>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	4a11      	ldr	r2, [pc, #68]	; (8001588 <read_ADC+0x140>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6093      	str	r3, [r2, #8]
		ADC1->CR |= ADC_CR_ADSTART;	 //Settando ADSTART è possibile iniziare una nuova conversione, poichè setta nuovamente EOC.
 800154a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADSTART;	 //Settando ADSTART è possibile iniziare una nuova conversione, poichè setta nuovamente EOC.
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <read_ADC+0x140>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <read_ADC+0x140>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6093      	str	r3, [r2, #8]


		params->Adc_1 = Adc_1;
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <read_ADC+0x150>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]
		params->Adc_2 = Adc_2;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <read_ADC+0x154>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	605a      	str	r2, [r3, #4]
	}
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000b04 	.word	0x20000b04
 8001588:	50000100 	.word	0x50000100
 800158c:	20000b0c 	.word	0x20000b0c
 8001590:	40533333 	.word	0x40533333
 8001594:	447fc000 	.word	0x447fc000
 8001598:	20000b08 	.word	0x20000b08
 800159c:	20000b10 	.word	0x20000b10
 80015a0:	3fd33333 	.word	0x3fd33333
 80015a4:	3e4ccccd 	.word	0x3e4ccccd

080015a8 <AdcStruct_init>:

void AdcStruct_init(t_AdcStruct *params){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
		params->Adc_1 = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
		params->Adc_2 = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d0:	f003 f9f1 	bl	80049b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d4:	f000 f848 	bl	8001668 <SystemClock_Config>
  */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d8:	f000 fb4c 	bl	8001c74 <MX_GPIO_Init>
  MX_DMA_Init();
 80015dc:	f000 fb18 	bl	8001c10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015e0:	f000 faca 	bl	8001b78 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015e4:	f000 f8aa 	bl	800173c <MX_ADC1_Init>
  MX_ADC2_Init();
 80015e8:	f000 f924 	bl	8001834 <MX_ADC2_Init>
  MX_TIM1_Init();
 80015ec:	f000 f9c8 	bl	8001980 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015f0:	f000 fa5a 	bl	8001aa8 <MX_TIM2_Init>
  MX_DAC1_Init();
 80015f4:	f000 f97e 	bl	80018f4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80015f8:	f001 fca2 	bl	8002f40 <setup>

  HAL_TIM_PWM_Init(&htim1);	//Inizializzazione PWM H-Bridge Attuatore Lineare
 80015fc:	4815      	ldr	r0, [pc, #84]	; (8001654 <main+0x88>)
 80015fe:	f006 fc0d 	bl	8007e1c <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2); //Inizializzazione PWM Servo Motors
 8001602:	4815      	ldr	r0, [pc, #84]	; (8001658 <main+0x8c>)
 8001604:	f006 fc0a 	bl	8007e1c <HAL_TIM_PWM_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);			//Start PWM + PWM_N H-Bridge Attuatore Lineare
 8001608:	2100      	movs	r1, #0
 800160a:	4812      	ldr	r0, [pc, #72]	; (8001654 <main+0x88>)
 800160c:	f006 fc5e 	bl	8007ecc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001610:	2100      	movs	r1, #0
 8001612:	4810      	ldr	r0, [pc, #64]	; (8001654 <main+0x88>)
 8001614:	f007 fbc8 	bl	8008da8 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);			//Start PWM Servo Motors
 8001618:	2104      	movs	r1, #4
 800161a:	480f      	ldr	r0, [pc, #60]	; (8001658 <main+0x8c>)
 800161c:	f006 fc56 	bl	8007ecc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001620:	2108      	movs	r1, #8
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <main+0x8c>)
 8001624:	f006 fc52 	bl	8007ecc <HAL_TIM_PWM_Start>

  HAL_ADC_Start(&hadc1);	//Start ADC
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <main+0x90>)
 800162a:	f003 fdeb 	bl	8005204 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <main+0x94>)
 8001630:	f003 fde8 	bl	8005204 <HAL_ADC_Start>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);						//Start DAC
 8001634:	2100      	movs	r1, #0
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <main+0x98>)
 8001638:	f004 fce1 	bl	8005ffe <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800163c:	2110      	movs	r1, #16
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <main+0x98>)
 8001640:	f004 fcdd 	bl	8005ffe <HAL_DAC_Start>

  InitSystem();		//Inizializzazione Variabili di controllo e abilitazione modulazione PWM H-Bridge Attuatore Lineare
 8001644:	f003 f854 	bl	80046f0 <InitSystem>

  HAL_TIM_Base_Start_IT(&htim1);	//Start Update Interrupt TIM1
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <main+0x88>)
 800164a:	f006 fb7d 	bl	8007d48 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 800164e:	f001 fc6d 	bl	8002f2c <loop>
 8001652:	e7fc      	b.n	800164e <main+0x82>
 8001654:	20000cc0 	.word	0x20000cc0
 8001658:	20000d0c 	.word	0x20000d0c
 800165c:	20000bf4 	.word	0x20000bf4
 8001660:	20000b88 	.word	0x20000b88
 8001664:	20000b74 	.word	0x20000b74

08001668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0a4      	sub	sp, #144	; 0x90
 800166c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001672:	2238      	movs	r2, #56	; 0x38
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f008 ffad 	bl	800a5d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	463b      	mov	r3, r7
 800168e:	2244      	movs	r2, #68	; 0x44
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f008 ff9f 	bl	800a5d6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001698:	2000      	movs	r0, #0
 800169a:	f005 fb7d 	bl	8006d98 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800169e:	2302      	movs	r3, #2
 80016a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a8:	2340      	movs	r3, #64	; 0x40
 80016aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ac:	2302      	movs	r3, #2
 80016ae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b0:	2302      	movs	r3, #2
 80016b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016b4:	2304      	movs	r3, #4
 80016b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016b8:	2355      	movs	r3, #85	; 0x55
 80016ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016d4:	4618      	mov	r0, r3
 80016d6:	f005 fc13 	bl	8006f00 <HAL_RCC_OscConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80016e0:	f000 fb36 	bl	8001d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e4:	230f      	movs	r3, #15
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e8:	2303      	movs	r3, #3
 80016ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016f0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80016f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80016f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80016fa:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001700:	2104      	movs	r1, #4
 8001702:	4618      	mov	r0, r3
 8001704:	f005 ff14 	bl	8007530 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800170e:	f000 fb1f 	bl	8001d50 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001712:	f248 0302 	movw	r3, #32770	; 0x8002
 8001716:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001718:	2304      	movs	r3, #4
 800171a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800171c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001720:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001722:	463b      	mov	r3, r7
 8001724:	4618      	mov	r0, r3
 8001726:	f006 f91f 	bl	8007968 <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001730:	f000 fb0e 	bl	8001d50 <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	3790      	adds	r7, #144	; 0x90
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2220      	movs	r2, #32
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f008 ff3e 	bl	800a5d6 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <MX_ADC1_Init+0xf0>)
 800175c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001760:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <MX_ADC1_Init+0xf0>)
 8001764:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <MX_ADC1_Init+0xf0>)
 800176c:	2208      	movs	r2, #8
 800176e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <MX_ADC1_Init+0xf0>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <MX_ADC1_Init+0xf0>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <MX_ADC1_Init+0xf0>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <MX_ADC1_Init+0xf0>)
 8001784:	2204      	movs	r2, #4
 8001786:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <MX_ADC1_Init+0xf0>)
 800178a:	2200      	movs	r2, #0
 800178c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <MX_ADC1_Init+0xf0>)
 8001790:	2200      	movs	r2, #0
 8001792:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <MX_ADC1_Init+0xf0>)
 8001796:	2201      	movs	r2, #1
 8001798:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <MX_ADC1_Init+0xf0>)
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <MX_ADC1_Init+0xf0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017a8:	4b20      	ldr	r3, [pc, #128]	; (800182c <MX_ADC1_Init+0xf0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <MX_ADC1_Init+0xf0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <MX_ADC1_Init+0xf0>)
 80017b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <MX_ADC1_Init+0xf0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c6:	4819      	ldr	r0, [pc, #100]	; (800182c <MX_ADC1_Init+0xf0>)
 80017c8:	f003 fb94 	bl	8004ef4 <HAL_ADC_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80017d2:	f000 fabd 	bl	8001d50 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80017d6:	2306      	movs	r3, #6
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80017da:	2300      	movs	r3, #0
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e6:	4619      	mov	r1, r3
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <MX_ADC1_Init+0xf0>)
 80017ea:	f004 fa37 	bl	8005c5c <HAL_ADCEx_MultiModeConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80017f4:	f000 faac 	bl	8001d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <MX_ADC1_Init+0xf4>)
 80017fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017fc:	2306      	movs	r3, #6
 80017fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001804:	237f      	movs	r3, #127	; 0x7f
 8001806:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001808:	2304      	movs	r3, #4
 800180a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_ADC1_Init+0xf0>)
 8001816:	f003 fdb1 	bl	800537c <HAL_ADC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001820:	f000 fa96 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3730      	adds	r7, #48	; 0x30
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000bf4 	.word	0x20000bf4
 8001830:	1d500080 	.word	0x1d500080

08001834 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2220      	movs	r2, #32
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f008 fec8 	bl	800a5d6 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <MX_ADC2_Init+0xb4>)
 8001848:	4a28      	ldr	r2, [pc, #160]	; (80018ec <MX_ADC2_Init+0xb8>)
 800184a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <MX_ADC2_Init+0xb4>)
 800184e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001852:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <MX_ADC2_Init+0xb4>)
 8001856:	2208      	movs	r2, #8
 8001858:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <MX_ADC2_Init+0xb4>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <MX_ADC2_Init+0xb4>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <MX_ADC2_Init+0xb4>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_ADC2_Init+0xb4>)
 800186e:	2204      	movs	r2, #4
 8001870:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_ADC2_Init+0xb4>)
 8001874:	2200      	movs	r2, #0
 8001876:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_ADC2_Init+0xb4>)
 800187a:	2200      	movs	r2, #0
 800187c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_ADC2_Init+0xb4>)
 8001880:	2201      	movs	r2, #1
 8001882:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_ADC2_Init+0xb4>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_ADC2_Init+0xb4>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_ADC2_Init+0xb4>)
 8001896:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_ADC2_Init+0xb4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018a4:	4810      	ldr	r0, [pc, #64]	; (80018e8 <MX_ADC2_Init+0xb4>)
 80018a6:	f003 fb25 	bl	8004ef4 <HAL_ADC_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80018b0:	f000 fa4e 	bl	8001d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_ADC2_Init+0xbc>)
 80018b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b8:	2306      	movs	r3, #6
 80018ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018c0:	237f      	movs	r3, #127	; 0x7f
 80018c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018c4:	2304      	movs	r3, #4
 80018c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_ADC2_Init+0xb4>)
 80018d2:	f003 fd53 	bl	800537c <HAL_ADC_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80018dc:	f000 fa38 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000b88 	.word	0x20000b88
 80018ec:	50000100 	.word	0x50000100
 80018f0:	08600004 	.word	0x08600004

080018f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2230      	movs	r2, #48	; 0x30
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f008 fe68 	bl	800a5d6 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <MX_DAC1_Init+0x84>)
 8001908:	4a1c      	ldr	r2, [pc, #112]	; (800197c <MX_DAC1_Init+0x88>)
 800190a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800190c:	481a      	ldr	r0, [pc, #104]	; (8001978 <MX_DAC1_Init+0x84>)
 800190e:	f004 fb54 	bl	8005fba <HAL_DAC_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001918:	f000 fa1a 	bl	8001d50 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800191c:	2302      	movs	r3, #2
 800191e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001938:	2301      	movs	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001940:	463b      	mov	r3, r7
 8001942:	2200      	movs	r2, #0
 8001944:	4619      	mov	r1, r3
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_DAC1_Init+0x84>)
 8001948:	f004 fbd4 	bl	80060f4 <HAL_DAC_ConfigChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001952:	f000 f9fd 	bl	8001d50 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001956:	2301      	movs	r3, #1
 8001958:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800195a:	463b      	mov	r3, r7
 800195c:	2210      	movs	r2, #16
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_DAC1_Init+0x84>)
 8001962:	f004 fbc7 	bl	80060f4 <HAL_DAC_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 800196c:	f000 f9f0 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3730      	adds	r7, #48	; 0x30
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000b74 	.word	0x20000b74
 800197c:	50000800 	.word	0x50000800

08001980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b098      	sub	sp, #96	; 0x60
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001986:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2234      	movs	r2, #52	; 0x34
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f008 fe12 	bl	800a5d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <MX_TIM1_Init+0x120>)
 80019b4:	4a3b      	ldr	r2, [pc, #236]	; (8001aa4 <MX_TIM1_Init+0x124>)
 80019b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019b8:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <MX_TIM1_Init+0x120>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <MX_TIM1_Init+0x120>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 80019c4:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <MX_TIM1_Init+0x120>)
 80019c6:	f242 1233 	movw	r2, #8499	; 0x2133
 80019ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <MX_TIM1_Init+0x120>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <MX_TIM1_Init+0x120>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <MX_TIM1_Init+0x120>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019de:	4830      	ldr	r0, [pc, #192]	; (8001aa0 <MX_TIM1_Init+0x120>)
 80019e0:	f006 fa1c 	bl	8007e1c <HAL_TIM_PWM_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80019ea:	f000 f9b1 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019fe:	4619      	mov	r1, r3
 8001a00:	4827      	ldr	r0, [pc, #156]	; (8001aa0 <MX_TIM1_Init+0x120>)
 8001a02:	f007 fa85 	bl	8008f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a0c:	f000 f9a0 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a10:	2360      	movs	r3, #96	; 0x60
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a30:	2200      	movs	r2, #0
 8001a32:	4619      	mov	r1, r3
 8001a34:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <MX_TIM1_Init+0x120>)
 8001a36:	f006 fcc9 	bl	80083cc <HAL_TIM_PWM_ConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a40:	f000 f986 	bl	8001d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8001a50:	2332      	movs	r3, #50	; 0x32
 8001a52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_TIM1_Init+0x120>)
 8001a82:	f007 fac7 	bl	8009014 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001a8c:	f000 f960 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <MX_TIM1_Init+0x120>)
 8001a92:	f002 fac5 	bl	8004020 <HAL_TIM_MspPostInit>

}
 8001a96:	bf00      	nop
 8001a98:	3760      	adds	r7, #96	; 0x60
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000cc0 	.word	0x20000cc0
 8001aa4:	40012c00 	.word	0x40012c00

08001aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
 8001ac8:	615a      	str	r2, [r3, #20]
 8001aca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001ad6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001af6:	481f      	ldr	r0, [pc, #124]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001af8:	f006 f990 	bl	8007e1c <HAL_TIM_PWM_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001b02:	f000 f925 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4817      	ldr	r0, [pc, #92]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001b16:	f007 f9fb 	bl	8008f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001b20:	f000 f916 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b24:	2360      	movs	r3, #96	; 0x60
 8001b26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b34:	463b      	mov	r3, r7
 8001b36:	2204      	movs	r2, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480e      	ldr	r0, [pc, #56]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001b3c:	f006 fc46 	bl	80083cc <HAL_TIM_PWM_ConfigChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001b46:	f000 f903 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2208      	movs	r2, #8
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001b56:	f006 fc39 	bl	80083cc <HAL_TIM_PWM_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001b60:	f000 f8f6 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM2_Init+0xcc>)
 8001b66:	f002 fa5b 	bl	8004020 <HAL_TIM_MspPostInit>

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000d0c 	.word	0x20000d0c

08001b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001b7e:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <MX_USART2_UART_Init+0x94>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600; //115200 - 57600
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001b84:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc0:	4811      	ldr	r0, [pc, #68]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001bc2:	f007 fb32 	bl	800922a <HAL_UART_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bcc:	f000 f8c0 	bl	8001d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001bd4:	f008 fbc9 	bl	800a36a <HAL_UARTEx_SetTxFifoThreshold>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001bde:	f000 f8b7 	bl	8001d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be2:	2100      	movs	r1, #0
 8001be4:	4808      	ldr	r0, [pc, #32]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001be6:	f008 fbfe 	bl	800a3e6 <HAL_UARTEx_SetRxFifoThreshold>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bf0:	f000 f8ae 	bl	8001d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_USART2_UART_Init+0x90>)
 8001bf6:	f008 fb7f 	bl	800a2f8 <HAL_UARTEx_DisableFifoMode>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c00:	f000 f8a6 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000d58 	.word	0x20000d58
 8001c0c:	40004400 	.word	0x40004400

08001c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <MX_DMA_Init+0x60>)
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	4a15      	ldr	r2, [pc, #84]	; (8001c70 <MX_DMA_Init+0x60>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6493      	str	r3, [r2, #72]	; 0x48
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_DMA_Init+0x60>)
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <MX_DMA_Init+0x60>)
 8001c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <MX_DMA_Init+0x60>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6493      	str	r3, [r2, #72]	; 0x48
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <MX_DMA_Init+0x60>)
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	200b      	movs	r0, #11
 8001c4c:	f004 f981 	bl	8005f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c50:	200b      	movs	r0, #11
 8001c52:	f004 f998 	bl	8005f86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	200c      	movs	r0, #12
 8001c5c:	f004 f979 	bl	8005f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c60:	200c      	movs	r0, #12
 8001c62:	f004 f990 	bl	8005f86 <HAL_NVIC_EnableIRQ>

}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000

08001c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <MX_GPIO_Init+0xa8>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <MX_GPIO_Init+0xa8>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <MX_GPIO_Init+0xa8>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <MX_GPIO_Init+0xa8>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <MX_GPIO_Init+0xa8>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_GPIO_Init+0xa8>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_GPIO_Init+0xa8>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <MX_GPIO_Init+0xa8>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <MX_GPIO_Init+0xa8>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_B_Pin|EN_A_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2111      	movs	r1, #17
 8001cd6:	4812      	ldr	r0, [pc, #72]	; (8001d20 <MX_GPIO_Init+0xac>)
 8001cd8:	f005 f814 	bl	8006d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_GPIO_Init+0xb0>)
 8001ce4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	4619      	mov	r1, r3
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <MX_GPIO_Init+0xb4>)
 8001cf2:	f004 fe85 	bl	8006a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_B_Pin EN_A_Pin */
  GPIO_InitStruct.Pin = EN_B_Pin|EN_A_Pin;
 8001cf6:	2311      	movs	r3, #17
 8001cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <MX_GPIO_Init+0xac>)
 8001d0e:	f004 fe77 	bl	8006a00 <HAL_GPIO_Init>

}
 8001d12:	bf00      	nop
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	48000400 	.word	0x48000400
 8001d24:	10110000 	.word	0x10110000
 8001d28:	48000800 	.word	0x48000800

08001d2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3c:	d104      	bne.n	8001d48 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    /* Toggle LED2 */
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001d3e:	2120      	movs	r1, #32
 8001d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d44:	f004 fff6 	bl	8006d34 <HAL_GPIO_TogglePin>
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <_ZN3ros3MsgC1Ev+0x1c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	0800ab50 	.word	0x0800ab50

08001da0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
      data()
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ffe8 	bl	8001d80 <_ZN3ros3MsgC1Ev>
 8001db0:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3304      	adds	r3, #4
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ffcf 	bl	8001d5e <_ZN3ros4TimeC1Ev>
    {
    }
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	0800ab38 	.word	0x0800ab38

08001dd0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	b2ca      	uxtb	r2, r1
 8001dea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	0a19      	lsrs	r1, r3, #8
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	b2ca      	uxtb	r2, r1
 8001dfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	0c19      	lsrs	r1, r3, #16
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3302      	adds	r3, #2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	b2ca      	uxtb	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0e19      	lsrs	r1, r3, #24
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3303      	adds	r3, #3
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b2ca      	uxtb	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6899      	ldr	r1, [r3, #8]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	b2ca      	uxtb	r2, r1
 8001e34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a19      	lsrs	r1, r3, #8
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	b2ca      	uxtb	r2, r1
 8001e46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	0c19      	lsrs	r1, r3, #16
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3302      	adds	r3, #2
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	b2ca      	uxtb	r2, r1
 8001e58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0e19      	lsrs	r1, r3, #24
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3303      	adds	r3, #3
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e72:	68fb      	ldr	r3, [r7, #12]
    }
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	6839      	ldr	r1, [r7, #0]
 8001ea6:	440b      	add	r3, r1
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	440b      	add	r3, r1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3303      	adds	r3, #3
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	061b      	lsls	r3, r3, #24
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	440b      	add	r3, r1
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3302      	adds	r3, #2
 8001f10:	6839      	ldr	r1, [r7, #0]
 8001f12:	440b      	add	r3, r1
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	041b      	lsls	r3, r3, #16
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3303      	adds	r3, #3
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	440b      	add	r3, r1
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
     return offset;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    }
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	0800a868 	.word	0x0800a868

08001f64 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	0800a878 	.word	0x0800a878

08001f80 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fef8 	bl	8001d80 <_ZN3ros3MsgC1Ev>
 8001f90:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	809a      	strh	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
    {
    }
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	0800ab20 	.word	0x0800ab20
 8001fc4:	0800a89c 	.word	0x0800a89c

08001fc8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8899      	ldrh	r1, [r3, #4]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	b299      	uxth	r1, r3
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2ca      	uxtb	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe f908 	bl	8000218 <strlen>
 8002008:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4413      	add	r3, r2
 8002010:	69b9      	ldr	r1, [r7, #24]
 8002012:	4618      	mov	r0, r3
 8002014:	f001 f82a 	bl	800306c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3304      	adds	r3, #4
 800201c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	18d0      	adds	r0, r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4619      	mov	r1, r3
 800202c:	f008 fac8 	bl	800a5c0 <memcpy>
      offset += length_topic_name;
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4413      	add	r3, r2
 8002036:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe f8eb 	bl	8000218 <strlen>
 8002042:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	6979      	ldr	r1, [r7, #20]
 800204c:	4618      	mov	r0, r3
 800204e:	f001 f80d 	bl	800306c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	18d0      	adds	r0, r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4619      	mov	r1, r3
 8002066:	f008 faab 	bl	800a5c0 <memcpy>
      offset += length_message_type;
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	4413      	add	r3, r2
 8002070:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f8ce 	bl	8000218 <strlen>
 800207c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	6939      	ldr	r1, [r7, #16]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fff0 	bl	800306c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3304      	adds	r3, #4
 8002090:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	18d0      	adds	r0, r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4619      	mov	r1, r3
 80020a0:	f008 fa8e 	bl	800a5c0 <memcpy>
      offset += length_md5sum;
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	b2ca      	uxtb	r2, r1
 80020bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	0a19      	lsrs	r1, r3, #8
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3301      	adds	r3, #1
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	b2ca      	uxtb	r2, r1
 80020cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	0c19      	lsrs	r1, r3, #16
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3302      	adds	r3, #2
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	b2ca      	uxtb	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	0e19      	lsrs	r1, r3, #24
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3303      	adds	r3, #3
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	61fb      	str	r3, [r7, #28]
      return offset;
 80020f4:	69fb      	ldr	r3, [r7, #28]
    }
 80020f6:	4618      	mov	r0, r3
 80020f8:	3720      	adds	r7, #32
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020fe:	b580      	push	{r7, lr}
 8002100:	b08a      	sub	sp, #40	; 0x28
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b29a      	uxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	889b      	ldrh	r3, [r3, #4]
 800211e:	b21a      	sxth	r2, r3
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	3301      	adds	r3, #1
 8002124:	6839      	ldr	r1, [r7, #0]
 8002126:	440b      	add	r3, r1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	b21b      	sxth	r3, r3
 800212e:	4313      	orrs	r3, r2
 8002130:	b21b      	sxth	r3, r3
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	3302      	adds	r3, #2
 800213c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	441a      	add	r2, r3
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f000 ffac 	bl	80030a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	3304      	adds	r3, #4
 8002154:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	4413      	add	r3, r2
 8002160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002162:	429a      	cmp	r2, r3
 8002164:	d20c      	bcs.n	8002180 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	441a      	add	r2, r3
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	3b01      	subs	r3, #1
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	440b      	add	r3, r1
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	3301      	adds	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	e7ec      	b.n	800215a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	4413      	add	r3, r2
 8002186:	3b01      	subs	r3, #1
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	4413      	add	r3, r2
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	3b01      	subs	r3, #1
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	4413      	add	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	441a      	add	r2, r3
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 ff79 	bl	80030a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3304      	adds	r3, #4
 80021ba:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	6a3a      	ldr	r2, [r7, #32]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d20c      	bcs.n	80021e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	441a      	add	r2, r3
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	440b      	add	r3, r1
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	3301      	adds	r3, #1
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	e7ec      	b.n	80021c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	3b01      	subs	r3, #1
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	441a      	add	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	441a      	add	r2, r3
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f000 ff46 	bl	80030a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	3304      	adds	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	429a      	cmp	r2, r3
 8002230:	d20c      	bcs.n	800224c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	441a      	add	r2, r3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3b01      	subs	r3, #1
 800223c:	6839      	ldr	r1, [r7, #0]
 800223e:	440b      	add	r3, r1
 8002240:	7812      	ldrb	r2, [r2, #0]
 8002242:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e7ec      	b.n	8002226 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4413      	add	r3, r2
 8002252:	3b01      	subs	r3, #1
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	4413      	add	r3, r2
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	3b01      	subs	r3, #1
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	441a      	add	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4413      	add	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	440a      	add	r2, r1
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	3301      	adds	r3, #1
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	440b      	add	r3, r1
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	4313      	orrs	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	3302      	adds	r3, #2
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	440b      	add	r3, r1
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	3303      	adds	r3, #3
 80022ac:	6839      	ldr	r1, [r7, #0]
 80022ae:	440b      	add	r3, r1
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	061b      	lsls	r3, r3, #24
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	3304      	adds	r3, #4
 80022c2:	61bb      	str	r3, [r7, #24]
     return offset;
 80022c4:	69bb      	ldr	r3, [r7, #24]
    }
 80022c6:	4618      	mov	r0, r3
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	0800a8a0 	.word	0x0800a8a0

080022ec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	0800a8bc 	.word	0x0800a8bc

08002308 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fd34 	bl	8001d80 <_ZN3ros3MsgC1Ev>
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	711a      	strb	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002328:	609a      	str	r2, [r3, #8]
    {
    }
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	0800ab08 	.word	0x0800ab08
 8002338:	0800a89c 	.word	0x0800a89c

0800233c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	7912      	ldrb	r2, [r2, #4]
 8002354:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3301      	adds	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fd ff59 	bl	8000218 <strlen>
 8002366:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	4413      	add	r3, r2
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fe7b 	bl	800306c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3304      	adds	r3, #4
 800237a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	18d0      	adds	r0, r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4619      	mov	r1, r3
 800238a:	f008 f919 	bl	800a5c0 <memcpy>
      offset += length_msg;
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
      return offset;
 8002396:	68fb      	ldr	r3, [r7, #12]
    }
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	3301      	adds	r3, #1
 80023be:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	441a      	add	r2, r3
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fe6b 	bl	80030a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	3304      	adds	r3, #4
 80023d6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4413      	add	r3, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d20c      	bcs.n	8002402 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	441a      	add	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	6839      	ldr	r1, [r7, #0]
 80023f4:	440b      	add	r3, r1
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e7ec      	b.n	80023dc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	3b01      	subs	r3, #1
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	4413      	add	r3, r2
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	3b01      	subs	r3, #1
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
     return offset;
 8002426:	693b      	ldr	r3, [r7, #16]
    }
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	0800a8e0 	.word	0x0800a8e0

0800244c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	0800a8f4 	.word	0x0800a8f4

08002468 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fc84 	bl	8001d80 <_ZN3ros3MsgC1Ev>
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	619a      	str	r2, [r3, #24]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	61da      	str	r2, [r3, #28]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	0800aaf0 	.word	0x0800aaf0

080024b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	b2ca      	uxtb	r2, r1
 80024ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	0a19      	lsrs	r1, r3, #8
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	3301      	adds	r3, #1
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	b2ca      	uxtb	r2, r1
 80024dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0c19      	lsrs	r1, r3, #16
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	3302      	adds	r3, #2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	b2ca      	uxtb	r2, r1
 80024ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0e19      	lsrs	r1, r3, #24
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3303      	adds	r3, #3
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	b2ca      	uxtb	r2, r1
 8002500:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	3304      	adds	r3, #4
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	6a3a      	ldr	r2, [r7, #32]
 8002512:	429a      	cmp	r2, r3
 8002514:	d22b      	bcs.n	800256e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002524:	6939      	ldr	r1, [r7, #16]
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	0a19      	lsrs	r1, r3, #8
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	3301      	adds	r3, #1
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	4413      	add	r3, r2
 800253c:	b2ca      	uxtb	r2, r1
 800253e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	0c19      	lsrs	r1, r3, #16
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	3302      	adds	r3, #2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	b2ca      	uxtb	r2, r1
 800254e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	0e19      	lsrs	r1, r3, #24
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	3303      	adds	r3, #3
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	b2ca      	uxtb	r2, r1
 800255e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	3304      	adds	r3, #4
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	3301      	adds	r3, #1
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	e7ce      	b.n	800250c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6919      	ldr	r1, [r3, #16]
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4413      	add	r3, r2
 8002578:	b2ca      	uxtb	r2, r1
 800257a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	0a19      	lsrs	r1, r3, #8
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	3301      	adds	r3, #1
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	4413      	add	r3, r2
 800258a:	b2ca      	uxtb	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	0c19      	lsrs	r1, r3, #16
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	3302      	adds	r3, #2
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	4413      	add	r3, r2
 800259c:	b2ca      	uxtb	r2, r1
 800259e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	0e19      	lsrs	r1, r3, #24
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3303      	adds	r3, #3
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	4413      	add	r3, r2
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	3304      	adds	r3, #4
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d22b      	bcs.n	800261e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	b2ca      	uxtb	r2, r1
 80025de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	0a19      	lsrs	r1, r3, #8
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3301      	adds	r3, #1
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	b2ca      	uxtb	r2, r1
 80025ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	0c19      	lsrs	r1, r3, #16
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	3302      	adds	r3, #2
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	b2ca      	uxtb	r2, r1
 80025fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	0e19      	lsrs	r1, r3, #24
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	3303      	adds	r3, #3
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	4413      	add	r3, r2
 800260c:	b2ca      	uxtb	r2, r1
 800260e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	3304      	adds	r3, #4
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3301      	adds	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	e7ce      	b.n	80025bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69d9      	ldr	r1, [r3, #28]
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	b2ca      	uxtb	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	0a19      	lsrs	r1, r3, #8
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	3301      	adds	r3, #1
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	4413      	add	r3, r2
 800263a:	b2ca      	uxtb	r2, r1
 800263c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	0c19      	lsrs	r1, r3, #16
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	3302      	adds	r3, #2
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	4413      	add	r3, r2
 800264c:	b2ca      	uxtb	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	0e19      	lsrs	r1, r3, #24
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	3303      	adds	r3, #3
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4413      	add	r3, r2
 800265e:	b2ca      	uxtb	r2, r1
 8002660:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	3304      	adds	r3, #4
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	429a      	cmp	r2, r3
 8002674:	d228      	bcs.n	80026c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd fdc8 	bl	8000218 <strlen>
 8002688:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	6979      	ldr	r1, [r7, #20]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fcea 	bl	800306c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	3304      	adds	r3, #4
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	18d0      	adds	r0, r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4619      	mov	r1, r3
 80026b4:	f007 ff84 	bl	800a5c0 <memcpy>
      offset += length_stringsi;
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4413      	add	r3, r2
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	3301      	adds	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	e7d1      	b.n	800266c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80026ca:	4618      	mov	r0, r3
 80026cc:	3728      	adds	r7, #40	; 0x28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b08e      	sub	sp, #56	; 0x38
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	3301      	adds	r3, #1
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	6a3a      	ldr	r2, [r7, #32]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fe:	3302      	adds	r3, #2
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	4413      	add	r3, r2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	6a3a      	ldr	r2, [r7, #32]
 800270a:	4313      	orrs	r3, r2
 800270c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800270e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002710:	3303      	adds	r3, #3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	4413      	add	r3, r2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	6a3a      	ldr	r2, [r7, #32]
 800271c:	4313      	orrs	r3, r2
 800271e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002722:	3304      	adds	r3, #4
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	6a3a      	ldr	r2, [r7, #32]
 800272c:	429a      	cmp	r2, r3
 800272e:	d90a      	bls.n	8002746 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f007 ff54 	bl	800a5e8 <realloc>
 8002740:	4602      	mov	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800274c:	2300      	movs	r3, #0
 800274e:	633b      	str	r3, [r7, #48]	; 0x30
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002756:	429a      	cmp	r2, r3
 8002758:	d236      	bcs.n	80027c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002762:	6839      	ldr	r1, [r7, #0]
 8002764:	440a      	add	r2, r1
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002770:	3301      	adds	r3, #1
 8002772:	6839      	ldr	r1, [r7, #0]
 8002774:	440b      	add	r3, r1
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002782:	3302      	adds	r3, #2
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	440b      	add	r3, r1
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	041b      	lsls	r3, r3, #16
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	3303      	adds	r3, #3
 8002796:	6839      	ldr	r1, [r7, #0]
 8002798:	440b      	add	r3, r1
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	3304      	adds	r3, #4
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	3208      	adds	r2, #8
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80027c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c2:	3301      	adds	r3, #1
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
 80027c6:	e7c3      	b.n	8002750 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	3301      	adds	r3, #1
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	3302      	adds	r3, #2
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	3303      	adds	r3, #3
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	4313      	orrs	r3, r2
 8002806:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280a:	3304      	adds	r3, #4
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	429a      	cmp	r2, r3
 8002816:	d90a      	bls.n	800282e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f007 fee0 	bl	800a5e8 <realloc>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002834:	2300      	movs	r3, #0
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283e:	429a      	cmp	r2, r3
 8002840:	d236      	bcs.n	80028b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	440a      	add	r2, r1
 800284e:	7812      	ldrb	r2, [r2, #0]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002858:	3301      	adds	r3, #1
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	440b      	add	r3, r1
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	4313      	orrs	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286a:	3302      	adds	r3, #2
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	440b      	add	r3, r1
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287c:	3303      	adds	r3, #3
 800287e:	6839      	ldr	r1, [r7, #0]
 8002880:	440b      	add	r3, r1
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002892:	3304      	adds	r3, #4
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	3214      	adds	r2, #20
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	3301      	adds	r3, #1
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ae:	e7c3      	b.n	8002838 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80028ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028bc:	3301      	adds	r3, #1
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80028cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ce:	3302      	adds	r3, #2
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	3303      	adds	r3, #3
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f2:	3304      	adds	r3, #4
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d90a      	bls.n	8002916 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f007 fe6c 	bl	800a5e8 <realloc>
 8002910:	4602      	mov	r2, r0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002926:	429a      	cmp	r2, r3
 8002928:	d23f      	bcs.n	80029aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	441a      	add	r2, r3
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fbb6 	bl	80030a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	3304      	adds	r3, #4
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
 8002946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294e:	429a      	cmp	r2, r3
 8002950:	d20c      	bcs.n	800296c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	441a      	add	r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	3b01      	subs	r3, #1
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	440b      	add	r3, r1
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	3301      	adds	r3, #1
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	e7ec      	b.n	8002946 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800296c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	3b01      	subs	r3, #1
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	4413      	add	r3, r2
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297e:	3b01      	subs	r3, #1
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4413      	add	r3, r2
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	3220      	adds	r2, #32
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	3301      	adds	r3, #1
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a8:	e7ba      	b.n	8002920 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80029aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80029ac:	4618      	mov	r0, r3
 80029ae:	3738      	adds	r7, #56	; 0x38
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	0800aa2c 	.word	0x0800aa2c

080029d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	0800a918 	.word	0x0800a918

080029ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	611a      	str	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68d8      	ldr	r0, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6891      	ldr	r1, [r2, #8]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	4798      	blx	r3
 8002a38:	4603      	mov	r3, r0
  };
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
  }
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <_ZN13STM32HardwareC1Ev+0x34>)
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	20000d58 	.word	0x20000d58

08002ab8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f804 	bl	8002ace <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f006 fc72 	bl	80093cc <HAL_UART_Receive_DMA>
    }
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002afc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ffa8 	bl	8002a5a <_ZN13STM32Hardware10getRdmaIndEv>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d012      	beq.n	8002b40 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b20:	1c59      	adds	r1, r3, #1
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	791b      	ldrb	r3, [r3, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002b40:	68fb      	ldr	r3, [r7, #12]
    }
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
	...

08002b4c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d108      	bne.n	8002b72 <_ZN13STM32Hardware5flushEv+0x26>
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	f083 0301 	eor.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <_ZN13STM32Hardware5flushEv+0x26>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <_ZN13STM32Hardware5flushEv+0x28>
 8002b72:	2300      	movs	r3, #0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d03f      	beq.n	8002bf8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002b78:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d031      	beq.n	8002bf2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d20a      	bcs.n	8002bb4 <_ZN13STM32Hardware5flushEv+0x68>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	e006      	b.n	8002bc2 <_ZN13STM32Hardware5flushEv+0x76>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	89fa      	ldrh	r2, [r7, #14]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f006 fb77 	bl	80092cc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	4413      	add	r3, r2
 8002be8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002bf2:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
      }
    }
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	200000a4 	.word	0x200000a4

08002c04 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1a:	bfa8      	it	ge
 8002c1c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002c20:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c28:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bf28      	it	cs
 8002c32:	4613      	movcs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f007 fcb9 	bl	800a5c0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	4413      	add	r3, r2
 8002c58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d00b      	beq.n	8002c82 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	18d1      	adds	r1, r2, r3
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f007 fc9f 	bl	800a5c0 <memcpy>
      }

      flush();
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff ff62 	bl	8002b4c <_ZN13STM32Hardware5flushEv>
    }
 8002c88:	bf00      	nop
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	f001 fef2 	bl	8004a80 <HAL_GetTick>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
      data(0)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f864 	bl	8001d80 <_ZN3ros3MsgC1Ev>
 8002cb8:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	809a      	strh	r2, [r3, #4]
    {
    }
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	0800aaac 	.word	0x0800aaac

08002cd4 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ce8:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002cea:	8939      	ldrh	r1, [r7, #8]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b2ca      	uxtb	r2, r1
 8002cf4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002cf6:	893b      	ldrh	r3, [r7, #8]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	b299      	uxth	r1, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	b2ca      	uxtb	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    }
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d2e:	893a      	ldrh	r2, [r7, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6839      	ldr	r1, [r7, #0]
 8002d34:	440b      	add	r3, r1
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d40:	893b      	ldrh	r3, [r7, #8]
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3301      	adds	r3, #1
 8002d48:	6839      	ldr	r1, [r7, #0]
 8002d4a:	440b      	add	r3, r1
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	b21b      	sxth	r3, r3
 8002d52:	4313      	orrs	r3, r2
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002d5a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3302      	adds	r3, #2
 8002d66:	60fb      	str	r3, [r7, #12]
     return offset;
 8002d68:	68fb      	ldr	r3, [r7, #12]
    }
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <_ZN8std_msgs5Int167getTypeEv>:

    const char * getType(){ return "std_msgs/Int16"; };
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	0800a93c 	.word	0x0800a93c

08002d94 <_ZN8std_msgs5Int166getMD5Ev>:
    const char * getMD5(){ return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	0800a94c 	.word	0x0800a94c

08002db0 <_ZN11coorsa_rfsm14SetpointUpdateC1Ev>:
      typedef int8_t _LIM_type;
      _LIM_type LIM;
      typedef float _value_type;
      _value_type value;

    SetpointUpdate():
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
      LIM(0),
      value(0)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe ffe0 	bl	8001d80 <_ZN3ros3MsgC1Ev>
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <_ZN11coorsa_rfsm14SetpointUpdateC1Ev+0x30>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	711a      	strb	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
    {
    }
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	0800aa94 	.word	0x0800aa94

08002de4 <_ZNK11coorsa_rfsm14SetpointUpdate9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_LIM;
      u_LIM.real = this->LIM;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002df8:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_LIM.base >> (8 * 0)) & 0xFF;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	7c3a      	ldrb	r2, [r7, #16]
 8002e02:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->LIM);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3301      	adds	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_value;
      u_value.real = this->value;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_value.base >> (8 * 0)) & 0xFF;
 8002e10:	68f9      	ldr	r1, [r7, #12]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	b2ca      	uxtb	r2, r1
 8002e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_value.base >> (8 * 1)) & 0xFF;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	0a19      	lsrs	r1, r3, #8
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3301      	adds	r3, #1
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	b2ca      	uxtb	r2, r1
 8002e2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_value.base >> (8 * 2)) & 0xFF;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	0c19      	lsrs	r1, r3, #16
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3302      	adds	r3, #2
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	b2ca      	uxtb	r2, r1
 8002e3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_value.base >> (8 * 3)) & 0xFF;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	0e19      	lsrs	r1, r3, #24
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3303      	adds	r3, #3
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	b2ca      	uxtb	r2, r1
 8002e4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->value);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	617b      	str	r3, [r7, #20]
      return offset;
 8002e52:	697b      	ldr	r3, [r7, #20]
    }
 8002e54:	4618      	mov	r0, r3
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <_ZN11coorsa_rfsm14SetpointUpdate11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_LIM;
      u_LIM.base = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	743b      	strb	r3, [r7, #16]
      u_LIM.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e72:	7c3a      	ldrb	r2, [r7, #16]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	6839      	ldr	r1, [r7, #0]
 8002e78:	440b      	add	r3, r1
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	743b      	strb	r3, [r7, #16]
      this->LIM = u_LIM.real;
 8002e82:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->LIM);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_value;
      u_value.base = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	440a      	add	r2, r1
 8002e9c:	7812      	ldrb	r2, [r2, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	440b      	add	r3, r1
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	6839      	ldr	r1, [r7, #0]
 8002ebc:	440b      	add	r3, r1
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	041b      	lsls	r3, r3, #16
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3303      	adds	r3, #3
 8002ecc:	6839      	ldr	r1, [r7, #0]
 8002ece:	440b      	add	r3, r1
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	061b      	lsls	r3, r3, #24
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
      this->value = u_value.real;
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->value);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]
     return offset;
 8002ee4:	697b      	ldr	r3, [r7, #20]
    }
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	371c      	adds	r7, #28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <_ZN11coorsa_rfsm14SetpointUpdate7getTypeEv>:

    const char * getType(){ return "coorsa_rfsm/SetpointUpdate"; };
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <_ZN11coorsa_rfsm14SetpointUpdate7getTypeEv+0x18>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	0800a970 	.word	0x0800a970

08002f10 <_ZN11coorsa_rfsm14SetpointUpdate6getMD5Ev>:
    const char * getMD5(){ return "a5435513701bc6bab9ada8288fb59da4"; };
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <_ZN11coorsa_rfsm14SetpointUpdate6getMD5Ev+0x18>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	0800a98c 	.word	0x0800a98c

08002f2c <loop>:

int i,state;


void loop(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <loop+0x10>)
 8002f32:	f000 f9c7 	bl	80032c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	//HAL_Delay(500);				//Aspetto 0.5s
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200000d0 	.word	0x200000d0

08002f40 <setup>:

void setup(void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	WaitingForResult = 0;
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <setup+0x34>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
	state = 0;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <setup+0x38>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
	nh.initNode();			//Inizializzo il nodo
 8002f50:	480a      	ldr	r0, [pc, #40]	; (8002f7c <setup+0x3c>)
 8002f52:	f000 fb93 	bl	800367c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);	//Pubblico su chatter
 8002f56:	490a      	ldr	r1, [pc, #40]	; (8002f80 <setup+0x40>)
 8002f58:	4808      	ldr	r0, [pc, #32]	; (8002f7c <setup+0x3c>)
 8002f5a:	f000 fbac 	bl	80036b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(sub);		//Sottoscrivo a command
 8002f5e:	4909      	ldr	r1, [pc, #36]	; (8002f84 <setup+0x44>)
 8002f60:	4806      	ldr	r0, [pc, #24]	; (8002f7c <setup+0x3c>)
 8002f62:	f000 fbd8 	bl	8003716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>
	nh.subscribe(subsp);
 8002f66:	4908      	ldr	r1, [pc, #32]	; (8002f88 <setup+0x48>)
 8002f68:	4804      	ldr	r0, [pc, #16]	; (8002f7c <setup+0x3c>)
 8002f6a:	f000 fbff 	bl	800376c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_>
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200000ac 	.word	0x200000ac
 8002f78:	20000a6c 	.word	0x20000a6c
 8002f7c:	200000d0 	.word	0x200000d0
 8002f80:	20000a14 	.word	0x20000a14
 8002f84:	20000a28 	.word	0x20000a28
 8002f88:	20000a44 	.word	0x20000a44

08002f8c <sendMess>:


void sendMess(int mess){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	RosMess.data = mess;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	b21a      	sxth	r2, r3
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <sendMess+0x28>)
 8002f9a:	809a      	strh	r2, [r3, #4]

	chatter.publish(&RosMess);				//Lo pubblico sul chatter
 8002f9c:	4905      	ldr	r1, [pc, #20]	; (8002fb4 <sendMess+0x28>)
 8002f9e:	4806      	ldr	r0, [pc, #24]	; (8002fb8 <sendMess+0x2c>)
 8002fa0:	f7ff fd3b 	bl	8002a1a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8002fa4:	4805      	ldr	r0, [pc, #20]	; (8002fbc <sendMess+0x30>)
 8002fa6:	f000 f98d 	bl	80032c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000a64 	.word	0x20000a64
 8002fb8:	20000a14 	.word	0x20000a14
 8002fbc:	200000d0 	.word	0x200000d0

08002fc0 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE>:

void SetpointUpdateHandler(const coorsa_rfsm::SetpointUpdate& msg){
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

	if(msg.value > 2.5f || msg.value < 0.1f) return;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fce:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	dc25      	bgt.n	8003028 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x68>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fe2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003034 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x74>
 8002fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d41b      	bmi.n	8003028 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x68>

	if(msg.LIM == 0){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d103      	bne.n	8003002 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x42>
		ControlPanel.MID_LIM_DOWN = msg.value;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x78>)
 8003000:	6193      	str	r3, [r2, #24]
	}
	if(msg.LIM == 1){
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d103      	bne.n	8003014 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x54>
		ControlPanel.MID_LIM_UP = msg.value;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a09      	ldr	r2, [pc, #36]	; (8003038 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x78>)
 8003012:	6153      	str	r3, [r2, #20]
	}
	if(msg.LIM == 2){
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d105      	bne.n	800302a <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x6a>
		ControlPanel.UP_LIM = msg.value;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x78>)
 8003024:	61d3      	str	r3, [r2, #28]
 8003026:	e000      	b.n	800302a <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x6a>
	if(msg.value > 2.5f || msg.value < 0.1f) return;
 8003028:	bf00      	nop
	}
}
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	3dcccccd 	.word	0x3dcccccd
 8003038:	200000b0 	.word	0x200000b0

0800303c <_Z11cmdCallbackRKN8std_msgs5Int16E>:

void cmdCallback(const std_msgs::Int16& msg){	//Callback del subscriber
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

	WaitingForResult = 1;
 8003044:	4b07      	ldr	r3, [pc, #28]	; (8003064 <_Z11cmdCallbackRKN8std_msgs5Int16E+0x28>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]
	Mess = msg.data;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003050:	461a      	mov	r2, r3
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <_Z11cmdCallbackRKN8std_msgs5Int16E+0x2c>)
 8003054:	601a      	str	r2, [r3, #0]
	//sendMess(msg.data);	//Giro il messaggio al chatter
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	200000ac 	.word	0x200000ac
 8003068:	200000a8 	.word	0x200000a8

0800306c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d80d      	bhi.n	800309c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	fa22 f103 	lsr.w	r1, r2, r3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	b2ca      	uxtb	r2, r1
 8003092:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3301      	adds	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	e7ee      	b.n	800307a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d811      	bhi.n	80030e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	440a      	add	r2, r1
 80030cc:	7812      	ldrb	r2, [r2, #0]
 80030ce:	4611      	mov	r1, r2
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	00d2      	lsls	r2, r2, #3
 80030d4:	fa01 f202 	lsl.w	r2, r1, r2
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3301      	adds	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e7ea      	b.n	80030bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	0800aadc 	.word	0x0800aadc

08003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ffe8 	bl	80030f4 <_ZN3ros15NodeHandleBase_C1Ev>
 8003124:	4a3a      	ldr	r2, [pc, #232]	; (8003210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fca6 	bl	8002a80 <_ZN13STM32HardwareC1Ev>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff f990 	bl	8002468 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b18      	cmp	r3, #24
 8003150:	d80b      	bhi.n	800316a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	2200      	movs	r2, #0
 8003160:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	3301      	adds	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	e7f0      	b.n	800314c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b18      	cmp	r3, #24
 8003172:	d80a      	bhi.n	800318a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	f202 2222 	addw	r2, r2, #546	; 0x222
 800317c:	2100      	movs	r1, #0
 800317e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	3301      	adds	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e7f1      	b.n	800316e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003194:	d20a      	bcs.n	80031ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e7f0      	b.n	800318e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b6:	d20a      	bcs.n	80031ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4413      	add	r3, r2
 80031be:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3301      	adds	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	e7f0      	b.n	80031b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	0800aa80 	.word	0x0800aa80

08003214 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	0800aac4 	.word	0x0800aac4

08003234 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ffe5 	bl	8003214 <_ZN3ros11Subscriber_C1Ev>
 800324a:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei+0x44>)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	330c      	adds	r3, #12
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fd27 	bl	8002ca8 <_ZN8std_msgs5Int16C1Ev>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	615a      	str	r2, [r3, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	609a      	str	r2, [r3, #8]
  };
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	0800aa68 	.word	0x0800aa68

0800327c <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ffc1 	bl	8003214 <_ZN3ros11Subscriber_C1Ev>
 8003292:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	330c      	adds	r3, #12
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fd87 	bl	8002db0 <_ZN11coorsa_rfsm14SetpointUpdateC1Ev>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	619a      	str	r2, [r3, #24]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	61da      	str	r2, [r3, #28]
    topic_ = topic_name;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]
  };
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	0800aa50 	.word	0x0800aa50

080032c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fcdd 	bl	8002c90 <_ZN13STM32Hardware4timeEv>
 80032d6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d903      	bls.n	80032f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d903      	bls.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003316:	2b00      	cmp	r3, #0
 8003318:	d014      	beq.n	8003344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fcb6 	bl	8002c90 <_ZN13STM32Hardware4timeEv>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad2      	subs	r2, r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003330:	429a      	cmp	r2, r3
 8003332:	bf8c      	ite	hi
 8003334:	2301      	movhi	r3, #1
 8003336:	2300      	movls	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 800333e:	f06f 0301 	mvn.w	r3, #1
 8003342:	e197      	b.n	8003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
        }
      }
      int data = hardware_.read();
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fbd1 	bl	8002af0 <_ZN13STM32Hardware4readEv>
 800334e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f2c0 8177 	blt.w	8003646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
        break;
      checksum_ += data;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800336e:	2b07      	cmp	r3, #7
 8003370:	d11e      	bne.n	80033b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003378:	1c59      	adds	r1, r3, #1
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	b2d1      	uxtb	r1, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	460a      	mov	r2, r1
 800338a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003394:	1e5a      	subs	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1b4      	bne.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2208      	movs	r2, #8
 80033aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80033ae:	e7af      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d128      	bne.n	800340c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2bff      	cmp	r3, #255	; 0xff
 80033be:	d10d      	bne.n	80033dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f103 0214 	add.w	r2, r3, #20
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80033da:	e799      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fc55 	bl	8002c90 <_ZN13STM32Hardware4timeEv>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	bf8c      	ite	hi
 80033f4:	2301      	movhi	r3, #1
 80033f6:	2300      	movls	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d088      	beq.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003406:	f06f 0301 	mvn.w	r3, #1
 800340a:	e133      	b.n	8003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003412:	2b01      	cmp	r3, #1
 8003414:	d11b      	bne.n	800344e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
      {
        if (data == PROTOCOL_VER)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2bfe      	cmp	r3, #254	; 0xfe
 800341a:	d107      	bne.n	800342c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800342a:	e771      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800343a:	f083 0301 	eor.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	f43f af65 	beq.w	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9bb 	bl	80037c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800344c:	e760      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003454:	2b02      	cmp	r3, #2
 8003456:	d113      	bne.n	8003480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
      {
        bytes_ = data;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800347e:	e747      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003486:	2b03      	cmp	r3, #3
 8003488:	d110      	bne.n	80034ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
      {
        bytes_ += data << 8;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	441a      	add	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80034aa:	e731      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d116      	bne.n	80034e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
      {
        if ((checksum_ % 256) == 255)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80034bc:	425a      	negs	r2, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	bf58      	it	pl
 80034c4:	4253      	negpl	r3, r2
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	d107      	bne.n	80034da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80034d8:	e71a      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80034e2:	e715      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10f      	bne.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
      {
        topic_ = data;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800350c:	e700      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003514:	2b06      	cmp	r3, #6
 8003516:	d117      	bne.n	8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
      {
        topic_ += data << 8;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	441a      	add	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2207      	movs	r2, #7
 800352e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f aee9 	bne.w	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2208      	movs	r2, #8
 8003542:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003546:	e6e3      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800354e:	2b08      	cmp	r3, #8
 8003550:	f47f aede 	bne.w	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003562:	425a      	negs	r2, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	bf58      	it	pl
 800356a:	4253      	negpl	r3, r2
 800356c:	2bff      	cmp	r3, #255	; 0xff
 800356e:	f47f aecf 	bne.w	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d110      	bne.n	800359e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
          {
            requestSyncTime();
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f920 	bl	80037c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f93b 	bl	80037fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800359c:	e06a      	b.n	8003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035a4:	2b0a      	cmp	r3, #10
 80035a6:	d107      	bne.n	80035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
          {
            syncTime(message_in);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fa03 	bl	80039bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80035b6:	e6ab      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d10e      	bne.n	80035e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
          {
            req_param_resp.deserialize(message_in);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f7ff f87e 	bl	80026d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80035de:	e697      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035e6:	2b0b      	cmp	r3, #11
 80035e8:	d104      	bne.n	80035f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
          {
            configured_ = false;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80035f2:	e68d      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035fa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f43f ae81 	beq.w	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003614:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800361e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003628:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003640:	4611      	mov	r1, r2
 8003642:	4798      	blx	r3
    while (true)
 8003644:	e664      	b.n	8003310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003646:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00f      	beq.n	8003672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003660:	4293      	cmp	r3, r2
 8003662:	d906      	bls.n	8003672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
    {
      requestSyncTime();
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8ac 	bl	80037c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 8003672:	2300      	movs	r3, #0
  }
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fa15 	bl	8002ab8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b18      	cmp	r3, #24
 80036c8:	dc1e      	bgt.n	8003708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d111      	bne.n	8003700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	60da      	str	r2, [r3, #12]
        return true;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e004      	b.n	800370a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e7dd      	b.n	80036c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8003708:	2300      	movs	r3, #0
  }
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b18      	cmp	r3, #24
 8003728:	dc19      	bgt.n	800375e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10d      	bne.n	8003756 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800373a:	6839      	ldr	r1, [r7, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	605a      	str	r2, [r3, #4]
        return true;
 8003752:	2301      	movs	r3, #1
 8003754:	e004      	b.n	8003760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e7e2      	b.n	8003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0xe>
      }
    }
    return false;
 800375e:	2300      	movs	r3, #0
  }
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b18      	cmp	r3, #24
 800377e:	dc19      	bgt.n	80037b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	f202 2222 	addw	r2, r2, #546	; 0x222
 800379a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	605a      	str	r2, [r3, #4]
        return true;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e004      	b.n	80037b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e7e2      	b.n	800377a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0xe>
    return false;
 80037b4:	2300      	movs	r3, #0
  }
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80037ca:	f107 030c 	add.w	r3, r7, #12
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fae6 	bl	8001da0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f107 020c 	add.w	r2, r7, #12
 80037de:	210a      	movs	r1, #10
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
    rt_time = hardware_.time();
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fa51 	bl	8002c90 <_ZN13STM32Hardware4timeEv>
 80037ee:	4602      	mov	r2, r0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80037fe:	b590      	push	{r4, r7, lr}
 8003800:	b08b      	sub	sp, #44	; 0x2c
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fbb8 	bl	8001f80 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003810:	2300      	movs	r3, #0
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	2b18      	cmp	r3, #24
 8003818:	dc63      	bgt.n	80038e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d056      	beq.n	80038da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	b29b      	uxth	r3, r3
 800383e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4608      	mov	r0, r1
 800387a:	4798      	blx	r3
 800387c:	4603      	mov	r3, r0
 800387e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4608      	mov	r0, r1
 80038a8:	4798      	blx	r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80038ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038b2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681c      	ldr	r4, [r3, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff f8ba 	bl	8002a42 <_ZN3ros9Publisher15getEndpointTypeEv>
 80038ce:	4601      	mov	r1, r0
 80038d0:	f107 030c 	add.w	r3, r7, #12
 80038d4:	461a      	mov	r2, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	3301      	adds	r3, #1
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
 80038e0:	e798      	b.n	8003814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	2b18      	cmp	r3, #24
 80038ea:	dc5f      	bgt.n	80039ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d053      	beq.n	80039a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b29b      	uxth	r3, r3
 800390c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003912:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003926:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4608      	mov	r0, r1
 800393e:	4798      	blx	r3
 8003940:	4603      	mov	r3, r0
 8003942:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	f202 2222 	addw	r2, r2, #546	; 0x222
 800394c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4608      	mov	r0, r1
 8003964:	4798      	blx	r3
 8003966:	4603      	mov	r3, r0
 8003968:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800396a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800396e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681c      	ldr	r4, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800397e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003986:	f202 2222 	addw	r2, r2, #546	; 0x222
 800398a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3304      	adds	r3, #4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4608      	mov	r0, r1
 8003996:	4798      	blx	r3
 8003998:	4601      	mov	r1, r0
 800399a:	f107 030c 	add.w	r3, r7, #12
 800399e:	461a      	mov	r2, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	3301      	adds	r3, #1
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	e79c      	b.n	80038e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80039b4:	bf00      	nop
 80039b6:	372c      	adds	r7, #44	; 0x2c
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd90      	pop	{r4, r7, pc}

080039bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80039c6:	f107 0308 	add.w	r3, r7, #8
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe f9e8 	bl	8001da0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff f95b 	bl	8002c90 <_ZN13STM32Hardware4timeEv>
 80039da:	4602      	mov	r2, r0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80039e6:	f107 0308 	add.w	r3, r7, #8
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fa47 	bl	8001e80 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4915      	ldr	r1, [pc, #84]	; (8003a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80039f8:	fba1 1303 	umull	r1, r3, r1, r3
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	4413      	add	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003a02:	6939      	ldr	r1, [r7, #16]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a08:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a12:	fb00 f303 	mul.w	r3, r0, r3
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	440b      	add	r3, r1
 8003a20:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003a22:	f107 0308 	add.w	r3, r7, #8
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8a4 	bl	8003b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff f92b 	bl	8002c90 <_ZN13STM32Hardware4timeEv>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003a42:	bf00      	nop
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	10624dd3 	.word	0x10624dd3
 8003a50:	000f4240 	.word	0x000f4240

08003a54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b63      	cmp	r3, #99	; 0x63
 8003a64:	dd09      	ble.n	8003a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003a6c:	f083 0301 	eor.w	r3, r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e077      	b.n	8003b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003a86:	3207      	adds	r2, #7
 8003a88:	4611      	mov	r1, r2
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
 8003a8e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	22ff      	movs	r2, #255	; 0xff
 8003a94:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	22fe      	movs	r2, #254	; 0xfe
 8003a9c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	121b      	asrs	r3, r3, #8
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003ac4:	4413      	add	r3, r2
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	b21b      	sxth	r3, r3
 8003ae0:	121b      	asrs	r3, r3, #8
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003aee:	2305      	movs	r3, #5
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	3307      	adds	r3, #7
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	da0d      	bge.n	8003b18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4413      	add	r3, r2
 8003b02:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	3301      	adds	r3, #1
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e7ec      	b.n	8003af2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3307      	adds	r3, #7
 8003b1c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	425a      	negs	r2, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	bf58      	it	pl
 8003b28:	4253      	negpl	r3, r2
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	6179      	str	r1, [r7, #20]
 8003b32:	43d2      	mvns	r2, r2
 8003b34:	b2d1      	uxtb	r1, r2
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b46:	dc0a      	bgt.n	8003b5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1d18      	adds	r0, r3, #4
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f7ff f855 	bl	8002c04 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	e005      	b.n	8003b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003b5e:	4905      	ldr	r1, [pc, #20]	; (8003b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f849 	bl	8003bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	0800a9b0 	.word	0x0800a9b0

08003b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff f882 	bl	8002c90 <_ZN13STM32Hardware4timeEv>
 8003b8c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4915      	ldr	r1, [pc, #84]	; (8003bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003b96:	fba1 1303 	umull	r1, r3, r1, r3
 8003b9a:	099b      	lsrs	r3, r3, #6
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003bae:	fba3 0302 	umull	r0, r3, r3, r2
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bb8:	fb00 f303 	mul.w	r3, r0, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	1aca      	subs	r2, r1, r3
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003bc8:	4413      	add	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f000 fe94 	bl	800490c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	10624dd3 	.word	0x10624dd3
 8003bf0:	000f4240 	.word	0x000f4240
 8003bf4:	3b9aca00 	.word	0x3b9aca00

08003bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	2103      	movs	r1, #3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f804 	bl	8003c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003c22:	f107 0314 	add.w	r3, r7, #20
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fb6e 	bl	8002308 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
 8003c2e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f107 0214 	add.w	r2, r7, #20
 8003c3e:	2107      	movs	r1, #7
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	4798      	blx	r3
  }
 8003c44:	bf00      	nop
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <_Z41__static_initialization_and_destruction_0ii>:
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d11f      	bne.n	8003c9c <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d11a      	bne.n	8003c9c <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;								//Handler del nodo ros
 8003c66:	480f      	ldr	r0, [pc, #60]	; (8003ca4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003c68:	f7ff fa54 	bl	8003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 str_msg;								//Messaggio che viene pubblicato dal /chatter
 8003c6c:	480e      	ldr	r0, [pc, #56]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003c6e:	f7ff f81b 	bl	8002ca8 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher chatter("Pantograph_res", &str_msg);		//Definisco il chatter
 8003c72:	2300      	movs	r3, #0
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003c76:	490d      	ldr	r1, [pc, #52]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003c78:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003c7a:	f7fe feb7 	bl	80029ec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int16> sub("Pantograph_cmd",cmdCallback);	//Definisco il command (la Subscriber è un template sul tipo di messaggio)
 8003c7e:	2301      	movs	r3, #1
 8003c80:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003c82:	490d      	ldr	r1, [pc, #52]	; (8003cb8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003c84:	480d      	ldr	r0, [pc, #52]	; (8003cbc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003c86:	f7ff fad5 	bl	8003234 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<coorsa_rfsm::SetpointUpdate> subsp("Setpoint_update",SetpointUpdateHandler);
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003c8e:	490d      	ldr	r1, [pc, #52]	; (8003cc4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003c90:	480d      	ldr	r0, [pc, #52]	; (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003c92:	f7ff faf3 	bl	800327c <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEC1EPKcPFvRKS2_Ei>
std_msgs::Int16 RosMess;
 8003c96:	480d      	ldr	r0, [pc, #52]	; (8003ccc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003c98:	f7ff f806 	bl	8002ca8 <_ZN8std_msgs5Int16C1Ev>
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	200000d0 	.word	0x200000d0
 8003ca8:	20000a0c 	.word	0x20000a0c
 8003cac:	0800a9ec 	.word	0x0800a9ec
 8003cb0:	20000a14 	.word	0x20000a14
 8003cb4:	0800303d 	.word	0x0800303d
 8003cb8:	0800a9fc 	.word	0x0800a9fc
 8003cbc:	20000a28 	.word	0x20000a28
 8003cc0:	08002fc1 	.word	0x08002fc1
 8003cc4:	0800aa0c 	.word	0x0800aa0c
 8003cc8:	20000a44 	.word	0x20000a44
 8003ccc:	20000a64 	.word	0x20000a64

08003cd0 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f8bd 	bl	8002e60 <_ZN11coorsa_rfsm14SetpointUpdate11deserializeEPh>
    this->cb_(msg);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	320c      	adds	r2, #12
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4798      	blx	r3
  }
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
  }
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff f8e8 	bl	8002ef4 <_ZN11coorsa_rfsm14SetpointUpdate7getTypeEv>
 8003d24:	4603      	mov	r3, r0
  }
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff f8e8 	bl	8002f10 <_ZN11coorsa_rfsm14SetpointUpdate6getMD5Ev>
 8003d40:	4603      	mov	r3, r0
  }
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_ZN3ros10SubscriberIN8std_msgs5Int16EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	330c      	adds	r3, #12
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe ffde 	bl	8002d1c <_ZN8std_msgs5Int1611deserializeEPh>
    this->cb_(msg);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	320c      	adds	r2, #12
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4798      	blx	r3
  }
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
  }
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <_ZN3ros10SubscriberIN8std_msgs5Int16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	330c      	adds	r3, #12
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe ffed 	bl	8002d78 <_ZN8std_msgs5Int167getTypeEv>
 8003d9e:	4603      	mov	r3, r0
  }
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	330c      	adds	r3, #12
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe ffed 	bl	8002d94 <_ZN8std_msgs5Int166getMD5Ev>
 8003dba:	4603      	mov	r3, r0
  }
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
    return configured_;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <_GLOBAL__sub_I_Mess>:
 8003dde:	b580      	push	{r7, lr}
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003de6:	2001      	movs	r0, #1
 8003de8:	f7ff ff30 	bl	8003c4c <_Z41__static_initialization_and_destruction_0ii>
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_MspInit>:
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_MspInit+0x44>)
 8003df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <HAL_MspInit+0x44>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6613      	str	r3, [r2, #96]	; 0x60
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <HAL_MspInit+0x44>)
 8003e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_MspInit+0x44>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <HAL_MspInit+0x44>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_MspInit+0x44>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f003 f85b 	bl	8006ee0 <HAL_PWREx_DisableUCPDDeadBattery>
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000

08003e38 <HAL_ADC_MspInit>:
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08c      	sub	sp, #48	; 0x30
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	f107 031c 	add.w	r3, r7, #28
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	611a      	str	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e58:	d12d      	bne.n	8003eb6 <HAL_ADC_MspInit+0x7e>
 8003e5a:	4b32      	ldr	r3, [pc, #200]	; (8003f24 <HAL_ADC_MspInit+0xec>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	4a30      	ldr	r2, [pc, #192]	; (8003f24 <HAL_ADC_MspInit+0xec>)
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <HAL_ADC_MspInit+0xec>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10b      	bne.n	8003e84 <HAL_ADC_MspInit+0x4c>
 8003e6c:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	4a2d      	ldr	r2, [pc, #180]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003e72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4b28      	ldr	r3, [pc, #160]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e88:	4a27      	ldr	r2, [pc, #156]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	623b      	str	r3, [r7, #32]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	f107 031c 	add.w	r3, r7, #28
 8003eac:	4619      	mov	r1, r3
 8003eae:	481f      	ldr	r0, [pc, #124]	; (8003f2c <HAL_ADC_MspInit+0xf4>)
 8003eb0:	f002 fda6 	bl	8006a00 <HAL_GPIO_Init>
 8003eb4:	e032      	b.n	8003f1c <HAL_ADC_MspInit+0xe4>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <HAL_ADC_MspInit+0xf8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d12d      	bne.n	8003f1c <HAL_ADC_MspInit+0xe4>
 8003ec0:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <HAL_ADC_MspInit+0xec>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <HAL_ADC_MspInit+0xec>)
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b16      	ldr	r3, [pc, #88]	; (8003f24 <HAL_ADC_MspInit+0xec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10b      	bne.n	8003eea <HAL_ADC_MspInit+0xb2>
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed6:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ede:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eee:	4a0e      	ldr	r2, [pc, #56]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <HAL_ADC_MspInit+0xf0>)
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2302      	movs	r3, #2
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	2303      	movs	r3, #3
 8003f08:	623b      	str	r3, [r7, #32]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	f107 031c 	add.w	r3, r7, #28
 8003f12:	4619      	mov	r1, r3
 8003f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f18:	f002 fd72 	bl	8006a00 <HAL_GPIO_Init>
 8003f1c:	bf00      	nop
 8003f1e:	3730      	adds	r7, #48	; 0x30
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000a70 	.word	0x20000a70
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	48000800 	.word	0x48000800
 8003f30:	50000100 	.word	0x50000100

08003f34 <HAL_DAC_MspInit>:
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	f107 0314 	add.w	r3, r7, #20
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	611a      	str	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <HAL_DAC_MspInit+0x74>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d124      	bne.n	8003fa0 <HAL_DAC_MspInit+0x6c>
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <HAL_DAC_MspInit+0x78>)
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	4a14      	ldr	r2, [pc, #80]	; (8003fac <HAL_DAC_MspInit+0x78>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_DAC_MspInit+0x78>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <HAL_DAC_MspInit+0x78>)
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	4a0e      	ldr	r2, [pc, #56]	; (8003fac <HAL_DAC_MspInit+0x78>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <HAL_DAC_MspInit+0x78>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2330      	movs	r3, #48	; 0x30
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	4619      	mov	r1, r3
 8003f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f9c:	f002 fd30 	bl	8006a00 <HAL_GPIO_Init>
 8003fa0:	bf00      	nop
 8003fa2:	3728      	adds	r7, #40	; 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	50000800 	.word	0x50000800
 8003fac:	40021000 	.word	0x40021000

08003fb0 <HAL_TIM_PWM_MspInit>:
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a16      	ldr	r2, [pc, #88]	; (8004018 <HAL_TIM_PWM_MspInit+0x68>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d114      	bne.n	8003fec <HAL_TIM_PWM_MspInit+0x3c>
 8003fc2:	4b16      	ldr	r3, [pc, #88]	; (800401c <HAL_TIM_PWM_MspInit+0x6c>)
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	4a15      	ldr	r2, [pc, #84]	; (800401c <HAL_TIM_PWM_MspInit+0x6c>)
 8003fc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fcc:	6613      	str	r3, [r2, #96]	; 0x60
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_TIM_PWM_MspInit+0x6c>)
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2100      	movs	r1, #0
 8003fde:	2019      	movs	r0, #25
 8003fe0:	f001 ffb7 	bl	8005f52 <HAL_NVIC_SetPriority>
 8003fe4:	2019      	movs	r0, #25
 8003fe6:	f001 ffce 	bl	8005f86 <HAL_NVIC_EnableIRQ>
 8003fea:	e010      	b.n	800400e <HAL_TIM_PWM_MspInit+0x5e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d10b      	bne.n	800400e <HAL_TIM_PWM_MspInit+0x5e>
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_TIM_PWM_MspInit+0x6c>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	4a08      	ldr	r2, [pc, #32]	; (800401c <HAL_TIM_PWM_MspInit+0x6c>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_TIM_PWM_MspInit+0x6c>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_TIM_MspPostInit>:
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	611a      	str	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a31      	ldr	r2, [pc, #196]	; (8004104 <HAL_TIM_MspPostInit+0xe4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d139      	bne.n	80040b6 <HAL_TIM_MspPostInit+0x96>
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <HAL_TIM_MspPostInit+0xe8>)
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	4a30      	ldr	r2, [pc, #192]	; (8004108 <HAL_TIM_MspPostInit+0xe8>)
 8004048:	f043 0304 	orr.w	r3, r3, #4
 800404c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <HAL_TIM_MspPostInit+0xe8>)
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <HAL_TIM_MspPostInit+0xe8>)
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	4a2a      	ldr	r2, [pc, #168]	; (8004108 <HAL_TIM_MspPostInit+0xe8>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004066:	4b28      	ldr	r3, [pc, #160]	; (8004108 <HAL_TIM_MspPostInit+0xe8>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	2302      	movs	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	2302      	movs	r3, #2
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4619      	mov	r1, r3
 800408c:	481f      	ldr	r0, [pc, #124]	; (800410c <HAL_TIM_MspPostInit+0xec>)
 800408e:	f002 fcb7 	bl	8006a00 <HAL_GPIO_Init>
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	2302      	movs	r3, #2
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	2300      	movs	r3, #0
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	2306      	movs	r3, #6
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
 80040a6:	f107 0314 	add.w	r3, r7, #20
 80040aa:	4619      	mov	r1, r3
 80040ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b0:	f002 fca6 	bl	8006a00 <HAL_GPIO_Init>
 80040b4:	e021      	b.n	80040fa <HAL_TIM_MspPostInit+0xda>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d11c      	bne.n	80040fa <HAL_TIM_MspPostInit+0xda>
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <HAL_TIM_MspPostInit+0xe8>)
 80040c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c4:	4a10      	ldr	r2, [pc, #64]	; (8004108 <HAL_TIM_MspPostInit+0xe8>)
 80040c6:	f043 0302 	orr.w	r3, r3, #2
 80040ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040cc:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <HAL_TIM_MspPostInit+0xe8>)
 80040ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	2302      	movs	r3, #2
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	2300      	movs	r3, #0
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	2301      	movs	r3, #1
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	4619      	mov	r1, r3
 80040f4:	4806      	ldr	r0, [pc, #24]	; (8004110 <HAL_TIM_MspPostInit+0xf0>)
 80040f6:	f002 fc83 	bl	8006a00 <HAL_GPIO_Init>
 80040fa:	bf00      	nop
 80040fc:	3728      	adds	r7, #40	; 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40021000 	.word	0x40021000
 800410c:	48000800 	.word	0x48000800
 8004110:	48000400 	.word	0x48000400

08004114 <HAL_UART_MspInit>:
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	f107 0314 	add.w	r3, r7, #20
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a46      	ldr	r2, [pc, #280]	; (800424c <HAL_UART_MspInit+0x138>)
 8004132:	4293      	cmp	r3, r2
 8004134:	f040 8085 	bne.w	8004242 <HAL_UART_MspInit+0x12e>
 8004138:	4b45      	ldr	r3, [pc, #276]	; (8004250 <HAL_UART_MspInit+0x13c>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	4a44      	ldr	r2, [pc, #272]	; (8004250 <HAL_UART_MspInit+0x13c>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004142:	6593      	str	r3, [r2, #88]	; 0x58
 8004144:	4b42      	ldr	r3, [pc, #264]	; (8004250 <HAL_UART_MspInit+0x13c>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <HAL_UART_MspInit+0x13c>)
 8004152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004154:	4a3e      	ldr	r2, [pc, #248]	; (8004250 <HAL_UART_MspInit+0x13c>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800415c:	4b3c      	ldr	r3, [pc, #240]	; (8004250 <HAL_UART_MspInit+0x13c>)
 800415e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	230c      	movs	r3, #12
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	2302      	movs	r3, #2
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	2300      	movs	r3, #0
 8004176:	623b      	str	r3, [r7, #32]
 8004178:	2307      	movs	r3, #7
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	4619      	mov	r1, r3
 8004182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004186:	f002 fc3b 	bl	8006a00 <HAL_GPIO_Init>
 800418a:	4b32      	ldr	r3, [pc, #200]	; (8004254 <HAL_UART_MspInit+0x140>)
 800418c:	4a32      	ldr	r2, [pc, #200]	; (8004258 <HAL_UART_MspInit+0x144>)
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	4b30      	ldr	r3, [pc, #192]	; (8004254 <HAL_UART_MspInit+0x140>)
 8004192:	221a      	movs	r2, #26
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <HAL_UART_MspInit+0x140>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <HAL_UART_MspInit+0x140>)
 800419e:	2200      	movs	r2, #0
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <HAL_UART_MspInit+0x140>)
 80041a4:	2280      	movs	r2, #128	; 0x80
 80041a6:	611a      	str	r2, [r3, #16]
 80041a8:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <HAL_UART_MspInit+0x140>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	615a      	str	r2, [r3, #20]
 80041ae:	4b29      	ldr	r3, [pc, #164]	; (8004254 <HAL_UART_MspInit+0x140>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <HAL_UART_MspInit+0x140>)
 80041b6:	2220      	movs	r2, #32
 80041b8:	61da      	str	r2, [r3, #28]
 80041ba:	4b26      	ldr	r3, [pc, #152]	; (8004254 <HAL_UART_MspInit+0x140>)
 80041bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041c0:	621a      	str	r2, [r3, #32]
 80041c2:	4824      	ldr	r0, [pc, #144]	; (8004254 <HAL_UART_MspInit+0x140>)
 80041c4:	f002 f942 	bl	800644c <HAL_DMA_Init>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_UART_MspInit+0xbe>
 80041ce:	f7fd fdbf 	bl	8001d50 <Error_Handler>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <HAL_UART_MspInit+0x140>)
 80041d6:	679a      	str	r2, [r3, #120]	; 0x78
 80041d8:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_UART_MspInit+0x140>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6293      	str	r3, [r2, #40]	; 0x28
 80041de:	4b1f      	ldr	r3, [pc, #124]	; (800425c <HAL_UART_MspInit+0x148>)
 80041e0:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <HAL_UART_MspInit+0x14c>)
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	4b1d      	ldr	r3, [pc, #116]	; (800425c <HAL_UART_MspInit+0x148>)
 80041e6:	221b      	movs	r2, #27
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	4b1c      	ldr	r3, [pc, #112]	; (800425c <HAL_UART_MspInit+0x148>)
 80041ec:	2210      	movs	r2, #16
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <HAL_UART_MspInit+0x148>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	4b19      	ldr	r3, [pc, #100]	; (800425c <HAL_UART_MspInit+0x148>)
 80041f8:	2280      	movs	r2, #128	; 0x80
 80041fa:	611a      	str	r2, [r3, #16]
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <HAL_UART_MspInit+0x148>)
 80041fe:	2200      	movs	r2, #0
 8004200:	615a      	str	r2, [r3, #20]
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <HAL_UART_MspInit+0x148>)
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <HAL_UART_MspInit+0x148>)
 800420a:	2200      	movs	r2, #0
 800420c:	61da      	str	r2, [r3, #28]
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_UART_MspInit+0x148>)
 8004210:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004214:	621a      	str	r2, [r3, #32]
 8004216:	4811      	ldr	r0, [pc, #68]	; (800425c <HAL_UART_MspInit+0x148>)
 8004218:	f002 f918 	bl	800644c <HAL_DMA_Init>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_UART_MspInit+0x112>
 8004222:	f7fd fd95 	bl	8001d50 <Error_Handler>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <HAL_UART_MspInit+0x148>)
 800422a:	675a      	str	r2, [r3, #116]	; 0x74
 800422c:	4a0b      	ldr	r2, [pc, #44]	; (800425c <HAL_UART_MspInit+0x148>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6293      	str	r3, [r2, #40]	; 0x28
 8004232:	2200      	movs	r2, #0
 8004234:	2100      	movs	r1, #0
 8004236:	2026      	movs	r0, #38	; 0x26
 8004238:	f001 fe8b 	bl	8005f52 <HAL_NVIC_SetPriority>
 800423c:	2026      	movs	r0, #38	; 0x26
 800423e:	f001 fea2 	bl	8005f86 <HAL_NVIC_EnableIRQ>
 8004242:	bf00      	nop
 8004244:	3728      	adds	r7, #40	; 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40004400 	.word	0x40004400
 8004250:	40021000 	.word	0x40021000
 8004254:	20000b14 	.word	0x20000b14
 8004258:	40020008 	.word	0x40020008
 800425c:	20000c60 	.word	0x20000c60
 8004260:	4002001c 	.word	0x4002001c

08004264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004276:	e7fe      	b.n	8004276 <HardFault_Handler+0x4>

08004278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427c:	e7fe      	b.n	800427c <MemManage_Handler+0x4>

0800427e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427e:	b480      	push	{r7}
 8004280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004282:	e7fe      	b.n	8004282 <BusFault_Handler+0x4>

08004284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004288:	e7fe      	b.n	8004288 <UsageFault_Handler+0x4>

0800428a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b8:	f000 fbd0 	bl	8004a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}

080042c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80042c4:	4802      	ldr	r0, [pc, #8]	; (80042d0 <DMA1_Channel1_IRQHandler+0x10>)
 80042c6:	f002 fa4b 	bl	8006760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000b14 	.word	0x20000b14

080042d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80042d8:	4802      	ldr	r0, [pc, #8]	; (80042e4 <DMA1_Channel2_IRQHandler+0x10>)
 80042da:	f002 fa41 	bl	8006760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000c60 	.word	0x20000c60

080042e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */


	down_lim = Mess & (1);
 80042ec:	4bb8      	ldr	r3, [pc, #736]	; (80045d0 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	4ab7      	ldr	r2, [pc, #732]	; (80045d4 <TIM1_UP_TIM16_IRQHandler+0x2ec>)
 80042f6:	6013      	str	r3, [r2, #0]

	mid_lim = Mess & (2);
 80042f8:	4bb5      	ldr	r3, [pc, #724]	; (80045d0 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	4ab5      	ldr	r2, [pc, #724]	; (80045d8 <TIM1_UP_TIM16_IRQHandler+0x2f0>)
 8004302:	6013      	str	r3, [r2, #0]

	up_lim = Mess & (4);
 8004304:	4bb2      	ldr	r3, [pc, #712]	; (80045d0 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	4ab3      	ldr	r2, [pc, #716]	; (80045dc <TIM1_UP_TIM16_IRQHandler+0x2f4>)
 800430e:	6013      	str	r3, [r2, #0]

	read_ADC(&Adc);  //Lettura periferica ADC
 8004310:	48b3      	ldr	r0, [pc, #716]	; (80045e0 <TIM1_UP_TIM16_IRQHandler+0x2f8>)
 8004312:	f7fd f899 	bl	8001448 <read_ADC>
	Adc_Pot = Adc.Adc_1;	//Lettura Potenziometro Attuatore Lineare
 8004316:	4bb2      	ldr	r3, [pc, #712]	; (80045e0 <TIM1_UP_TIM16_IRQHandler+0x2f8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4ab2      	ldr	r2, [pc, #712]	; (80045e4 <TIM1_UP_TIM16_IRQHandler+0x2fc>)
 800431c:	6013      	str	r3, [r2, #0]
	I_sense = Adc.Adc_2;	//Lettura sensote di Corrente Attuatore Lineare
 800431e:	4bb0      	ldr	r3, [pc, #704]	; (80045e0 <TIM1_UP_TIM16_IRQHandler+0x2f8>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4ab1      	ldr	r2, [pc, #708]	; (80045e8 <TIM1_UP_TIM16_IRQHandler+0x300>)
 8004324:	6013      	str	r3, [r2, #0]
	Out_Filter = filter_run(I_sense, &Low_Pass);
 8004326:	4bb0      	ldr	r3, [pc, #704]	; (80045e8 <TIM1_UP_TIM16_IRQHandler+0x300>)
 8004328:	edd3 7a00 	vldr	s15, [r3]
 800432c:	48af      	ldr	r0, [pc, #700]	; (80045ec <TIM1_UP_TIM16_IRQHandler+0x304>)
 800432e:	eeb0 0a67 	vmov.f32	s0, s15
 8004332:	f7fc ffad 	bl	8001290 <filter_run>
 8004336:	eef0 7a40 	vmov.f32	s15, s0
 800433a:	4bad      	ldr	r3, [pc, #692]	; (80045f0 <TIM1_UP_TIM16_IRQHandler+0x308>)
 800433c:	edc3 7a00 	vstr	s15, [r3]


	Control_Panel(down_lim, mid_lim, up_lim, Adc_Pot, &ControlPanel);
 8004340:	4ba4      	ldr	r3, [pc, #656]	; (80045d4 <TIM1_UP_TIM16_IRQHandler+0x2ec>)
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	4ba4      	ldr	r3, [pc, #656]	; (80045d8 <TIM1_UP_TIM16_IRQHandler+0x2f0>)
 8004346:	6819      	ldr	r1, [r3, #0]
 8004348:	4ba4      	ldr	r3, [pc, #656]	; (80045dc <TIM1_UP_TIM16_IRQHandler+0x2f4>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4ba5      	ldr	r3, [pc, #660]	; (80045e4 <TIM1_UP_TIM16_IRQHandler+0x2fc>)
 800434e:	edd3 7a00 	vldr	s15, [r3]
 8004352:	4ba8      	ldr	r3, [pc, #672]	; (80045f4 <TIM1_UP_TIM16_IRQHandler+0x30c>)
 8004354:	eeb0 0a67 	vmov.f32	s0, s15
 8004358:	f7fc fd04 	bl	8000d64 <Control_Panel>

	I_ref = ControlPanel.I_ref;
 800435c:	4ba5      	ldr	r3, [pc, #660]	; (80045f4 <TIM1_UP_TIM16_IRQHandler+0x30c>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4aa5      	ldr	r2, [pc, #660]	; (80045f8 <TIM1_UP_TIM16_IRQHandler+0x310>)
 8004362:	6013      	str	r3, [r2, #0]
	down_lim = ControlPanel.down_lim;
 8004364:	4ba3      	ldr	r3, [pc, #652]	; (80045f4 <TIM1_UP_TIM16_IRQHandler+0x30c>)
 8004366:	edd3 7a00 	vldr	s15, [r3]
 800436a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800436e:	ee17 2a90 	vmov	r2, s15
 8004372:	4b98      	ldr	r3, [pc, #608]	; (80045d4 <TIM1_UP_TIM16_IRQHandler+0x2ec>)
 8004374:	601a      	str	r2, [r3, #0]
	mid_lim = ControlPanel.mid_lim;
 8004376:	4b9f      	ldr	r3, [pc, #636]	; (80045f4 <TIM1_UP_TIM16_IRQHandler+0x30c>)
 8004378:	edd3 7a01 	vldr	s15, [r3, #4]
 800437c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004380:	ee17 2a90 	vmov	r2, s15
 8004384:	4b94      	ldr	r3, [pc, #592]	; (80045d8 <TIM1_UP_TIM16_IRQHandler+0x2f0>)
 8004386:	601a      	str	r2, [r3, #0]
	up_lim = ControlPanel.up_lim;
 8004388:	4b9a      	ldr	r3, [pc, #616]	; (80045f4 <TIM1_UP_TIM16_IRQHandler+0x30c>)
 800438a:	edd3 7a02 	vldr	s15, [r3, #8]
 800438e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004392:	ee17 2a90 	vmov	r2, s15
 8004396:	4b91      	ldr	r3, [pc, #580]	; (80045dc <TIM1_UP_TIM16_IRQHandler+0x2f4>)
 8004398:	601a      	str	r2, [r3, #0]

	I_error = I_ref-Out_Filter;  //Calcolo errore in ingresso al regolatore PI
 800439a:	4b97      	ldr	r3, [pc, #604]	; (80045f8 <TIM1_UP_TIM16_IRQHandler+0x310>)
 800439c:	ed93 7a00 	vldr	s14, [r3]
 80043a0:	4b93      	ldr	r3, [pc, #588]	; (80045f0 <TIM1_UP_TIM16_IRQHandler+0x308>)
 80043a2:	edd3 7a00 	vldr	s15, [r3]
 80043a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043aa:	4b94      	ldr	r3, [pc, #592]	; (80045fc <TIM1_UP_TIM16_IRQHandler+0x314>)
 80043ac:	edc3 7a00 	vstr	s15, [r3]

	if(I_error <= 0.005f && I_error >= -0.005f){  //Dead-Zone
 80043b0:	4b92      	ldr	r3, [pc, #584]	; (80045fc <TIM1_UP_TIM16_IRQHandler+0x314>)
 80043b2:	edd3 7a00 	vldr	s15, [r3]
 80043b6:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8004600 <TIM1_UP_TIM16_IRQHandler+0x318>
 80043ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	d80d      	bhi.n	80043e0 <TIM1_UP_TIM16_IRQHandler+0xf8>
 80043c4:	4b8d      	ldr	r3, [pc, #564]	; (80045fc <TIM1_UP_TIM16_IRQHandler+0x314>)
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8004604 <TIM1_UP_TIM16_IRQHandler+0x31c>
 80043ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	db03      	blt.n	80043e0 <TIM1_UP_TIM16_IRQHandler+0xf8>
		I_error = 0.0f;
 80043d8:	4b88      	ldr	r3, [pc, #544]	; (80045fc <TIM1_UP_TIM16_IRQHandler+0x314>)
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
	}

	V_star = PIDfloat(I_error, &I_PI);	//Calcolo tensione di uscita regolatore PI
 80043e0:	4b86      	ldr	r3, [pc, #536]	; (80045fc <TIM1_UP_TIM16_IRQHandler+0x314>)
 80043e2:	edd3 7a00 	vldr	s15, [r3]
 80043e6:	4888      	ldr	r0, [pc, #544]	; (8004608 <TIM1_UP_TIM16_IRQHandler+0x320>)
 80043e8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ec:	f7fc ff8b 	bl	8001306 <PIDfloat>
 80043f0:	eef0 7a40 	vmov.f32	s15, s0
 80043f4:	4b85      	ldr	r3, [pc, #532]	; (800460c <TIM1_UP_TIM16_IRQHandler+0x324>)
 80043f6:	edc3 7a00 	vstr	s15, [r3]
	DutyCycle = V_star/2 + 0.5f;	//Calcolo Duty Cycle scalato e traslato (V_star: [-1,1] -> [0,1])
 80043fa:	4b84      	ldr	r3, [pc, #528]	; (800460c <TIM1_UP_TIM16_IRQHandler+0x324>)
 80043fc:	ed93 7a00 	vldr	s14, [r3]
 8004400:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004408:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800440c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004410:	4b7f      	ldr	r3, [pc, #508]	; (8004610 <TIM1_UP_TIM16_IRQHandler+0x328>)
 8004412:	edc3 7a00 	vstr	s15, [r3]

	if(DutyCycle >= 0.90f){
 8004416:	4b7e      	ldr	r3, [pc, #504]	; (8004610 <TIM1_UP_TIM16_IRQHandler+0x328>)
 8004418:	edd3 7a00 	vldr	s15, [r3]
 800441c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004614 <TIM1_UP_TIM16_IRQHandler+0x32c>
 8004420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004428:	db02      	blt.n	8004430 <TIM1_UP_TIM16_IRQHandler+0x148>
		DutyCycle = 0.90f;
 800442a:	4b79      	ldr	r3, [pc, #484]	; (8004610 <TIM1_UP_TIM16_IRQHandler+0x328>)
 800442c:	4a7a      	ldr	r2, [pc, #488]	; (8004618 <TIM1_UP_TIM16_IRQHandler+0x330>)
 800442e:	601a      	str	r2, [r3, #0]
	}

	if(DutyCycle <= 0.1f){
 8004430:	4b77      	ldr	r3, [pc, #476]	; (8004610 <TIM1_UP_TIM16_IRQHandler+0x328>)
 8004432:	edd3 7a00 	vldr	s15, [r3]
 8004436:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800461c <TIM1_UP_TIM16_IRQHandler+0x334>
 800443a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004442:	d802      	bhi.n	800444a <TIM1_UP_TIM16_IRQHandler+0x162>
		DutyCycle = 0.1f;
 8004444:	4b72      	ldr	r3, [pc, #456]	; (8004610 <TIM1_UP_TIM16_IRQHandler+0x328>)
 8004446:	4a76      	ldr	r2, [pc, #472]	; (8004620 <TIM1_UP_TIM16_IRQHandler+0x338>)
 8004448:	601a      	str	r2, [r3, #0]
	}

	TIM1->CCR1 = DutyCycle*8499; //Impostazione Duty Cycle PWM Attuatore Lineare (DutyCycle*CounterPeriod)
 800444a:	4b71      	ldr	r3, [pc, #452]	; (8004610 <TIM1_UP_TIM16_IRQHandler+0x328>)
 800444c:	edd3 7a00 	vldr	s15, [r3]
 8004450:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8004624 <TIM1_UP_TIM16_IRQHandler+0x33c>
 8004454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004458:	4b73      	ldr	r3, [pc, #460]	; (8004628 <TIM1_UP_TIM16_IRQHandler+0x340>)
 800445a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445e:	ee17 2a90 	vmov	r2, s15
 8004462:	635a      	str	r2, [r3, #52]	; 0x34
	////////////////////////////////////////

	// 0° = k = 25
	// 90° = k = 75
	// 180° = k = 125
	Servo_Angle_1 = Mess & (64);
 8004464:	4b5a      	ldr	r3, [pc, #360]	; (80045d0 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	4a6f      	ldr	r2, [pc, #444]	; (800462c <TIM1_UP_TIM16_IRQHandler+0x344>)
 800446e:	6013      	str	r3, [r2, #0]
	Servo_Angle_2 = Mess & (128);
 8004470:	4b57      	ldr	r3, [pc, #348]	; (80045d0 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	4a6d      	ldr	r2, [pc, #436]	; (8004630 <TIM1_UP_TIM16_IRQHandler+0x348>)
 800447a:	6013      	str	r3, [r2, #0]

	if(Servo_Angle_1 == 64 && k>=75){	//POSIZIONE A: 90°
 800447c:	4b6b      	ldr	r3, [pc, #428]	; (800462c <TIM1_UP_TIM16_IRQHandler+0x344>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d12e      	bne.n	80044e2 <TIM1_UP_TIM16_IRQHandler+0x1fa>
 8004484:	4b6b      	ldr	r3, [pc, #428]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 8004486:	edd3 7a00 	vldr	s15, [r3]
 800448a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004638 <TIM1_UP_TIM16_IRQHandler+0x350>
 800448e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	db24      	blt.n	80044e2 <TIM1_UP_TIM16_IRQHandler+0x1fa>
		k -= 0.005f;
 8004498:	4b66      	ldr	r3, [pc, #408]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 800449a:	edd3 7a00 	vldr	s15, [r3]
 800449e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004600 <TIM1_UP_TIM16_IRQHandler+0x318>
 80044a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044a6:	4b63      	ldr	r3, [pc, #396]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 80044a8:	edc3 7a00 	vstr	s15, [r3]
		j += 0.005f;
 80044ac:	4b63      	ldr	r3, [pc, #396]	; (800463c <TIM1_UP_TIM16_IRQHandler+0x354>)
 80044ae:	edd3 7a00 	vldr	s15, [r3]
 80044b2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004600 <TIM1_UP_TIM16_IRQHandler+0x318>
 80044b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044ba:	4b60      	ldr	r3, [pc, #384]	; (800463c <TIM1_UP_TIM16_IRQHandler+0x354>)
 80044bc:	edc3 7a00 	vstr	s15, [r3]
		if(k <= 75 && WaitingForResult){
 80044c0:	4b5c      	ldr	r3, [pc, #368]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 80044c2:	edd3 7a00 	vldr	s15, [r3]
 80044c6:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8004638 <TIM1_UP_TIM16_IRQHandler+0x350>
 80044ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	d806      	bhi.n	80044e2 <TIM1_UP_TIM16_IRQHandler+0x1fa>
 80044d4:	4b5a      	ldr	r3, [pc, #360]	; (8004640 <TIM1_UP_TIM16_IRQHandler+0x358>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <TIM1_UP_TIM16_IRQHandler+0x1fa>
		down_flag = 1;
 80044dc:	4b59      	ldr	r3, [pc, #356]	; (8004644 <TIM1_UP_TIM16_IRQHandler+0x35c>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
		}
	}

	if(Servo_Angle_2 == 128 && k<=120){	//POSIZIONE B: 180°
 80044e2:	4b53      	ldr	r3, [pc, #332]	; (8004630 <TIM1_UP_TIM16_IRQHandler+0x348>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d12e      	bne.n	8004548 <TIM1_UP_TIM16_IRQHandler+0x260>
 80044ea:	4b52      	ldr	r3, [pc, #328]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 80044ec:	edd3 7a00 	vldr	s15, [r3]
 80044f0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004648 <TIM1_UP_TIM16_IRQHandler+0x360>
 80044f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fc:	d824      	bhi.n	8004548 <TIM1_UP_TIM16_IRQHandler+0x260>
		k += 0.005f;
 80044fe:	4b4d      	ldr	r3, [pc, #308]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 8004500:	edd3 7a00 	vldr	s15, [r3]
 8004504:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004600 <TIM1_UP_TIM16_IRQHandler+0x318>
 8004508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800450c:	4b49      	ldr	r3, [pc, #292]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 800450e:	edc3 7a00 	vstr	s15, [r3]
		j -= 0.005f;
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <TIM1_UP_TIM16_IRQHandler+0x354>)
 8004514:	edd3 7a00 	vldr	s15, [r3]
 8004518:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004600 <TIM1_UP_TIM16_IRQHandler+0x318>
 800451c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004520:	4b46      	ldr	r3, [pc, #280]	; (800463c <TIM1_UP_TIM16_IRQHandler+0x354>)
 8004522:	edc3 7a00 	vstr	s15, [r3]
		if(k >= 95 && WaitingForResult){
 8004526:	4b43      	ldr	r3, [pc, #268]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 8004528:	edd3 7a00 	vldr	s15, [r3]
 800452c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800464c <TIM1_UP_TIM16_IRQHandler+0x364>
 8004530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004538:	db06      	blt.n	8004548 <TIM1_UP_TIM16_IRQHandler+0x260>
 800453a:	4b41      	ldr	r3, [pc, #260]	; (8004640 <TIM1_UP_TIM16_IRQHandler+0x358>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <TIM1_UP_TIM16_IRQHandler+0x260>
		up_flag = 1;
 8004542:	4b43      	ldr	r3, [pc, #268]	; (8004650 <TIM1_UP_TIM16_IRQHandler+0x368>)
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]
		}
	}

	TIM2->CCR2 = j;		//Impostazione Duty Cycle PWM Servomotori
 8004548:	4b3c      	ldr	r3, [pc, #240]	; (800463c <TIM1_UP_TIM16_IRQHandler+0x354>)
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004556:	ee17 2a90 	vmov	r2, s15
 800455a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = k;
 800455c:	4b35      	ldr	r3, [pc, #212]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 800455e:	edd3 7a00 	vldr	s15, [r3]
 8004562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800456a:	ee17 2a90 	vmov	r2, s15
 800456e:	63da      	str	r2, [r3, #60]	; 0x3c

	if(down_flag == 1 && WaitingForResult){
 8004570:	4b34      	ldr	r3, [pc, #208]	; (8004644 <TIM1_UP_TIM16_IRQHandler+0x35c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10d      	bne.n	8004594 <TIM1_UP_TIM16_IRQHandler+0x2ac>
 8004578:	4b31      	ldr	r3, [pc, #196]	; (8004640 <TIM1_UP_TIM16_IRQHandler+0x358>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <TIM1_UP_TIM16_IRQHandler+0x2ac>
		WaitingForResult = 0;
 8004580:	4b2f      	ldr	r3, [pc, #188]	; (8004640 <TIM1_UP_TIM16_IRQHandler+0x358>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
		down_flag = 0;
 8004586:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <TIM1_UP_TIM16_IRQHandler+0x35c>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
		sendMess(256);
 800458c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004590:	f7fe fcfc 	bl	8002f8c <sendMess>
	}

	if(up_flag == 1 && WaitingForResult){
 8004594:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <TIM1_UP_TIM16_IRQHandler+0x368>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10d      	bne.n	80045b8 <TIM1_UP_TIM16_IRQHandler+0x2d0>
 800459c:	4b28      	ldr	r3, [pc, #160]	; (8004640 <TIM1_UP_TIM16_IRQHandler+0x358>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d009      	beq.n	80045b8 <TIM1_UP_TIM16_IRQHandler+0x2d0>
		WaitingForResult = 0;
 80045a4:	4b26      	ldr	r3, [pc, #152]	; (8004640 <TIM1_UP_TIM16_IRQHandler+0x358>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
		up_flag = 0;
 80045aa:	4b29      	ldr	r3, [pc, #164]	; (8004650 <TIM1_UP_TIM16_IRQHandler+0x368>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
		sendMess(512);
 80045b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80045b4:	f7fe fcea 	bl	8002f8c <sendMess>

	  ///////////////
	 ///   DAC   ///
	///////////////

	DAC_Value_1 = ((4095/2)+(1.0f * I_ref * (4095/2))); //Viene normalizzato il valore che voglio passare al DAC. Risoluzione -> 4096 Posizionamento a metà per vedere valori positivi e negatvi-> 2048
 80045b8:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <TIM1_UP_TIM16_IRQHandler+0x310>)
 80045ba:	edd3 7a00 	vldr	s15, [r3]
 80045be:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004654 <TIM1_UP_TIM16_IRQHandler+0x36c>
 80045c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045c6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004654 <TIM1_UP_TIM16_IRQHandler+0x36c>
 80045ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045ce:	e043      	b.n	8004658 <TIM1_UP_TIM16_IRQHandler+0x370>
 80045d0:	200000a8 	.word	0x200000a8
 80045d4:	20000a98 	.word	0x20000a98
 80045d8:	20000a9c 	.word	0x20000a9c
 80045dc:	20000aa0 	.word	0x20000aa0
 80045e0:	20000e10 	.word	0x20000e10
 80045e4:	20000a78 	.word	0x20000a78
 80045e8:	20000a7c 	.word	0x20000a7c
 80045ec:	20000e18 	.word	0x20000e18
 80045f0:	20000a80 	.word	0x20000a80
 80045f4:	200000b0 	.word	0x200000b0
 80045f8:	20000a84 	.word	0x20000a84
 80045fc:	20000a8c 	.word	0x20000a8c
 8004600:	3ba3d70a 	.word	0x3ba3d70a
 8004604:	bba3d70a 	.word	0xbba3d70a
 8004608:	20000de4 	.word	0x20000de4
 800460c:	20000a88 	.word	0x20000a88
 8004610:	20000a74 	.word	0x20000a74
 8004614:	3f666666 	.word	0x3f666666
 8004618:	3f666666 	.word	0x3f666666
 800461c:	3dcccccd 	.word	0x3dcccccd
 8004620:	3dcccccd 	.word	0x3dcccccd
 8004624:	4604cc00 	.word	0x4604cc00
 8004628:	40012c00 	.word	0x40012c00
 800462c:	20000aac 	.word	0x20000aac
 8004630:	20000ab0 	.word	0x20000ab0
 8004634:	20000aa4 	.word	0x20000aa4
 8004638:	42960000 	.word	0x42960000
 800463c:	20000aa8 	.word	0x20000aa8
 8004640:	200000ac 	.word	0x200000ac
 8004644:	20000ab8 	.word	0x20000ab8
 8004648:	42f00000 	.word	0x42f00000
 800464c:	42be0000 	.word	0x42be0000
 8004650:	20000ab4 	.word	0x20000ab4
 8004654:	44ffe000 	.word	0x44ffe000
 8004658:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <TIM1_UP_TIM16_IRQHandler+0x3cc>)
 800465a:	edc3 7a00 	vstr	s15, [r3]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Value_1);
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <TIM1_UP_TIM16_IRQHandler+0x3cc>)
 8004660:	edd3 7a00 	vldr	s15, [r3]
 8004664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004668:	ee17 3a90 	vmov	r3, s15
 800466c:	2200      	movs	r2, #0
 800466e:	2100      	movs	r1, #0
 8004670:	4811      	ldr	r0, [pc, #68]	; (80046b8 <TIM1_UP_TIM16_IRQHandler+0x3d0>)
 8004672:	f001 fd17 	bl	80060a4 <HAL_DAC_SetValue>

	DAC_Value_2 =((4095/2)+(1.0f * Out_Filter * (4095/2)));
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <TIM1_UP_TIM16_IRQHandler+0x3d4>)
 8004678:	edd3 7a00 	vldr	s15, [r3]
 800467c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80046c0 <TIM1_UP_TIM16_IRQHandler+0x3d8>
 8004680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004684:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80046c0 <TIM1_UP_TIM16_IRQHandler+0x3d8>
 8004688:	ee77 7a87 	vadd.f32	s15, s15, s14
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <TIM1_UP_TIM16_IRQHandler+0x3dc>)
 800468e:	edc3 7a00 	vstr	s15, [r3]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, DAC_Value_2);
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <TIM1_UP_TIM16_IRQHandler+0x3dc>)
 8004694:	edd3 7a00 	vldr	s15, [r3]
 8004698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469c:	ee17 3a90 	vmov	r3, s15
 80046a0:	2200      	movs	r2, #0
 80046a2:	2110      	movs	r1, #16
 80046a4:	4804      	ldr	r0, [pc, #16]	; (80046b8 <TIM1_UP_TIM16_IRQHandler+0x3d0>)
 80046a6:	f001 fcfd 	bl	80060a4 <HAL_DAC_SetValue>



  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046aa:	4807      	ldr	r0, [pc, #28]	; (80046c8 <TIM1_UP_TIM16_IRQHandler+0x3e0>)
 80046ac:	f003 fd0e 	bl	80080cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000a90 	.word	0x20000a90
 80046b8:	20000b74 	.word	0x20000b74
 80046bc:	20000a80 	.word	0x20000a80
 80046c0:	44ffe000 	.word	0x44ffe000
 80046c4:	20000a94 	.word	0x20000a94
 80046c8:	20000cc0 	.word	0x20000cc0

080046cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046d0:	4802      	ldr	r0, [pc, #8]	; (80046dc <USART2_IRQHandler+0x10>)
 80046d2:	f004 ff03 	bl	80094dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000d58 	.word	0x20000d58

080046e0 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80046e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80046e8:	f002 fb3e 	bl	8006d68 <HAL_GPIO_EXTI_IRQHandler>
}
 80046ec:	bf00      	nop
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <InitSystem>:


void InitSystem(void){
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, EN_A_Pin|EN_B_Pin, GPIO_PIN_SET);
 80046f4:	2201      	movs	r2, #1
 80046f6:	2111      	movs	r1, #17
 80046f8:	483e      	ldr	r0, [pc, #248]	; (80047f4 <InitSystem+0x104>)
 80046fa:	f002 fb03 	bl	8006d04 <HAL_GPIO_WritePin>
	DutyCycle = 0.5f;
 80046fe:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <InitSystem+0x108>)
 8004700:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004704:	601a      	str	r2, [r3, #0]
	k = 75;
 8004706:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <InitSystem+0x10c>)
 8004708:	4a3d      	ldr	r2, [pc, #244]	; (8004800 <InitSystem+0x110>)
 800470a:	601a      	str	r2, [r3, #0]
	j = 75;
 800470c:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <InitSystem+0x114>)
 800470e:	4a3c      	ldr	r2, [pc, #240]	; (8004800 <InitSystem+0x110>)
 8004710:	601a      	str	r2, [r3, #0]
	TIM2->CCR2 = k;
 8004712:	4b3a      	ldr	r3, [pc, #232]	; (80047fc <InitSystem+0x10c>)
 8004714:	edd3 7a00 	vldr	s15, [r3]
 8004718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800471c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004720:	ee17 2a90 	vmov	r2, s15
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = j;
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <InitSystem+0x114>)
 8004728:	edd3 7a00 	vldr	s15, [r3]
 800472c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004734:	ee17 2a90 	vmov	r2, s15
 8004738:	63da      	str	r2, [r3, #60]	; 0x3c
	AdcStruct_init(&Adc);  //Init struct ADC
 800473a:	4833      	ldr	r0, [pc, #204]	; (8004808 <InitSystem+0x118>)
 800473c:	f7fc ff34 	bl	80015a8 <AdcStruct_init>
	init_filter(0.0001f, 0.5f, &Low_Pass);	//Init struct Low_Pass_Filter
 8004740:	4832      	ldr	r0, [pc, #200]	; (800480c <InitSystem+0x11c>)
 8004742:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8004746:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8004810 <InitSystem+0x120>
 800474a:	f7fc fcdd 	bl	8001108 <init_filter>
	Control_Panel_Struct_init(&ControlPanel);
 800474e:	4831      	ldr	r0, [pc, #196]	; (8004814 <InitSystem+0x124>)
 8004750:	f7fc fc72 	bl	8001038 <Control_Panel_Struct_init>
	InitPI_BC(&I_PI);
 8004754:	4830      	ldr	r0, [pc, #192]	; (8004818 <InitSystem+0x128>)
 8004756:	f7fc fe4c 	bl	80013f2 <InitPI_BC>

	I_PI.Kp = 25;	//Impostazione parametri PI anello di corrente
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <InitSystem+0x128>)
 800475c:	4a2f      	ldr	r2, [pc, #188]	; (800481c <InitSystem+0x12c>)
 800475e:	609a      	str	r2, [r3, #8]
	I_PI.Ki = 70;
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <InitSystem+0x128>)
 8004762:	4a2f      	ldr	r2, [pc, #188]	; (8004820 <InitSystem+0x130>)
 8004764:	60da      	str	r2, [r3, #12]
	I_PI.Ts = 0.0001f;
 8004766:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <InitSystem+0x128>)
 8004768:	4a2e      	ldr	r2, [pc, #184]	; (8004824 <InitSystem+0x134>)
 800476a:	629a      	str	r2, [r3, #40]	; 0x28
	I_PI.IntegralMemory = 0;
 800476c:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <InitSystem+0x128>)
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	615a      	str	r2, [r3, #20]
	I_PI.OutSatH = 1;
 8004774:	4b28      	ldr	r3, [pc, #160]	; (8004818 <InitSystem+0x128>)
 8004776:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800477a:	619a      	str	r2, [r3, #24]
	I_PI.OutSatL = -I_PI.OutSatH;
 800477c:	4b26      	ldr	r3, [pc, #152]	; (8004818 <InitSystem+0x128>)
 800477e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004782:	eef1 7a67 	vneg.f32	s15, s15
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <InitSystem+0x128>)
 8004788:	edc3 7a07 	vstr	s15, [r3, #28]
	I_PI.IntSatH = 1;
 800478c:	4b22      	ldr	r3, [pc, #136]	; (8004818 <InitSystem+0x128>)
 800478e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004792:	621a      	str	r2, [r3, #32]
	I_PI.IntSatL = -I_PI.IntSatH;
 8004794:	4b20      	ldr	r3, [pc, #128]	; (8004818 <InitSystem+0x128>)
 8004796:	edd3 7a08 	vldr	s15, [r3, #32]
 800479a:	eef1 7a67 	vneg.f32	s15, s15
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <InitSystem+0x128>)
 80047a0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	Pos_PI.Kp = 30;	//Impostazione parametri PI anello di posizione
 80047a4:	4b20      	ldr	r3, [pc, #128]	; (8004828 <InitSystem+0x138>)
 80047a6:	4a21      	ldr	r2, [pc, #132]	; (800482c <InitSystem+0x13c>)
 80047a8:	609a      	str	r2, [r3, #8]
	Pos_PI.Ki = 0;
 80047aa:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <InitSystem+0x138>)
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	60da      	str	r2, [r3, #12]
	Pos_PI.Ts = 0.0001f;
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <InitSystem+0x138>)
 80047b4:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <InitSystem+0x134>)
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
	Pos_PI.IntegralMemory = 0;
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <InitSystem+0x138>)
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	615a      	str	r2, [r3, #20]
	Pos_PI.OutSatH = 1;
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <InitSystem+0x138>)
 80047c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047c6:	619a      	str	r2, [r3, #24]
	Pos_PI.OutSatL = -I_PI.OutSatH;
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <InitSystem+0x128>)
 80047ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80047ce:	eef1 7a67 	vneg.f32	s15, s15
 80047d2:	4b15      	ldr	r3, [pc, #84]	; (8004828 <InitSystem+0x138>)
 80047d4:	edc3 7a07 	vstr	s15, [r3, #28]
	Pos_PI.IntSatH = 1;
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <InitSystem+0x138>)
 80047da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047de:	621a      	str	r2, [r3, #32]
	Pos_PI.IntSatL = -I_PI.IntSatH;
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <InitSystem+0x128>)
 80047e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80047e6:	eef1 7a67 	vneg.f32	s15, s15
 80047ea:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <InitSystem+0x138>)
 80047ec:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

}
 80047f0:	bf00      	nop
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	48000400 	.word	0x48000400
 80047f8:	20000a74 	.word	0x20000a74
 80047fc:	20000aa4 	.word	0x20000aa4
 8004800:	42960000 	.word	0x42960000
 8004804:	20000aa8 	.word	0x20000aa8
 8004808:	20000e10 	.word	0x20000e10
 800480c:	20000e18 	.word	0x20000e18
 8004810:	38d1b717 	.word	0x38d1b717
 8004814:	200000b0 	.word	0x200000b0
 8004818:	20000de4 	.word	0x20000de4
 800481c:	41c80000 	.word	0x41c80000
 8004820:	428c0000 	.word	0x428c0000
 8004824:	38d1b717 	.word	0x38d1b717
 8004828:	20000acc 	.word	0x20000acc
 800482c:	41f00000 	.word	0x41f00000

08004830 <_getpid>:
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
 8004834:	2301      	movs	r3, #1
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_kill>:
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	f005 fe8f 	bl	800a56c <__errno>
 800484e:	4602      	mov	r2, r0
 8004850:	2316      	movs	r3, #22
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <_exit>:
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ffe7 	bl	8004840 <_kill>
 8004872:	e7fe      	b.n	8004872 <_exit+0x12>

08004874 <_sbrk>:
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <_sbrk+0x5c>)
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <_sbrk+0x60>)
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <_sbrk+0x64>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <_sbrk+0x22>
 8004890:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <_sbrk+0x64>)
 8004892:	4a12      	ldr	r2, [pc, #72]	; (80048dc <_sbrk+0x68>)
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <_sbrk+0x64>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d207      	bcs.n	80048b4 <_sbrk+0x40>
 80048a4:	f005 fe62 	bl	800a56c <__errno>
 80048a8:	4602      	mov	r2, r0
 80048aa:	230c      	movs	r3, #12
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b2:	e009      	b.n	80048c8 <_sbrk+0x54>
 80048b4:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <_sbrk+0x64>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <_sbrk+0x64>)
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4413      	add	r3, r2
 80048c2:	4a05      	ldr	r2, [pc, #20]	; (80048d8 <_sbrk+0x64>)
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20008000 	.word	0x20008000
 80048d4:	00000400 	.word	0x00000400
 80048d8:	20000abc 	.word	0x20000abc
 80048dc:	20000e48 	.word	0x20000e48

080048e0 <SystemInit>:
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <SystemInit+0x28>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <SystemInit+0x28>)
 80048ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <SystemInit+0x28>)
 80048f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <_ZN3ros16normalizeSecNSecERmS0_>:
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	0a5a      	lsrs	r2, r3, #9
 800491c:	490f      	ldr	r1, [pc, #60]	; (800495c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800491e:	fba1 1202 	umull	r1, r2, r1, r2
 8004922:	09d2      	lsrs	r2, r2, #7
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004926:	fb01 f202 	mul.w	r2, r1, r2
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	0a5b      	lsrs	r3, r3, #9
 8004934:	4a09      	ldr	r2, [pc, #36]	; (800495c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	09db      	lsrs	r3, r3, #7
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	00044b83 	.word	0x00044b83
 8004960:	3b9aca00 	.word	0x3b9aca00

08004964 <Reset_Handler>:
 8004964:	480d      	ldr	r0, [pc, #52]	; (800499c <LoopForever+0x2>)
 8004966:	4685      	mov	sp, r0
 8004968:	480d      	ldr	r0, [pc, #52]	; (80049a0 <LoopForever+0x6>)
 800496a:	490e      	ldr	r1, [pc, #56]	; (80049a4 <LoopForever+0xa>)
 800496c:	4a0e      	ldr	r2, [pc, #56]	; (80049a8 <LoopForever+0xe>)
 800496e:	2300      	movs	r3, #0
 8004970:	e002      	b.n	8004978 <LoopCopyDataInit>

08004972 <CopyDataInit>:
 8004972:	58d4      	ldr	r4, [r2, r3]
 8004974:	50c4      	str	r4, [r0, r3]
 8004976:	3304      	adds	r3, #4

08004978 <LoopCopyDataInit>:
 8004978:	18c4      	adds	r4, r0, r3
 800497a:	428c      	cmp	r4, r1
 800497c:	d3f9      	bcc.n	8004972 <CopyDataInit>
 800497e:	4a0b      	ldr	r2, [pc, #44]	; (80049ac <LoopForever+0x12>)
 8004980:	4c0b      	ldr	r4, [pc, #44]	; (80049b0 <LoopForever+0x16>)
 8004982:	2300      	movs	r3, #0
 8004984:	e001      	b.n	800498a <LoopFillZerobss>

08004986 <FillZerobss>:
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	3204      	adds	r2, #4

0800498a <LoopFillZerobss>:
 800498a:	42a2      	cmp	r2, r4
 800498c:	d3fb      	bcc.n	8004986 <FillZerobss>
 800498e:	f7ff ffa7 	bl	80048e0 <SystemInit>
 8004992:	f005 fdf1 	bl	800a578 <__libc_init_array>
 8004996:	f7fc fe19 	bl	80015cc <main>

0800499a <LoopForever>:
 800499a:	e7fe      	b.n	800499a <LoopForever>
 800499c:	20008000 	.word	0x20008000
 80049a0:	20000000 	.word	0x20000000
 80049a4:	20000074 	.word	0x20000074
 80049a8:	0800aba4 	.word	0x0800aba4
 80049ac:	20000074 	.word	0x20000074
 80049b0:	20000e44 	.word	0x20000e44

080049b4 <ADC1_2_IRQHandler>:
 80049b4:	e7fe      	b.n	80049b4 <ADC1_2_IRQHandler>

080049b6 <HAL_Init>:
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	2300      	movs	r3, #0
 80049be:	71fb      	strb	r3, [r7, #7]
 80049c0:	2003      	movs	r0, #3
 80049c2:	f001 fabb 	bl	8005f3c <HAL_NVIC_SetPriorityGrouping>
 80049c6:	2000      	movs	r0, #0
 80049c8:	f000 f80e 	bl	80049e8 <HAL_InitTick>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_Init+0x22>
 80049d2:	2301      	movs	r3, #1
 80049d4:	71fb      	strb	r3, [r7, #7]
 80049d6:	e001      	b.n	80049dc <HAL_Init+0x26>
 80049d8:	f7ff fa0a 	bl	8003df0 <HAL_MspInit>
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_InitTick>:
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <HAL_InitTick+0x68>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d022      	beq.n	8004a42 <HAL_InitTick+0x5a>
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_InitTick+0x6c>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <HAL_InitTick+0x68>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 fac6 	bl	8005fa2 <HAL_SYSTICK_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10f      	bne.n	8004a3c <HAL_InitTick+0x54>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	d809      	bhi.n	8004a36 <HAL_InitTick+0x4e>
 8004a22:	2200      	movs	r2, #0
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a2a:	f001 fa92 	bl	8005f52 <HAL_NVIC_SetPriority>
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <HAL_InitTick+0x70>)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e007      	b.n	8004a46 <HAL_InitTick+0x5e>
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
 8004a3a:	e004      	b.n	8004a46 <HAL_InitTick+0x5e>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	e001      	b.n	8004a46 <HAL_InitTick+0x5e>
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000008 	.word	0x20000008
 8004a54:	20000000 	.word	0x20000000
 8004a58:	20000004 	.word	0x20000004

08004a5c <HAL_IncTick>:
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_IncTick+0x1c>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_IncTick+0x20>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4413      	add	r3, r2
 8004a6a:	4a03      	ldr	r2, [pc, #12]	; (8004a78 <HAL_IncTick+0x1c>)
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	20000e3c 	.word	0x20000e3c
 8004a7c:	20000008 	.word	0x20000008

08004a80 <HAL_GetTick>:
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_GetTick+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000e3c 	.word	0x20000e3c

08004a98 <HAL_Delay>:
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	f7ff ffee 	bl	8004a80 <HAL_GetTick>
 8004aa4:	60b8      	str	r0, [r7, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab0:	d004      	beq.n	8004abc <HAL_Delay+0x24>
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <HAL_Delay+0x40>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	bf00      	nop
 8004abe:	f7ff ffdf 	bl	8004a80 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d8f7      	bhi.n	8004abe <HAL_Delay+0x26>
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000008 	.word	0x20000008

08004adc <LL_ADC_SetCommonClock>:
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_ADC_SetCommonPathInternalCh>:
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_ADC_GetCommonPathInternalCh>:
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_ADC_SetOffset>:
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3360      	adds	r3, #96	; 0x60
 8004b56:	461a      	mov	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <LL_ADC_SetOffset+0x44>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	03fff000 	.word	0x03fff000

08004b8c <LL_ADC_GetOffsetChannel>:
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3360      	adds	r3, #96	; 0x60
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_ADC_SetOffsetState>:
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3360      	adds	r3, #96	; 0x60
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <LL_ADC_SetOffsetSign>:
 8004bee:	b480      	push	{r7}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3360      	adds	r3, #96	; 0x60
 8004bfe:	461a      	mov	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	bf00      	nop
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_ADC_SetOffsetSaturation>:
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3360      	adds	r3, #96	; 0x60
 8004c34:	461a      	mov	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <LL_ADC_SetSamplingTimeCommonConfig>:
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	615a      	str	r2, [r3, #20]
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <LL_ADC_REG_SetSequencerRanks>:
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3330      	adds	r3, #48	; 0x30
 8004c90:	461a      	mov	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	0a1b      	lsrs	r3, r3, #8
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	4413      	add	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	211f      	movs	r1, #31
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	0e9b      	lsrs	r3, r3, #26
 8004cb8:	f003 011f 	and.w	r1, r3, #31
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <LL_ADC_SetChannelSamplingTime>:
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3314      	adds	r3, #20
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	0e5b      	lsrs	r3, r3, #25
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	4413      	add	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	0d1b      	lsrs	r3, r3, #20
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2107      	movs	r1, #7
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	401a      	ands	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	0d1b      	lsrs	r3, r3, #20
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <LL_ADC_SetChannelSingleDiff>:
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f003 0318 	and.w	r3, r3, #24
 8004d52:	4908      	ldr	r1, [pc, #32]	; (8004d74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004d54:	40d9      	lsrs	r1, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	400b      	ands	r3, r1
 8004d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	0007ffff 	.word	0x0007ffff

08004d78 <LL_ADC_GetMultimode>:
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <LL_ADC_DisableDeepPowerDown>:
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004da4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6093      	str	r3, [r2, #8]
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <LL_ADC_IsDeepPowerDownEnabled>:
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dcc:	d101      	bne.n	8004dd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_ADC_EnableInternalRegulator>:
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004df4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <LL_ADC_IsInternalRegulatorEnabled>:
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e1c:	d101      	bne.n	8004e22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e22:	2300      	movs	r3, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_ADC_Enable>:
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e44:	f043 0201 	orr.w	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_ADC_IsEnabled>:
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <LL_ADC_IsEnabled+0x18>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <LL_ADC_IsEnabled+0x1a>
 8004e70:	2300      	movs	r3, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <LL_ADC_REG_StartConversion>:
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e92:	f043 0204 	orr.w	r2, r3, #4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_ADC_REG_IsConversionOngoing>:
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d101      	bne.n	8004ebe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_ADC_INJ_IsConversionOngoing>:
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d101      	bne.n	8004ee4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <HAL_ADC_Init>:
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b089      	sub	sp, #36	; 0x24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	2300      	movs	r3, #0
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	2300      	movs	r3, #0
 8004f02:	60bb      	str	r3, [r7, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_ADC_Init+0x1a>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e16b      	b.n	80051e6 <HAL_ADC_Init+0x2f2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d109      	bne.n	8004f30 <HAL_ADC_Init+0x3c>
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fe ff8b 	bl	8003e38 <HAL_ADC_MspInit>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff3f 	bl	8004db8 <LL_ADC_IsDeepPowerDownEnabled>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <HAL_ADC_Init+0x56>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff25 	bl	8004d94 <LL_ADC_DisableDeepPowerDown>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff ff5a 	bl	8004e08 <LL_ADC_IsInternalRegulatorEnabled>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d113      	bne.n	8004f82 <HAL_ADC_Init+0x8e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff ff3e 	bl	8004de0 <LL_ADC_EnableInternalRegulator>
 8004f64:	4ba2      	ldr	r3, [pc, #648]	; (80051f0 <HAL_ADC_Init+0x2fc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	099b      	lsrs	r3, r3, #6
 8004f6a:	4aa2      	ldr	r2, [pc, #648]	; (80051f4 <HAL_ADC_Init+0x300>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	099b      	lsrs	r3, r3, #6
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	e002      	b.n	8004f7c <HAL_ADC_Init+0x88>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f9      	bne.n	8004f76 <HAL_ADC_Init+0x82>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff ff3e 	bl	8004e08 <LL_ADC_IsInternalRegulatorEnabled>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10d      	bne.n	8004fae <HAL_ADC_Init+0xba>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f96:	f043 0210 	orr.w	r2, r3, #16
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa2:	f043 0201 	orr.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	661a      	str	r2, [r3, #96]	; 0x60
 8004faa:	2301      	movs	r3, #1
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ff77 	bl	8004ea6 <LL_ADC_REG_IsConversionOngoing>
 8004fb8:	6178      	str	r0, [r7, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 8106 	bne.w	80051d4 <HAL_ADC_Init+0x2e0>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f040 8102 	bne.w	80051d4 <HAL_ADC_Init+0x2e0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004fd8:	f043 0202 	orr.w	r2, r3, #2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff ff37 	bl	8004e58 <LL_ADC_IsEnabled>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d111      	bne.n	8005014 <HAL_ADC_Init+0x120>
 8004ff0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004ff4:	f7ff ff30 	bl	8004e58 <LL_ADC_IsEnabled>
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	487f      	ldr	r0, [pc, #508]	; (80051f8 <HAL_ADC_Init+0x304>)
 8004ffc:	f7ff ff2c 	bl	8004e58 <LL_ADC_IsEnabled>
 8005000:	4603      	mov	r3, r0
 8005002:	4323      	orrs	r3, r4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d105      	bne.n	8005014 <HAL_ADC_Init+0x120>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4619      	mov	r1, r3
 800500e:	487b      	ldr	r0, [pc, #492]	; (80051fc <HAL_ADC_Init+0x308>)
 8005010:	f7ff fd64 	bl	8004adc <LL_ADC_SetCommonClock>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7f5b      	ldrb	r3, [r3, #29]
 8005018:	035a      	lsls	r2, r3, #13
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800503e:	2b01      	cmp	r3, #1
 8005040:	d106      	bne.n	8005050 <HAL_ADC_Init+0x15c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005046:	3b01      	subs	r3, #1
 8005048:	045b      	lsls	r3, r3, #17
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <HAL_ADC_Init+0x178>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	4313      	orrs	r3, r2
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	4b63      	ldr	r3, [pc, #396]	; (8005200 <HAL_ADC_Init+0x30c>)
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	69b9      	ldr	r1, [r7, #24]
 800507c:	430b      	orrs	r3, r1
 800507e:	60d3      	str	r3, [r2, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	611a      	str	r2, [r3, #16]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ff03 	bl	8004ea6 <LL_ADC_REG_IsConversionOngoing>
 80050a0:	6138      	str	r0, [r7, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff ff10 	bl	8004ecc <LL_ADC_INJ_IsConversionOngoing>
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d16d      	bne.n	8005190 <HAL_ADC_Init+0x29c>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d16a      	bne.n	8005190 <HAL_ADC_Init+0x29c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	7f1b      	ldrb	r3, [r3, #28]
 80050be:	039a      	lsls	r2, r3, #14
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d6:	f023 0302 	bic.w	r3, r3, #2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	69b9      	ldr	r1, [r7, #24]
 80050e0:	430b      	orrs	r3, r1
 80050e2:	60d3      	str	r3, [r2, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d017      	beq.n	800511c <HAL_ADC_Init+0x228>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050fa:	611a      	str	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005104:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6911      	ldr	r1, [r2, #16]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	430b      	orrs	r3, r1
 8005116:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800511a:	e013      	b.n	8005144 <HAL_ADC_Init+0x250>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800512a:	611a      	str	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800513c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005140:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800514a:	2b01      	cmp	r3, #1
 800514c:	d118      	bne.n	8005180 <HAL_ADC_Init+0x28c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005164:	4311      	orrs	r1, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800516a:	4311      	orrs	r1, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005170:	430a      	orrs	r2, r1
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	611a      	str	r2, [r3, #16]
 800517e:	e007      	b.n	8005190 <HAL_ADC_Init+0x29c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	611a      	str	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d10c      	bne.n	80051b2 <HAL_ADC_Init+0x2be>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f023 010f 	bic.w	r1, r3, #15
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	1e5a      	subs	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
 80051b0:	e007      	b.n	80051c2 <HAL_ADC_Init+0x2ce>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 020f 	bic.w	r2, r2, #15
 80051c0:	631a      	str	r2, [r3, #48]	; 0x30
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	f043 0201 	orr.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80051d2:	e007      	b.n	80051e4 <HAL_ADC_Init+0x2f0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	f043 0210 	orr.w	r2, r3, #16
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c
 80051e0:	2301      	movs	r3, #1
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	7ffb      	ldrb	r3, [r7, #31]
 80051e6:	4618      	mov	r0, r3
 80051e8:	3724      	adds	r7, #36	; 0x24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd90      	pop	{r4, r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000000 	.word	0x20000000
 80051f4:	053e2d63 	.word	0x053e2d63
 80051f8:	50000100 	.word	0x50000100
 80051fc:	50000300 	.word	0x50000300
 8005200:	fff04007 	.word	0xfff04007

08005204 <HAL_ADC_Start>:
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	4859      	ldr	r0, [pc, #356]	; (8005374 <HAL_ADC_Start+0x170>)
 800520e:	f7ff fdb3 	bl	8004d78 <LL_ADC_GetMultimode>
 8005212:	6138      	str	r0, [r7, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fe44 	bl	8004ea6 <LL_ADC_REG_IsConversionOngoing>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 809f 	bne.w	8005364 <HAL_ADC_Start+0x160>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_ADC_Start+0x30>
 8005230:	2302      	movs	r3, #2
 8005232:	e09a      	b.n	800536a <HAL_ADC_Start+0x166>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fc8d 	bl	8005b5c <ADC_Enable>
 8005242:	4603      	mov	r3, r0
 8005244:	75fb      	strb	r3, [r7, #23]
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f040 8086 	bne.w	800535a <HAL_ADC_Start+0x156>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	65da      	str	r2, [r3, #92]	; 0x5c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a44      	ldr	r2, [pc, #272]	; (8005378 <HAL_ADC_Start+0x174>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d002      	beq.n	8005272 <HAL_ADC_Start+0x6e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	e001      	b.n	8005276 <HAL_ADC_Start+0x72>
 8005272:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	4293      	cmp	r3, r2
 800527c:	d002      	beq.n	8005284 <HAL_ADC_Start+0x80>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <HAL_ADC_Start+0x8c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005288:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d106      	bne.n	80052ac <HAL_ADC_Start+0xa8>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a2:	f023 0206 	bic.w	r2, r3, #6
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	661a      	str	r2, [r3, #96]	; 0x60
 80052aa:	e002      	b.n	80052b2 <HAL_ADC_Start+0xae>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	661a      	str	r2, [r3, #96]	; 0x60
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	221c      	movs	r2, #28
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <HAL_ADC_Start+0x174>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d002      	beq.n	80052d2 <HAL_ADC_Start+0xce>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	e001      	b.n	80052d6 <HAL_ADC_Start+0xd2>
 80052d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	4293      	cmp	r3, r2
 80052dc:	d008      	beq.n	80052f0 <HAL_ADC_Start+0xec>
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_ADC_Start+0xec>
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d002      	beq.n	80052f0 <HAL_ADC_Start+0xec>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b09      	cmp	r3, #9
 80052ee:	d114      	bne.n	800531a <HAL_ADC_Start+0x116>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <HAL_ADC_Start+0x10a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005302:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005306:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	65da      	str	r2, [r3, #92]	; 0x5c
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fdb3 	bl	8004e7e <LL_ADC_REG_StartConversion>
 8005318:	e026      	b.n	8005368 <HAL_ADC_Start+0x164>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	65da      	str	r2, [r3, #92]	; 0x5c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a13      	ldr	r2, [pc, #76]	; (8005378 <HAL_ADC_Start+0x174>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d002      	beq.n	8005336 <HAL_ADC_Start+0x132>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	e001      	b.n	800533a <HAL_ADC_Start+0x136>
 8005336:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00f      	beq.n	8005368 <HAL_ADC_Start+0x164>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005350:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	65da      	str	r2, [r3, #92]	; 0x5c
 8005358:	e006      	b.n	8005368 <HAL_ADC_Start+0x164>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005362:	e001      	b.n	8005368 <HAL_ADC_Start+0x164>
 8005364:	2302      	movs	r3, #2
 8005366:	75fb      	strb	r3, [r7, #23]
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	50000300 	.word	0x50000300
 8005378:	50000100 	.word	0x50000100

0800537c <HAL_ADC_ConfigChannel>:
 800537c:	b580      	push	{r7, lr}
 800537e:	b0b6      	sub	sp, #216	; 0xd8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_ADC_ConfigChannel+0x22>
 800539a:	2302      	movs	r3, #2
 800539c:	e3c7      	b.n	8005b2e <HAL_ADC_ConfigChannel+0x7b2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fd7b 	bl	8004ea6 <LL_ADC_REG_IsConversionOngoing>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f040 83ac 	bne.w	8005b10 <HAL_ADC_ConfigChannel+0x794>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	f7ff fc5b 	bl	8004c80 <LL_ADC_REG_SetSequencerRanks>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fd69 	bl	8004ea6 <LL_ADC_REG_IsConversionOngoing>
 80053d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff fd75 	bl	8004ecc <LL_ADC_INJ_IsConversionOngoing>
 80053e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 80053e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f040 81d9 	bne.w	80057a2 <HAL_ADC_ConfigChannel+0x426>
 80053f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 81d4 	bne.w	80057a2 <HAL_ADC_ConfigChannel+0x426>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005402:	d10f      	bne.n	8005424 <HAL_ADC_ConfigChannel+0xa8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2200      	movs	r2, #0
 800540e:	4619      	mov	r1, r3
 8005410:	f7ff fc62 	bl	8004cd8 <LL_ADC_SetChannelSamplingTime>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fc1c 	bl	8004c5a <LL_ADC_SetSamplingTimeCommonConfig>
 8005422:	e00e      	b.n	8005442 <HAL_ADC_ConfigChannel+0xc6>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6819      	ldr	r1, [r3, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	461a      	mov	r2, r3
 8005432:	f7ff fc51 	bl	8004cd8 <LL_ADC_SetChannelSamplingTime>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2100      	movs	r1, #0
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fc0c 	bl	8004c5a <LL_ADC_SetSamplingTimeCommonConfig>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	08db      	lsrs	r3, r3, #3
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b04      	cmp	r3, #4
 8005462:	d022      	beq.n	80054aa <HAL_ADC_ConfigChannel+0x12e>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6919      	ldr	r1, [r3, #16]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005474:	f7ff fb66 	bl	8004b44 <LL_ADC_SetOffset>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	6919      	ldr	r1, [r3, #16]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	461a      	mov	r2, r3
 8005486:	f7ff fbb2 	bl	8004bee <LL_ADC_SetOffsetSign>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6919      	ldr	r1, [r3, #16]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	7f1b      	ldrb	r3, [r3, #28]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <HAL_ADC_ConfigChannel+0x124>
 800549a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800549e:	e000      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x126>
 80054a0:	2300      	movs	r3, #0
 80054a2:	461a      	mov	r2, r3
 80054a4:	f7ff fbbe 	bl	8004c24 <LL_ADC_SetOffsetSaturation>
 80054a8:	e17b      	b.n	80057a2 <HAL_ADC_ConfigChannel+0x426>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fb6b 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <HAL_ADC_ConfigChannel+0x15a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2100      	movs	r1, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fb60 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 80054cc:	4603      	mov	r3, r0
 80054ce:	0e9b      	lsrs	r3, r3, #26
 80054d0:	f003 021f 	and.w	r2, r3, #31
 80054d4:	e01e      	b.n	8005514 <HAL_ADC_ConfigChannel+0x198>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fb55 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054ec:	fa93 f3a3 	rbit	r3, r3
 80054f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x18c>
 8005504:	2320      	movs	r3, #32
 8005506:	e004      	b.n	8005512 <HAL_ADC_ConfigChannel+0x196>
 8005508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800550c:	fab3 f383 	clz	r3, r3
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800551c:	2b00      	cmp	r3, #0
 800551e:	d105      	bne.n	800552c <HAL_ADC_ConfigChannel+0x1b0>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	0e9b      	lsrs	r3, r3, #26
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	e018      	b.n	800555e <HAL_ADC_ConfigChannel+0x1e2>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005534:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005538:	fa93 f3a3 	rbit	r3, r3
 800553c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x1d8>
 8005550:	2320      	movs	r3, #32
 8005552:	e004      	b.n	800555e <HAL_ADC_ConfigChannel+0x1e2>
 8005554:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005558:	fab3 f383 	clz	r3, r3
 800555c:	b2db      	uxtb	r3, r3
 800555e:	429a      	cmp	r2, r3
 8005560:	d106      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x1f4>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fb24 	bl	8004bb8 <LL_ADC_SetOffsetState>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2101      	movs	r1, #1
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fb08 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 800557c:	4603      	mov	r3, r0
 800557e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_ADC_ConfigChannel+0x220>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2101      	movs	r1, #1
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff fafd 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 8005592:	4603      	mov	r3, r0
 8005594:	0e9b      	lsrs	r3, r3, #26
 8005596:	f003 021f 	and.w	r2, r3, #31
 800559a:	e01e      	b.n	80055da <HAL_ADC_ConfigChannel+0x25e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2101      	movs	r1, #1
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff faf2 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80055ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055b2:	fa93 f3a3 	rbit	r3, r3
 80055b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x252>
 80055ca:	2320      	movs	r3, #32
 80055cc:	e004      	b.n	80055d8 <HAL_ADC_ConfigChannel+0x25c>
 80055ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055d2:	fab3 f383 	clz	r3, r3
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <HAL_ADC_ConfigChannel+0x276>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	0e9b      	lsrs	r3, r3, #26
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	e018      	b.n	8005624 <HAL_ADC_ConfigChannel+0x2a8>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055fe:	fa93 f3a3 	rbit	r3, r3
 8005602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005606:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800560a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800560e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_ADC_ConfigChannel+0x29e>
 8005616:	2320      	movs	r3, #32
 8005618:	e004      	b.n	8005624 <HAL_ADC_ConfigChannel+0x2a8>
 800561a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800561e:	fab3 f383 	clz	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	429a      	cmp	r2, r3
 8005626:	d106      	bne.n	8005636 <HAL_ADC_ConfigChannel+0x2ba>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2200      	movs	r2, #0
 800562e:	2101      	movs	r1, #1
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fac1 	bl	8004bb8 <LL_ADC_SetOffsetState>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2102      	movs	r1, #2
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff faa5 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 8005642:	4603      	mov	r3, r0
 8005644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <HAL_ADC_ConfigChannel+0x2e6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2102      	movs	r1, #2
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fa9a 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 8005658:	4603      	mov	r3, r0
 800565a:	0e9b      	lsrs	r3, r3, #26
 800565c:	f003 021f 	and.w	r2, r3, #31
 8005660:	e01e      	b.n	80056a0 <HAL_ADC_ConfigChannel+0x324>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2102      	movs	r1, #2
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fa8f 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 800566e:	4603      	mov	r3, r0
 8005670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005678:	fa93 f3a3 	rbit	r3, r3
 800567c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_ADC_ConfigChannel+0x318>
 8005690:	2320      	movs	r3, #32
 8005692:	e004      	b.n	800569e <HAL_ADC_ConfigChannel+0x322>
 8005694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005698:	fab3 f383 	clz	r3, r3
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x33c>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	0e9b      	lsrs	r3, r3, #26
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	e016      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x36a>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056c4:	fa93 f3a3 	rbit	r3, r3
 80056c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x360>
 80056d8:	2320      	movs	r3, #32
 80056da:	e004      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x36a>
 80056dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056e0:	fab3 f383 	clz	r3, r3
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d106      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x37c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	2102      	movs	r1, #2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fa60 	bl	8004bb8 <LL_ADC_SetOffsetState>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2103      	movs	r1, #3
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fa44 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 8005704:	4603      	mov	r3, r0
 8005706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <HAL_ADC_ConfigChannel+0x3a8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2103      	movs	r1, #3
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fa39 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 800571a:	4603      	mov	r3, r0
 800571c:	0e9b      	lsrs	r3, r3, #26
 800571e:	f003 021f 	and.w	r2, r3, #31
 8005722:	e017      	b.n	8005754 <HAL_ADC_ConfigChannel+0x3d8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2103      	movs	r1, #3
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fa2e 	bl	8004b8c <LL_ADC_GetOffsetChannel>
 8005730:	4603      	mov	r3, r0
 8005732:	677b      	str	r3, [r7, #116]	; 0x74
 8005734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005736:	fa93 f3a3 	rbit	r3, r3
 800573a:	673b      	str	r3, [r7, #112]	; 0x70
 800573c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800573e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_ADC_ConfigChannel+0x3ce>
 8005746:	2320      	movs	r3, #32
 8005748:	e003      	b.n	8005752 <HAL_ADC_ConfigChannel+0x3d6>
 800574a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800574c:	fab3 f383 	clz	r3, r3
 8005750:	b2db      	uxtb	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <HAL_ADC_ConfigChannel+0x3f0>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	0e9b      	lsrs	r3, r3, #26
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	e011      	b.n	8005790 <HAL_ADC_ConfigChannel+0x414>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	66bb      	str	r3, [r7, #104]	; 0x68
 8005772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005774:	fa93 f3a3 	rbit	r3, r3
 8005778:	667b      	str	r3, [r7, #100]	; 0x64
 800577a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800577c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800577e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_ADC_ConfigChannel+0x40c>
 8005784:	2320      	movs	r3, #32
 8005786:	e003      	b.n	8005790 <HAL_ADC_ConfigChannel+0x414>
 8005788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578a:	fab3 f383 	clz	r3, r3
 800578e:	b2db      	uxtb	r3, r3
 8005790:	429a      	cmp	r2, r3
 8005792:	d106      	bne.n	80057a2 <HAL_ADC_ConfigChannel+0x426>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2200      	movs	r2, #0
 800579a:	2103      	movs	r1, #3
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fa0b 	bl	8004bb8 <LL_ADC_SetOffsetState>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fb56 	bl	8004e58 <LL_ADC_IsEnabled>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 8140 	bne.w	8005a34 <HAL_ADC_ConfigChannel+0x6b8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	6819      	ldr	r1, [r3, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	461a      	mov	r2, r3
 80057c2:	f7ff fab5 	bl	8004d30 <LL_ADC_SetChannelSingleDiff>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4a8f      	ldr	r2, [pc, #572]	; (8005a08 <HAL_ADC_ConfigChannel+0x68c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	f040 8131 	bne.w	8005a34 <HAL_ADC_ConfigChannel+0x6b8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10b      	bne.n	80057fa <HAL_ADC_ConfigChannel+0x47e>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	0e9b      	lsrs	r3, r3, #26
 80057e8:	3301      	adds	r3, #1
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	2b09      	cmp	r3, #9
 80057f0:	bf94      	ite	ls
 80057f2:	2301      	movls	r3, #1
 80057f4:	2300      	movhi	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	e019      	b.n	800582e <HAL_ADC_ConfigChannel+0x4b2>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005802:	fa93 f3a3 	rbit	r3, r3
 8005806:	65bb      	str	r3, [r7, #88]	; 0x58
 8005808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800580a:	663b      	str	r3, [r7, #96]	; 0x60
 800580c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x49a>
 8005812:	2320      	movs	r3, #32
 8005814:	e003      	b.n	800581e <HAL_ADC_ConfigChannel+0x4a2>
 8005816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005818:	fab3 f383 	clz	r3, r3
 800581c:	b2db      	uxtb	r3, r3
 800581e:	3301      	adds	r3, #1
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2b09      	cmp	r3, #9
 8005826:	bf94      	ite	ls
 8005828:	2301      	movls	r3, #1
 800582a:	2300      	movhi	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d079      	beq.n	8005926 <HAL_ADC_ConfigChannel+0x5aa>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583a:	2b00      	cmp	r3, #0
 800583c:	d107      	bne.n	800584e <HAL_ADC_ConfigChannel+0x4d2>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	0e9b      	lsrs	r3, r3, #26
 8005844:	3301      	adds	r3, #1
 8005846:	069b      	lsls	r3, r3, #26
 8005848:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800584c:	e015      	b.n	800587a <HAL_ADC_ConfigChannel+0x4fe>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	653b      	str	r3, [r7, #80]	; 0x50
 8005854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	657b      	str	r3, [r7, #84]	; 0x54
 8005860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_ADC_ConfigChannel+0x4ee>
 8005866:	2320      	movs	r3, #32
 8005868:	e003      	b.n	8005872 <HAL_ADC_ConfigChannel+0x4f6>
 800586a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800586c:	fab3 f383 	clz	r3, r3
 8005870:	b2db      	uxtb	r3, r3
 8005872:	3301      	adds	r3, #1
 8005874:	069b      	lsls	r3, r3, #26
 8005876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HAL_ADC_ConfigChannel+0x51e>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	0e9b      	lsrs	r3, r3, #26
 800588c:	3301      	adds	r3, #1
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	2101      	movs	r1, #1
 8005894:	fa01 f303 	lsl.w	r3, r1, r3
 8005898:	e017      	b.n	80058ca <HAL_ADC_ConfigChannel+0x54e>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	647b      	str	r3, [r7, #68]	; 0x44
 80058a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a2:	fa93 f3a3 	rbit	r3, r3
 80058a6:	643b      	str	r3, [r7, #64]	; 0x40
 80058a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_ADC_ConfigChannel+0x53a>
 80058b2:	2320      	movs	r3, #32
 80058b4:	e003      	b.n	80058be <HAL_ADC_ConfigChannel+0x542>
 80058b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b8:	fab3 f383 	clz	r3, r3
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	3301      	adds	r3, #1
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	ea42 0103 	orr.w	r1, r2, r3
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x574>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	0e9b      	lsrs	r3, r3, #26
 80058e0:	3301      	adds	r3, #1
 80058e2:	f003 021f 	and.w	r2, r3, #31
 80058e6:	4613      	mov	r3, r2
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	4413      	add	r3, r2
 80058ec:	051b      	lsls	r3, r3, #20
 80058ee:	e018      	b.n	8005922 <HAL_ADC_ConfigChannel+0x5a6>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	fa93 f3a3 	rbit	r3, r3
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_ADC_ConfigChannel+0x590>
 8005908:	2320      	movs	r3, #32
 800590a:	e003      	b.n	8005914 <HAL_ADC_ConfigChannel+0x598>
 800590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590e:	fab3 f383 	clz	r3, r3
 8005912:	b2db      	uxtb	r3, r3
 8005914:	3301      	adds	r3, #1
 8005916:	f003 021f 	and.w	r2, r3, #31
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	051b      	lsls	r3, r3, #20
 8005922:	430b      	orrs	r3, r1
 8005924:	e081      	b.n	8005a2a <HAL_ADC_ConfigChannel+0x6ae>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592e:	2b00      	cmp	r3, #0
 8005930:	d107      	bne.n	8005942 <HAL_ADC_ConfigChannel+0x5c6>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	0e9b      	lsrs	r3, r3, #26
 8005938:	3301      	adds	r3, #1
 800593a:	069b      	lsls	r3, r3, #26
 800593c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005940:	e015      	b.n	800596e <HAL_ADC_ConfigChannel+0x5f2>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_ADC_ConfigChannel+0x5e2>
 800595a:	2320      	movs	r3, #32
 800595c:	e003      	b.n	8005966 <HAL_ADC_ConfigChannel+0x5ea>
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	3301      	adds	r3, #1
 8005968:	069b      	lsls	r3, r3, #26
 800596a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005976:	2b00      	cmp	r3, #0
 8005978:	d109      	bne.n	800598e <HAL_ADC_ConfigChannel+0x612>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	0e9b      	lsrs	r3, r3, #26
 8005980:	3301      	adds	r3, #1
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2101      	movs	r1, #1
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	e017      	b.n	80059be <HAL_ADC_ConfigChannel+0x642>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	fa93 f3a3 	rbit	r3, r3
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_ADC_ConfigChannel+0x62e>
 80059a6:	2320      	movs	r3, #32
 80059a8:	e003      	b.n	80059b2 <HAL_ADC_ConfigChannel+0x636>
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	fab3 f383 	clz	r3, r3
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	3301      	adds	r3, #1
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2101      	movs	r1, #1
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	ea42 0103 	orr.w	r1, r2, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10d      	bne.n	80059ea <HAL_ADC_ConfigChannel+0x66e>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	0e9b      	lsrs	r3, r3, #26
 80059d4:	3301      	adds	r3, #1
 80059d6:	f003 021f 	and.w	r2, r3, #31
 80059da:	4613      	mov	r3, r2
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	4413      	add	r3, r2
 80059e0:	3b1e      	subs	r3, #30
 80059e2:	051b      	lsls	r3, r3, #20
 80059e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059e8:	e01e      	b.n	8005a28 <HAL_ADC_ConfigChannel+0x6ac>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	fa93 f3a3 	rbit	r3, r3
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <HAL_ADC_ConfigChannel+0x690>
 8005a02:	2320      	movs	r3, #32
 8005a04:	e006      	b.n	8005a14 <HAL_ADC_ConfigChannel+0x698>
 8005a06:	bf00      	nop
 8005a08:	407f0000 	.word	0x407f0000
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	fab3 f383 	clz	r3, r3
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	3301      	adds	r3, #1
 8005a16:	f003 021f 	and.w	r2, r3, #31
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	4413      	add	r3, r2
 8005a20:	3b1e      	subs	r3, #30
 8005a22:	051b      	lsls	r3, r3, #20
 8005a24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	6892      	ldr	r2, [r2, #8]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	f7ff f952 	bl	8004cd8 <LL_ADC_SetChannelSamplingTime>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <HAL_ADC_ConfigChannel+0x7bc>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d070      	beq.n	8005b22 <HAL_ADC_ConfigChannel+0x7a6>
 8005a40:	483e      	ldr	r0, [pc, #248]	; (8005b3c <HAL_ADC_ConfigChannel+0x7c0>)
 8005a42:	f7ff f871 	bl	8004b28 <LL_ADC_GetCommonPathInternalCh>
 8005a46:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a3c      	ldr	r2, [pc, #240]	; (8005b40 <HAL_ADC_ConfigChannel+0x7c4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_ADC_ConfigChannel+0x6e2>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a3a      	ldr	r2, [pc, #232]	; (8005b44 <HAL_ADC_ConfigChannel+0x7c8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d126      	bne.n	8005aac <HAL_ADC_ConfigChannel+0x730>
 8005a5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d120      	bne.n	8005aac <HAL_ADC_ConfigChannel+0x730>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a72:	d156      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x7a6>
 8005a74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	482f      	ldr	r0, [pc, #188]	; (8005b3c <HAL_ADC_ConfigChannel+0x7c0>)
 8005a80:	f7ff f83f 	bl	8004b02 <LL_ADC_SetCommonPathInternalCh>
 8005a84:	4b30      	ldr	r3, [pc, #192]	; (8005b48 <HAL_ADC_ConfigChannel+0x7cc>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	099b      	lsrs	r3, r3, #6
 8005a8a:	4a30      	ldr	r2, [pc, #192]	; (8005b4c <HAL_ADC_ConfigChannel+0x7d0>)
 8005a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a90:	099a      	lsrs	r2, r3, #6
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e002      	b.n	8005aa4 <HAL_ADC_ConfigChannel+0x728>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f9      	bne.n	8005a9e <HAL_ADC_ConfigChannel+0x722>
 8005aaa:	e03a      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x7a6>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a27      	ldr	r2, [pc, #156]	; (8005b50 <HAL_ADC_ConfigChannel+0x7d4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d113      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x762>
 8005ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x762>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a23      	ldr	r2, [pc, #140]	; (8005b54 <HAL_ADC_ConfigChannel+0x7d8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d02a      	beq.n	8005b22 <HAL_ADC_ConfigChannel+0x7a6>
 8005acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4819      	ldr	r0, [pc, #100]	; (8005b3c <HAL_ADC_ConfigChannel+0x7c0>)
 8005ad8:	f7ff f813 	bl	8004b02 <LL_ADC_SetCommonPathInternalCh>
 8005adc:	e021      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x7a6>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <HAL_ADC_ConfigChannel+0x7dc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d11c      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x7a6>
 8005ae8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d116      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x7a6>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a16      	ldr	r2, [pc, #88]	; (8005b54 <HAL_ADC_ConfigChannel+0x7d8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d011      	beq.n	8005b22 <HAL_ADC_ConfigChannel+0x7a6>
 8005afe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b06:	4619      	mov	r1, r3
 8005b08:	480c      	ldr	r0, [pc, #48]	; (8005b3c <HAL_ADC_ConfigChannel+0x7c0>)
 8005b0a:	f7fe fffa 	bl	8004b02 <LL_ADC_SetCommonPathInternalCh>
 8005b0e:	e008      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x7a6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b14:	f043 0220 	orr.w	r2, r3, #32
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005b2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8005b2e:	4618      	mov	r0, r3
 8005b30:	37d8      	adds	r7, #216	; 0xd8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	80080000 	.word	0x80080000
 8005b3c:	50000300 	.word	0x50000300
 8005b40:	c3210000 	.word	0xc3210000
 8005b44:	90c00010 	.word	0x90c00010
 8005b48:	20000000 	.word	0x20000000
 8005b4c:	053e2d63 	.word	0x053e2d63
 8005b50:	c7520000 	.word	0xc7520000
 8005b54:	50000100 	.word	0x50000100
 8005b58:	cb840000 	.word	0xcb840000

08005b5c <ADC_Enable>:
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff f975 	bl	8004e58 <LL_ADC_IsEnabled>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d146      	bne.n	8005c02 <ADC_Enable+0xa6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <ADC_Enable+0xb0>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <ADC_Enable+0x42>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b86:	f043 0210 	orr.w	r2, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b92:	f043 0201 	orr.w	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	661a      	str	r2, [r3, #96]	; 0x60
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e032      	b.n	8005c04 <ADC_Enable+0xa8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff f944 	bl	8004e30 <LL_ADC_Enable>
 8005ba8:	f7fe ff6a 	bl	8004a80 <HAL_GetTick>
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	e021      	b.n	8005bf4 <ADC_Enable+0x98>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff f94f 	bl	8004e58 <LL_ADC_IsEnabled>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <ADC_Enable+0x6e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff f933 	bl	8004e30 <LL_ADC_Enable>
 8005bca:	f7fe ff59 	bl	8004a80 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d90d      	bls.n	8005bf4 <ADC_Enable+0x98>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	f043 0210 	orr.w	r2, r3, #16
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e007      	b.n	8005c04 <ADC_Enable+0xa8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d1d6      	bne.n	8005bb0 <ADC_Enable+0x54>
 8005c02:	2300      	movs	r3, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	8000003f 	.word	0x8000003f

08005c10 <LL_ADC_IsEnabled>:
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <LL_ADC_IsEnabled+0x18>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <LL_ADC_IsEnabled+0x1a>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <LL_ADC_REG_IsConversionOngoing>:
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d101      	bne.n	8005c4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_ADCEx_MultiModeConfigChannel>:
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b0a1      	sub	sp, #132	; 0x84
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e087      	b.n	8005d8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c8a:	d102      	bne.n	8005c92 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005c8c:	4b41      	ldr	r3, [pc, #260]	; (8005d94 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	e001      	b.n	8005c96 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca0:	f043 0220 	orr.w	r2, r3, #32
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e06a      	b.n	8005d8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff ffbd 	bl	8005c36 <LL_ADC_REG_IsConversionOngoing>
 8005cbc:	67b8      	str	r0, [r7, #120]	; 0x78
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff ffb7 	bl	8005c36 <LL_ADC_REG_IsConversionOngoing>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d14c      	bne.n	8005d68 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
 8005cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d149      	bne.n	8005d68 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
 8005cd4:	4b30      	ldr	r3, [pc, #192]	; (8005d98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005cd6:	677b      	str	r3, [r7, #116]	; 0x74
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d028      	beq.n	8005d32 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 8005ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6859      	ldr	r1, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cf2:	035b      	lsls	r3, r3, #13
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005d00:	f7ff ff86 	bl	8005c10 <LL_ADC_IsEnabled>
 8005d04:	4604      	mov	r4, r0
 8005d06:	4823      	ldr	r0, [pc, #140]	; (8005d94 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005d08:	f7ff ff82 	bl	8005c10 <LL_ADC_IsEnabled>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4323      	orrs	r3, r4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d133      	bne.n	8005d7c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8005d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005d1c:	f023 030f 	bic.w	r3, r3, #15
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	6811      	ldr	r1, [r2, #0]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	6892      	ldr	r2, [r2, #8]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d2e:	609a      	str	r2, [r3, #8]
 8005d30:	e024      	b.n	8005d7c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8005d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d3c:	609a      	str	r2, [r3, #8]
 8005d3e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005d42:	f7ff ff65 	bl	8005c10 <LL_ADC_IsEnabled>
 8005d46:	4604      	mov	r4, r0
 8005d48:	4812      	ldr	r0, [pc, #72]	; (8005d94 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005d4a:	f7ff ff61 	bl	8005c10 <LL_ADC_IsEnabled>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4323      	orrs	r3, r4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d112      	bne.n	8005d7c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8005d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005d5e:	f023 030f 	bic.w	r3, r3, #15
 8005d62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005d64:	6093      	str	r3, [r2, #8]
 8005d66:	e009      	b.n	8005d7c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6c:	f043 0220 	orr.w	r2, r3, #32
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005d7a:	e000      	b.n	8005d7e <HAL_ADCEx_MultiModeConfigChannel+0x122>
 8005d7c:	bf00      	nop
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005d86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3784      	adds	r7, #132	; 0x84
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd90      	pop	{r4, r7, pc}
 8005d92:	bf00      	nop
 8005d94:	50000100 	.word	0x50000100
 8005d98:	50000300 	.word	0x50000300

08005d9c <__NVIC_SetPriorityGrouping>:
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005db8:	4013      	ands	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	021a      	lsls	r2, r3, #8
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	4a04      	ldr	r2, [pc, #16]	; (8005de0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	60d3      	str	r3, [r2, #12]
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <__NVIC_GetPriorityGrouping>:
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <__NVIC_GetPriorityGrouping+0x18>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	e000ed00 	.word	0xe000ed00

08005e00 <__NVIC_EnableIRQ>:
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	71fb      	strb	r3, [r7, #7]
 8005e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	db0b      	blt.n	8005e2a <__NVIC_EnableIRQ+0x2a>
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	f003 021f 	and.w	r2, r3, #31
 8005e18:	4907      	ldr	r1, [pc, #28]	; (8005e38 <__NVIC_EnableIRQ+0x38>)
 8005e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	2001      	movs	r0, #1
 8005e22:	fa00 f202 	lsl.w	r2, r0, r2
 8005e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	e000e100 	.word	0xe000e100

08005e3c <__NVIC_SetPriority>:
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	6039      	str	r1, [r7, #0]
 8005e46:	71fb      	strb	r3, [r7, #7]
 8005e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	db0a      	blt.n	8005e66 <__NVIC_SetPriority+0x2a>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	490c      	ldr	r1, [pc, #48]	; (8005e88 <__NVIC_SetPriority+0x4c>)
 8005e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5a:	0112      	lsls	r2, r2, #4
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	440b      	add	r3, r1
 8005e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005e64:	e00a      	b.n	8005e7c <__NVIC_SetPriority+0x40>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	4908      	ldr	r1, [pc, #32]	; (8005e8c <__NVIC_SetPriority+0x50>)
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	3b04      	subs	r3, #4
 8005e74:	0112      	lsls	r2, r2, #4
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	440b      	add	r3, r1
 8005e7a:	761a      	strb	r2, [r3, #24]
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000e100 	.word	0xe000e100
 8005e8c:	e000ed00 	.word	0xe000ed00

08005e90 <NVIC_EncodePriority>:
 8005e90:	b480      	push	{r7}
 8005e92:	b089      	sub	sp, #36	; 0x24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f1c3 0307 	rsb	r3, r3, #7
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	bf28      	it	cs
 8005eae:	2304      	movcs	r3, #4
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	2b06      	cmp	r3, #6
 8005eb8:	d902      	bls.n	8005ec0 <NVIC_EncodePriority+0x30>
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	3b03      	subs	r3, #3
 8005ebe:	e000      	b.n	8005ec2 <NVIC_EncodePriority+0x32>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43da      	mvns	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee2:	43d9      	mvns	r1, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	400b      	ands	r3, r1
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	3724      	adds	r7, #36	; 0x24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <SysTick_Config>:
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f08:	d301      	bcc.n	8005f0e <SysTick_Config+0x16>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e00f      	b.n	8005f2e <SysTick_Config+0x36>
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <SysTick_Config+0x40>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	6053      	str	r3, [r2, #4]
 8005f16:	210f      	movs	r1, #15
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f1c:	f7ff ff8e 	bl	8005e3c <__NVIC_SetPriority>
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <SysTick_Config+0x40>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	609a      	str	r2, [r3, #8]
 8005f26:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <SysTick_Config+0x40>)
 8005f28:	2207      	movs	r2, #7
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	e000e010 	.word	0xe000e010

08005f3c <HAL_NVIC_SetPriorityGrouping>:
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ff29 	bl	8005d9c <__NVIC_SetPriorityGrouping>
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_NVIC_SetPriority>:
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b086      	sub	sp, #24
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	4603      	mov	r3, r0
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
 8005f5e:	73fb      	strb	r3, [r7, #15]
 8005f60:	f7ff ff40 	bl	8005de4 <__NVIC_GetPriorityGrouping>
 8005f64:	6178      	str	r0, [r7, #20]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	6978      	ldr	r0, [r7, #20]
 8005f6c:	f7ff ff90 	bl	8005e90 <NVIC_EncodePriority>
 8005f70:	4602      	mov	r2, r0
 8005f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff ff5f 	bl	8005e3c <__NVIC_SetPriority>
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_NVIC_EnableIRQ>:
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	71fb      	strb	r3, [r7, #7]
 8005f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ff33 	bl	8005e00 <__NVIC_EnableIRQ>
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_SYSTICK_Config>:
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ffa4 	bl	8005ef8 <SysTick_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_DAC_Init>:
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_DAC_Init+0x12>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e014      	b.n	8005ff6 <HAL_DAC_Init+0x3c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	791b      	ldrb	r3, [r3, #4]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <HAL_DAC_Init+0x28>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	715a      	strb	r2, [r3, #5]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fd ffa9 	bl	8003f34 <HAL_DAC_MspInit>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	711a      	strb	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	611a      	str	r2, [r3, #16]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	711a      	strb	r2, [r3, #4]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_DAC_Start>:
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	795b      	ldrb	r3, [r3, #5]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_DAC_Start+0x16>
 8006010:	2302      	movs	r3, #2
 8006012:	e043      	b.n	800609c <HAL_DAC_Start+0x9e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	715a      	strb	r2, [r3, #5]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	711a      	strb	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6819      	ldr	r1, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2201      	movs	r2, #1
 800602e:	409a      	lsls	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	2001      	movs	r0, #1
 800603a:	f7fe fd2d 	bl	8004a98 <HAL_Delay>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10f      	bne.n	8006064 <HAL_DAC_Start+0x66>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800604e:	2b02      	cmp	r3, #2
 8006050:	d11d      	bne.n	800608e <HAL_DAC_Start+0x90>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	e014      	b.n	800608e <HAL_DAC_Start+0x90>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2102      	movs	r1, #2
 8006076:	fa01 f303 	lsl.w	r3, r1, r3
 800607a:	429a      	cmp	r2, r3
 800607c:	d107      	bne.n	800608e <HAL_DAC_Start+0x90>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0202 	orr.w	r2, r2, #2
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	711a      	strb	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	715a      	strb	r2, [r3, #5]
 800609a:	2300      	movs	r3, #0
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_DAC_SetValue>:
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d105      	bne.n	80060d4 <HAL_DAC_SetValue+0x30>
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	3308      	adds	r3, #8
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e004      	b.n	80060de <HAL_DAC_SetValue+0x3a>
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4413      	add	r3, r2
 80060da:	3314      	adds	r3, #20
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	461a      	mov	r2, r3
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	2300      	movs	r3, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_DAC_ConfigChannel>:
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	; 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	795b      	ldrb	r3, [r3, #5]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_DAC_ConfigChannel+0x1c>
 800610c:	2302      	movs	r3, #2
 800610e:	e194      	b.n	800643a <HAL_DAC_ConfigChannel+0x346>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	715a      	strb	r2, [r3, #5]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2202      	movs	r2, #2
 800611a:	711a      	strb	r2, [r3, #4]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d174      	bne.n	800620e <HAL_DAC_ConfigChannel+0x11a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d137      	bne.n	800619a <HAL_DAC_ConfigChannel+0xa6>
 800612a:	f7fe fca9 	bl	8004a80 <HAL_GetTick>
 800612e:	61f8      	str	r0, [r7, #28]
 8006130:	e011      	b.n	8006156 <HAL_DAC_ConfigChannel+0x62>
 8006132:	f7fe fca5 	bl	8004a80 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d90a      	bls.n	8006156 <HAL_DAC_ConfigChannel+0x62>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f043 0208 	orr.w	r2, r3, #8
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	611a      	str	r2, [r3, #16]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2203      	movs	r2, #3
 8006150:	711a      	strb	r2, [r3, #4]
 8006152:	2303      	movs	r3, #3
 8006154:	e171      	b.n	800643a <HAL_DAC_ConfigChannel+0x346>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e6      	bne.n	8006132 <HAL_DAC_ConfigChannel+0x3e>
 8006164:	2001      	movs	r0, #1
 8006166:	f7fe fc97 	bl	8004a98 <HAL_Delay>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
 8006174:	e01e      	b.n	80061b4 <HAL_DAC_ConfigChannel+0xc0>
 8006176:	f7fe fc83 	bl	8004a80 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	d90a      	bls.n	800619a <HAL_DAC_ConfigChannel+0xa6>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f043 0208 	orr.w	r2, r3, #8
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	611a      	str	r2, [r3, #16]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2203      	movs	r2, #3
 8006194:	711a      	strb	r2, [r3, #4]
 8006196:	2303      	movs	r3, #3
 8006198:	e14f      	b.n	800643a <HAL_DAC_ConfigChannel+0x346>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	dbe8      	blt.n	8006176 <HAL_DAC_ConfigChannel+0x82>
 80061a4:	2001      	movs	r0, #1
 80061a6:	f7fe fc77 	bl	8004a98 <HAL_Delay>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80061c4:	fa01 f303 	lsl.w	r3, r1, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	ea02 0103 	and.w	r1, r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	409a      	lsls	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	649a      	str	r2, [r3, #72]	; 0x48
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	21ff      	movs	r1, #255	; 0xff
 80061f0:	fa01 f303 	lsl.w	r3, r1, r3
 80061f4:	43db      	mvns	r3, r3
 80061f6:	ea02 0103 	and.w	r1, r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	409a      	lsls	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	64da      	str	r2, [r3, #76]	; 0x4c
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d11d      	bne.n	8006252 <HAL_DAC_ConfigChannel+0x15e>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	221f      	movs	r2, #31
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	43db      	mvns	r3, r3
 800622c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622e:	4013      	ands	r3, r2
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006246:	4313      	orrs	r3, r2
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2207      	movs	r2, #7
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43db      	mvns	r3, r3
 8006268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800626a:	4013      	ands	r3, r2
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_DAC_ConfigChannel+0x18c>
 800627a:	2300      	movs	r3, #0
 800627c:	623b      	str	r3, [r7, #32]
 800627e:	e011      	b.n	80062a4 <HAL_DAC_ConfigChannel+0x1b0>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <HAL_DAC_ConfigChannel+0x19e>
 800628c:	2301      	movs	r3, #1
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	e008      	b.n	80062a4 <HAL_DAC_ConfigChannel+0x1b0>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d102      	bne.n	80062a0 <HAL_DAC_ConfigChannel+0x1ac>
 800629a:	2301      	movs	r3, #1
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	e001      	b.n	80062a4 <HAL_DAC_ConfigChannel+0x1b0>
 80062a0:	2300      	movs	r3, #0
 80062a2:	623b      	str	r3, [r7, #32]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	6a3a      	ldr	r2, [r7, #32]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062be:	fa02 f303 	lsl.w	r3, r2, r3
 80062c2:	43db      	mvns	r3, r3
 80062c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c6:	4013      	ands	r3, r2
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	791b      	ldrb	r3, [r3, #4]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d102      	bne.n	80062d8 <HAL_DAC_ConfigChannel+0x1e4>
 80062d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d6:	e000      	b.n	80062da <HAL_DAC_ConfigChannel+0x1e6>
 80062d8:	2300      	movs	r3, #0
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4313      	orrs	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f003 0310 	and.w	r3, r3, #16
 80062e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f2:	4013      	ands	r3, r2
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	795b      	ldrb	r3, [r3, #5]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d102      	bne.n	8006304 <HAL_DAC_ConfigChannel+0x210>
 80062fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006302:	e000      	b.n	8006306 <HAL_DAC_ConfigChannel+0x212>
 8006304:	2300      	movs	r3, #0
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4313      	orrs	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d114      	bne.n	8006346 <HAL_DAC_ConfigChannel+0x252>
 800631c:	f001 faa6 	bl	800786c <HAL_RCC_GetHCLKFreq>
 8006320:	6178      	str	r0, [r7, #20]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4a47      	ldr	r2, [pc, #284]	; (8006444 <HAL_DAC_ConfigChannel+0x350>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d904      	bls.n	8006334 <HAL_DAC_ConfigChannel+0x240>
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	e00d      	b.n	8006350 <HAL_DAC_ConfigChannel+0x25c>
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4a44      	ldr	r2, [pc, #272]	; (8006448 <HAL_DAC_ConfigChannel+0x354>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d909      	bls.n	8006350 <HAL_DAC_ConfigChannel+0x25c>
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
 8006344:	e004      	b.n	8006350 <HAL_DAC_ConfigChannel+0x25c>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	4313      	orrs	r3, r2
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635e:	4313      	orrs	r3, r2
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	63da      	str	r2, [r3, #60]	; 0x3c
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6819      	ldr	r1, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43da      	mvns	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	400a      	ands	r2, r1
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	f640 72fe 	movw	r2, #4094	; 0xffe
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	43db      	mvns	r3, r3
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	4013      	ands	r3, r2
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ba:	4313      	orrs	r3, r2
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6819      	ldr	r1, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	22c0      	movs	r2, #192	; 0xc0
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	43da      	mvns	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	400a      	ands	r2, r1
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	089b      	lsrs	r3, r3, #2
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	089b      	lsrs	r3, r3, #2
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006410:	fa01 f303 	lsl.w	r3, r1, r3
 8006414:	43db      	mvns	r3, r3
 8006416:	ea02 0103 	and.w	r1, r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	409a      	lsls	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	661a      	str	r2, [r3, #96]	; 0x60
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	711a      	strb	r2, [r3, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	715a      	strb	r2, [r3, #5]
 8006438:	2300      	movs	r3, #0
 800643a:	4618      	mov	r0, r3
 800643c:	3728      	adds	r7, #40	; 0x28
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	09896800 	.word	0x09896800
 8006448:	04c4b400 	.word	0x04c4b400

0800644c <HAL_DMA_Init>:
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_DMA_Init+0x12>
 800645a:	2301      	movs	r3, #1
 800645c:	e08d      	b.n	800657a <HAL_DMA_Init+0x12e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	4b47      	ldr	r3, [pc, #284]	; (8006584 <HAL_DMA_Init+0x138>)
 8006466:	429a      	cmp	r2, r3
 8006468:	d80f      	bhi.n	800648a <HAL_DMA_Init+0x3e>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	4b45      	ldr	r3, [pc, #276]	; (8006588 <HAL_DMA_Init+0x13c>)
 8006472:	4413      	add	r3, r2
 8006474:	4a45      	ldr	r2, [pc, #276]	; (800658c <HAL_DMA_Init+0x140>)
 8006476:	fba2 2303 	umull	r2, r3, r2, r3
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	009a      	lsls	r2, r3, #2
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	645a      	str	r2, [r3, #68]	; 0x44
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a42      	ldr	r2, [pc, #264]	; (8006590 <HAL_DMA_Init+0x144>)
 8006486:	641a      	str	r2, [r3, #64]	; 0x40
 8006488:	e00e      	b.n	80064a8 <HAL_DMA_Init+0x5c>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	4b40      	ldr	r3, [pc, #256]	; (8006594 <HAL_DMA_Init+0x148>)
 8006492:	4413      	add	r3, r2
 8006494:	4a3d      	ldr	r2, [pc, #244]	; (800658c <HAL_DMA_Init+0x140>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	091b      	lsrs	r3, r3, #4
 800649c:	009a      	lsls	r2, r3, #2
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	645a      	str	r2, [r3, #68]	; 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a3c      	ldr	r2, [pc, #240]	; (8006598 <HAL_DMA_Init+0x14c>)
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	431a      	orrs	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa1e 	bl	800693c <DMA_CalcDMAMUXChannelBaseAndMask>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006508:	d102      	bne.n	8006510 <HAL_DMA_Init+0xc4>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d010      	beq.n	8006550 <HAL_DMA_Init+0x104>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b04      	cmp	r3, #4
 8006534:	d80c      	bhi.n	8006550 <HAL_DMA_Init+0x104>
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa3e 	bl	80069b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	e008      	b.n	8006562 <HAL_DMA_Init+0x116>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	655a      	str	r2, [r3, #84]	; 0x54
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	659a      	str	r2, [r3, #88]	; 0x58
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	65da      	str	r2, [r3, #92]	; 0x5c
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	63da      	str	r2, [r3, #60]	; 0x3c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006578:	2300      	movs	r3, #0
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40020407 	.word	0x40020407
 8006588:	bffdfff8 	.word	0xbffdfff8
 800658c:	cccccccd 	.word	0xcccccccd
 8006590:	40020000 	.word	0x40020000
 8006594:	bffdfbf8 	.word	0xbffdfbf8
 8006598:	40020400 	.word	0x40020400

0800659c <HAL_DMA_Start_IT>:
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_DMA_Start_IT+0x20>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e066      	b.n	800668a <HAL_DMA_Start_IT+0xee>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d155      	bne.n	800667c <HAL_DMA_Start_IT+0xe0>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f962 	bl	80068be <DMA_SetConfig>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <HAL_DMA_Start_IT+0x78>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 020e 	orr.w	r2, r2, #14
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	e00f      	b.n	8006634 <HAL_DMA_Start_IT+0x98>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0204 	bic.w	r2, r2, #4
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 020a 	orr.w	r2, r2, #10
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_DMA_Start_IT+0xb6>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <HAL_DMA_Start_IT+0xce>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	e005      	b.n	8006688 <HAL_DMA_Start_IT+0xec>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006684:	2302      	movs	r3, #2
 8006686:	75fb      	strb	r3, [r7, #23]
 8006688:	7dfb      	ldrb	r3, [r7, #23]
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_DMA_Abort_IT>:
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d00d      	beq.n	80066c6 <HAL_DMA_Abort_IT+0x34>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2204      	movs	r2, #4
 80066ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80066c0:	2301      	movs	r3, #1
 80066c2:	73fb      	strb	r3, [r7, #15]
 80066c4:	e047      	b.n	8006756 <HAL_DMA_Abort_IT+0xc4>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 020e 	bic.w	r2, r2, #14
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	f003 021f 	and.w	r2, r3, #31
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	2101      	movs	r1, #1
 8006704:	fa01 f202 	lsl.w	r2, r1, r2
 8006708:	605a      	str	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00c      	beq.n	8006736 <HAL_DMA_Abort_IT+0xa4>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_DMA_Abort_IT+0xc4>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_DMA_IRQHandler>:
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60bb      	str	r3, [r7, #8]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	2204      	movs	r2, #4
 8006782:	409a      	lsls	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d026      	beq.n	80067da <HAL_DMA_IRQHandler+0x7a>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d021      	beq.n	80067da <HAL_DMA_IRQHandler+0x7a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d107      	bne.n	80067b4 <HAL_DMA_IRQHandler+0x54>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0204 	bic.w	r2, r2, #4
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b8:	f003 021f 	and.w	r2, r3, #31
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	2104      	movs	r1, #4
 80067c2:	fa01 f202 	lsl.w	r2, r1, r2
 80067c6:	605a      	str	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d071      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x154>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
 80067d8:	e06c      	b.n	80068b4 <HAL_DMA_IRQHandler+0x154>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2202      	movs	r2, #2
 80067e4:	409a      	lsls	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d02e      	beq.n	800684c <HAL_DMA_IRQHandler+0xec>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d029      	beq.n	800684c <HAL_DMA_IRQHandler+0xec>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <HAL_DMA_IRQHandler+0xbe>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 020a 	bic.w	r2, r2, #10
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006822:	f003 021f 	and.w	r2, r3, #31
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2102      	movs	r1, #2
 800682c:	fa01 f202 	lsl.w	r2, r1, r2
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d038      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x154>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
 800684a:	e033      	b.n	80068b4 <HAL_DMA_IRQHandler+0x154>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	2208      	movs	r2, #8
 8006856:	409a      	lsls	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02a      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x156>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d025      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x156>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 020e 	bic.w	r2, r2, #14
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	f003 021f 	and.w	r2, r3, #31
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	2101      	movs	r1, #1
 8006888:	fa01 f202 	lsl.w	r2, r1, r2
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	63da      	str	r2, [r3, #60]	; 0x3c
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d004      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x156>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <DMA_SetConfig>:
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	607a      	str	r2, [r7, #4]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <DMA_SetConfig+0x2a>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80068e6:	605a      	str	r2, [r3, #4]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ec:	f003 021f 	and.w	r2, r3, #31
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	2101      	movs	r1, #1
 80068f6:	fa01 f202 	lsl.w	r2, r1, r2
 80068fa:	605a      	str	r2, [r3, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	605a      	str	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b10      	cmp	r3, #16
 800690a:	d108      	bne.n	800691e <DMA_SetConfig+0x60>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	609a      	str	r2, [r3, #8]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	60da      	str	r2, [r3, #12]
 800691c:	e007      	b.n	800692e <DMA_SetConfig+0x70>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	609a      	str	r2, [r3, #8]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	60da      	str	r2, [r3, #12]
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
	...

0800693c <DMA_CalcDMAMUXChannelBaseAndMask>:
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	4b16      	ldr	r3, [pc, #88]	; (80069a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800694c:	429a      	cmp	r2, r3
 800694e:	d802      	bhi.n	8006956 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
 8006950:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e001      	b.n	800695a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
 8006956:	4b15      	ldr	r3, [pc, #84]	; (80069ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	3b08      	subs	r3, #8
 8006966:	4a12      	ldr	r2, [pc, #72]	; (80069b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006974:	089b      	lsrs	r3, r3, #2
 8006976:	009a      	lsls	r2, r3, #2
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4413      	add	r3, r2
 800697c:	461a      	mov	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	649a      	str	r2, [r3, #72]	; 0x48
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a0b      	ldr	r2, [pc, #44]	; (80069b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006986:	64da      	str	r2, [r3, #76]	; 0x4c
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	2201      	movs	r2, #1
 8006990:	409a      	lsls	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	651a      	str	r2, [r3, #80]	; 0x50
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40020407 	.word	0x40020407
 80069a8:	40020800 	.word	0x40020800
 80069ac:	40020820 	.word	0x40020820
 80069b0:	cccccccd 	.word	0xcccccccd
 80069b4:	40020880 	.word	0x40020880

080069b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	461a      	mov	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	655a      	str	r2, [r3, #84]	; 0x54
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a08      	ldr	r2, [pc, #32]	; (80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80069da:	659a      	str	r2, [r3, #88]	; 0x58
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3b01      	subs	r3, #1
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	2201      	movs	r2, #1
 80069e6:	409a      	lsls	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	1000823f 	.word	0x1000823f
 80069fc:	40020940 	.word	0x40020940

08006a00 <HAL_GPIO_Init>:
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e15a      	b.n	8006cc6 <HAL_GPIO_Init+0x2c6>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	2101      	movs	r1, #1
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 814c 	beq.w	8006cc0 <HAL_GPIO_Init+0x2c0>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d00b      	beq.n	8006a48 <HAL_GPIO_Init+0x48>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d007      	beq.n	8006a48 <HAL_GPIO_Init+0x48>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b11      	cmp	r3, #17
 8006a3e:	d003      	beq.n	8006a48 <HAL_GPIO_Init+0x48>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b12      	cmp	r3, #18
 8006a46:	d130      	bne.n	8006aaa <HAL_GPIO_Init+0xaa>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	2203      	movs	r2, #3
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	609a      	str	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	f003 0201 	and.w	r2, r3, #1
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	605a      	str	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	43db      	mvns	r3, r3
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d003      	beq.n	8006aea <HAL_GPIO_Init+0xea>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b12      	cmp	r3, #18
 8006ae8:	d123      	bne.n	8006b32 <HAL_GPIO_Init+0x132>
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	08da      	lsrs	r2, r3, #3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3208      	adds	r2, #8
 8006af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	220f      	movs	r2, #15
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	43db      	mvns	r3, r3
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	08da      	lsrs	r2, r3, #3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3208      	adds	r2, #8
 8006b2c:	6939      	ldr	r1, [r7, #16]
 8006b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	43db      	mvns	r3, r3
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4013      	ands	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 0203 	and.w	r2, r3, #3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80a6 	beq.w	8006cc0 <HAL_GPIO_Init+0x2c0>
 8006b74:	4b5b      	ldr	r3, [pc, #364]	; (8006ce4 <HAL_GPIO_Init+0x2e4>)
 8006b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b78:	4a5a      	ldr	r2, [pc, #360]	; (8006ce4 <HAL_GPIO_Init+0x2e4>)
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	6613      	str	r3, [r2, #96]	; 0x60
 8006b80:	4b58      	ldr	r3, [pc, #352]	; (8006ce4 <HAL_GPIO_Init+0x2e4>)
 8006b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4a56      	ldr	r2, [pc, #344]	; (8006ce8 <HAL_GPIO_Init+0x2e8>)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	089b      	lsrs	r3, r3, #2
 8006b92:	3302      	adds	r3, #2
 8006b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	220f      	movs	r2, #15
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4013      	ands	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006bb6:	d01f      	beq.n	8006bf8 <HAL_GPIO_Init+0x1f8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a4c      	ldr	r2, [pc, #304]	; (8006cec <HAL_GPIO_Init+0x2ec>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d019      	beq.n	8006bf4 <HAL_GPIO_Init+0x1f4>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a4b      	ldr	r2, [pc, #300]	; (8006cf0 <HAL_GPIO_Init+0x2f0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d013      	beq.n	8006bf0 <HAL_GPIO_Init+0x1f0>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a4a      	ldr	r2, [pc, #296]	; (8006cf4 <HAL_GPIO_Init+0x2f4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00d      	beq.n	8006bec <HAL_GPIO_Init+0x1ec>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a49      	ldr	r2, [pc, #292]	; (8006cf8 <HAL_GPIO_Init+0x2f8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <HAL_GPIO_Init+0x1e8>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a48      	ldr	r2, [pc, #288]	; (8006cfc <HAL_GPIO_Init+0x2fc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <HAL_GPIO_Init+0x1e4>
 8006be0:	2305      	movs	r3, #5
 8006be2:	e00a      	b.n	8006bfa <HAL_GPIO_Init+0x1fa>
 8006be4:	2306      	movs	r3, #6
 8006be6:	e008      	b.n	8006bfa <HAL_GPIO_Init+0x1fa>
 8006be8:	2304      	movs	r3, #4
 8006bea:	e006      	b.n	8006bfa <HAL_GPIO_Init+0x1fa>
 8006bec:	2303      	movs	r3, #3
 8006bee:	e004      	b.n	8006bfa <HAL_GPIO_Init+0x1fa>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e002      	b.n	8006bfa <HAL_GPIO_Init+0x1fa>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <HAL_GPIO_Init+0x1fa>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	f002 0203 	and.w	r2, r2, #3
 8006c00:	0092      	lsls	r2, r2, #2
 8006c02:	4093      	lsls	r3, r2
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	4937      	ldr	r1, [pc, #220]	; (8006ce8 <HAL_GPIO_Init+0x2e8>)
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	089b      	lsrs	r3, r3, #2
 8006c10:	3302      	adds	r3, #2
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c18:	4b39      	ldr	r3, [pc, #228]	; (8006d00 <HAL_GPIO_Init+0x300>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4013      	ands	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_GPIO_Init+0x23c>
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	4a30      	ldr	r2, [pc, #192]	; (8006d00 <HAL_GPIO_Init+0x300>)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	4b2f      	ldr	r3, [pc, #188]	; (8006d00 <HAL_GPIO_Init+0x300>)
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_GPIO_Init+0x266>
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	4a26      	ldr	r2, [pc, #152]	; (8006d00 <HAL_GPIO_Init+0x300>)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6053      	str	r3, [r2, #4]
 8006c6c:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <HAL_GPIO_Init+0x300>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_GPIO_Init+0x290>
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	4a1b      	ldr	r2, [pc, #108]	; (8006d00 <HAL_GPIO_Init+0x300>)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6093      	str	r3, [r2, #8]
 8006c96:	4b1a      	ldr	r3, [pc, #104]	; (8006d00 <HAL_GPIO_Init+0x300>)
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_GPIO_Init+0x2ba>
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	4a11      	ldr	r2, [pc, #68]	; (8006d00 <HAL_GPIO_Init+0x300>)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	60d3      	str	r3, [r2, #12]
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f47f ae9d 	bne.w	8006a10 <HAL_GPIO_Init+0x10>
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	40010000 	.word	0x40010000
 8006cec:	48000400 	.word	0x48000400
 8006cf0:	48000800 	.word	0x48000800
 8006cf4:	48000c00 	.word	0x48000c00
 8006cf8:	48001000 	.word	0x48001000
 8006cfc:	48001400 	.word	0x48001400
 8006d00:	40010400 	.word	0x40010400

08006d04 <HAL_GPIO_WritePin>:
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	807b      	strh	r3, [r7, #2]
 8006d10:	4613      	mov	r3, r2
 8006d12:	707b      	strb	r3, [r7, #1]
 8006d14:	787b      	ldrb	r3, [r7, #1]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_GPIO_WritePin+0x1e>
 8006d1a:	887a      	ldrh	r2, [r7, #2]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	619a      	str	r2, [r3, #24]
 8006d20:	e002      	b.n	8006d28 <HAL_GPIO_WritePin+0x24>
 8006d22:	887a      	ldrh	r2, [r7, #2]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	629a      	str	r2, [r3, #40]	; 0x28
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_GPIO_TogglePin>:
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	807b      	strh	r3, [r7, #2]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	887a      	ldrh	r2, [r7, #2]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	041a      	lsls	r2, r3, #16
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	43d9      	mvns	r1, r3
 8006d52:	887b      	ldrh	r3, [r7, #2]
 8006d54:	400b      	ands	r3, r1
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	619a      	str	r2, [r3, #24]
 8006d5c:	bf00      	nop
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_GPIO_EXTI_IRQHandler>:
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	80fb      	strh	r3, [r7, #6]
 8006d72:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d74:	695a      	ldr	r2, [r3, #20]
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d006      	beq.n	8006d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
 8006d7e:	4a05      	ldr	r2, [pc, #20]	; (8006d94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	6153      	str	r3, [r2, #20]
 8006d84:	88fb      	ldrh	r3, [r7, #6]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fa ffd0 	bl	8001d2c <HAL_GPIO_EXTI_Callback>
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40010400 	.word	0x40010400

08006d98 <HAL_PWREx_ControlVoltageScaling>:
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d141      	bne.n	8006e2a <HAL_PWREx_ControlVoltageScaling+0x92>
 8006da6:	4b4b      	ldr	r3, [pc, #300]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db2:	d131      	bne.n	8006e18 <HAL_PWREx_ControlVoltageScaling+0x80>
 8006db4:	4b47      	ldr	r3, [pc, #284]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dba:	4a46      	ldr	r2, [pc, #280]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006dc4:	4b43      	ldr	r3, [pc, #268]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006dcc:	4a41      	ldr	r2, [pc, #260]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	4b40      	ldr	r3, [pc, #256]	; (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2232      	movs	r2, #50	; 0x32
 8006dda:	fb02 f303 	mul.w	r3, r2, r3
 8006dde:	4a3f      	ldr	r2, [pc, #252]	; (8006edc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006de0:	fba2 2303 	umull	r2, r3, r2, r3
 8006de4:	0c9b      	lsrs	r3, r3, #18
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e002      	b.n	8006df2 <HAL_PWREx_ControlVoltageScaling+0x5a>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	4b38      	ldr	r3, [pc, #224]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfe:	d102      	bne.n	8006e06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f2      	bne.n	8006dec <HAL_PWREx_ControlVoltageScaling+0x54>
 8006e06:	4b33      	ldr	r3, [pc, #204]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e12:	d158      	bne.n	8006ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
 8006e14:	2303      	movs	r3, #3
 8006e16:	e057      	b.n	8006ec8 <HAL_PWREx_ControlVoltageScaling+0x130>
 8006e18:	4b2e      	ldr	r3, [pc, #184]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e1e:	4a2d      	ldr	r2, [pc, #180]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006e28:	e04d      	b.n	8006ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e30:	d141      	bne.n	8006eb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
 8006e32:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3e:	d131      	bne.n	8006ea4 <HAL_PWREx_ControlVoltageScaling+0x10c>
 8006e40:	4b24      	ldr	r3, [pc, #144]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e46:	4a23      	ldr	r2, [pc, #140]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006e50:	4b20      	ldr	r3, [pc, #128]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e58:	4a1e      	ldr	r2, [pc, #120]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2232      	movs	r2, #50	; 0x32
 8006e66:	fb02 f303 	mul.w	r3, r2, r3
 8006e6a:	4a1c      	ldr	r2, [pc, #112]	; (8006edc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e70:	0c9b      	lsrs	r3, r3, #18
 8006e72:	3301      	adds	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	e002      	b.n	8006e7e <HAL_PWREx_ControlVoltageScaling+0xe6>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8a:	d102      	bne.n	8006e92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1f2      	bne.n	8006e78 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9e:	d112      	bne.n	8006ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e011      	b.n	8006ec8 <HAL_PWREx_ControlVoltageScaling+0x130>
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006eb4:	e007      	b.n	8006ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ebe:	4a05      	ldr	r2, [pc, #20]	; (8006ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	40007000 	.word	0x40007000
 8006ed8:	20000000 	.word	0x20000000
 8006edc:	431bde83 	.word	0x431bde83

08006ee0 <HAL_PWREx_DisableUCPDDeadBattery>:
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4a04      	ldr	r2, [pc, #16]	; (8006efc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006eee:	6093      	str	r3, [r2, #8]
 8006ef0:	bf00      	nop
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40007000 	.word	0x40007000

08006f00 <HAL_RCC_OscConfig>:
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b088      	sub	sp, #32
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_RCC_OscConfig+0x12>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e308      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d075      	beq.n	800700a <HAL_RCC_OscConfig+0x10a>
 8006f1e:	4ba3      	ldr	r3, [pc, #652]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 030c 	and.w	r3, r3, #12
 8006f26:	61bb      	str	r3, [r7, #24]
 8006f28:	4ba0      	ldr	r3, [pc, #640]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0303 	and.w	r3, r3, #3
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b0c      	cmp	r3, #12
 8006f36:	d102      	bne.n	8006f3e <HAL_RCC_OscConfig+0x3e>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d002      	beq.n	8006f44 <HAL_RCC_OscConfig+0x44>
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d10b      	bne.n	8006f5c <HAL_RCC_OscConfig+0x5c>
 8006f44:	4b99      	ldr	r3, [pc, #612]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d05b      	beq.n	8007008 <HAL_RCC_OscConfig+0x108>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d157      	bne.n	8007008 <HAL_RCC_OscConfig+0x108>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e2e3      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d106      	bne.n	8006f74 <HAL_RCC_OscConfig+0x74>
 8006f66:	4b91      	ldr	r3, [pc, #580]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a90      	ldr	r2, [pc, #576]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e01d      	b.n	8006fb0 <HAL_RCC_OscConfig+0xb0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCC_OscConfig+0x98>
 8006f7e:	4b8b      	ldr	r3, [pc, #556]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a8a      	ldr	r2, [pc, #552]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	4b88      	ldr	r3, [pc, #544]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a87      	ldr	r2, [pc, #540]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e00b      	b.n	8006fb0 <HAL_RCC_OscConfig+0xb0>
 8006f98:	4b84      	ldr	r3, [pc, #528]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a83      	ldr	r2, [pc, #524]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	4b81      	ldr	r3, [pc, #516]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a80      	ldr	r2, [pc, #512]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d013      	beq.n	8006fe0 <HAL_RCC_OscConfig+0xe0>
 8006fb8:	f7fd fd62 	bl	8004a80 <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0xd2>
 8006fc0:	f7fd fd5e 	bl	8004a80 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b64      	cmp	r3, #100	; 0x64
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0xd2>
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e2a8      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8006fd2:	4b76      	ldr	r3, [pc, #472]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCC_OscConfig+0xc0>
 8006fde:	e014      	b.n	800700a <HAL_RCC_OscConfig+0x10a>
 8006fe0:	f7fd fd4e 	bl	8004a80 <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0xfa>
 8006fe8:	f7fd fd4a 	bl	8004a80 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b64      	cmp	r3, #100	; 0x64
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0xfa>
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e294      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8006ffa:	4b6c      	ldr	r3, [pc, #432]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f0      	bne.n	8006fe8 <HAL_RCC_OscConfig+0xe8>
 8007006:	e000      	b.n	800700a <HAL_RCC_OscConfig+0x10a>
 8007008:	bf00      	nop
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d075      	beq.n	8007102 <HAL_RCC_OscConfig+0x202>
 8007016:	4b65      	ldr	r3, [pc, #404]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 030c 	and.w	r3, r3, #12
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	4b62      	ldr	r3, [pc, #392]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b0c      	cmp	r3, #12
 800702e:	d102      	bne.n	8007036 <HAL_RCC_OscConfig+0x136>
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d002      	beq.n	800703c <HAL_RCC_OscConfig+0x13c>
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b04      	cmp	r3, #4
 800703a:	d11f      	bne.n	800707c <HAL_RCC_OscConfig+0x17c>
 800703c:	4b5b      	ldr	r3, [pc, #364]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_RCC_OscConfig+0x154>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_RCC_OscConfig+0x154>
 8007050:	2301      	movs	r3, #1
 8007052:	e267      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8007054:	4b55      	ldr	r3, [pc, #340]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	061b      	lsls	r3, r3, #24
 8007062:	4952      	ldr	r1, [pc, #328]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8007064:	4313      	orrs	r3, r2
 8007066:	604b      	str	r3, [r1, #4]
 8007068:	4b51      	ldr	r3, [pc, #324]	; (80071b0 <HAL_RCC_OscConfig+0x2b0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f7fd fcbb 	bl	80049e8 <HAL_InitTick>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d043      	beq.n	8007100 <HAL_RCC_OscConfig+0x200>
 8007078:	2301      	movs	r3, #1
 800707a:	e253      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d023      	beq.n	80070cc <HAL_RCC_OscConfig+0x1cc>
 8007084:	4b49      	ldr	r3, [pc, #292]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a48      	ldr	r2, [pc, #288]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 800708a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	f7fd fcf6 	bl	8004a80 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x1aa>
 8007098:	f7fd fcf2 	bl	8004a80 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x1aa>
 80070a6:	2303      	movs	r3, #3
 80070a8:	e23c      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 80070aa:	4b40      	ldr	r3, [pc, #256]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0f0      	beq.n	8007098 <HAL_RCC_OscConfig+0x198>
 80070b6:	4b3d      	ldr	r3, [pc, #244]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	061b      	lsls	r3, r3, #24
 80070c4:	4939      	ldr	r1, [pc, #228]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	604b      	str	r3, [r1, #4]
 80070ca:	e01a      	b.n	8007102 <HAL_RCC_OscConfig+0x202>
 80070cc:	4b37      	ldr	r3, [pc, #220]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a36      	ldr	r2, [pc, #216]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 80070d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	f7fd fcd2 	bl	8004a80 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]
 80070de:	e008      	b.n	80070f2 <HAL_RCC_OscConfig+0x1f2>
 80070e0:	f7fd fcce 	bl	8004a80 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x1f2>
 80070ee:	2303      	movs	r3, #3
 80070f0:	e218      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 80070f2:	4b2e      	ldr	r3, [pc, #184]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f0      	bne.n	80070e0 <HAL_RCC_OscConfig+0x1e0>
 80070fe:	e000      	b.n	8007102 <HAL_RCC_OscConfig+0x202>
 8007100:	bf00      	nop
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d03c      	beq.n	8007188 <HAL_RCC_OscConfig+0x288>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d01c      	beq.n	8007150 <HAL_RCC_OscConfig+0x250>
 8007116:	4b25      	ldr	r3, [pc, #148]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8007118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800711c:	4a23      	ldr	r2, [pc, #140]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007126:	f7fd fcab 	bl	8004a80 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x240>
 800712e:	f7fd fca7 	bl	8004a80 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x240>
 800713c:	2303      	movs	r3, #3
 800713e:	e1f1      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8007140:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8007142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0ef      	beq.n	800712e <HAL_RCC_OscConfig+0x22e>
 800714e:	e01b      	b.n	8007188 <HAL_RCC_OscConfig+0x288>
 8007150:	4b16      	ldr	r3, [pc, #88]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8007152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007156:	4a15      	ldr	r2, [pc, #84]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 8007158:	f023 0301 	bic.w	r3, r3, #1
 800715c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007160:	f7fd fc8e 	bl	8004a80 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x27a>
 8007168:	f7fd fc8a 	bl	8004a80 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x27a>
 8007176:	2303      	movs	r3, #3
 8007178:	e1d4      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 800717a:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 800717c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1ef      	bne.n	8007168 <HAL_RCC_OscConfig+0x268>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80ab 	beq.w	80072ec <HAL_RCC_OscConfig+0x3ec>
 8007196:	2300      	movs	r3, #0
 8007198:	77fb      	strb	r3, [r7, #31]
 800719a:	4b04      	ldr	r3, [pc, #16]	; (80071ac <HAL_RCC_OscConfig+0x2ac>)
 800719c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <HAL_RCC_OscConfig+0x2b4>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e005      	b.n	80071b6 <HAL_RCC_OscConfig+0x2b6>
 80071aa:	bf00      	nop
 80071ac:	40021000 	.word	0x40021000
 80071b0:	20000004 	.word	0x20000004
 80071b4:	2300      	movs	r3, #0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00d      	beq.n	80071d6 <HAL_RCC_OscConfig+0x2d6>
 80071ba:	4baf      	ldr	r3, [pc, #700]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 80071bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071be:	4aae      	ldr	r2, [pc, #696]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 80071c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c4:	6593      	str	r3, [r2, #88]	; 0x58
 80071c6:	4bac      	ldr	r3, [pc, #688]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 80071c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2301      	movs	r3, #1
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	4ba9      	ldr	r3, [pc, #676]	; (800747c <HAL_RCC_OscConfig+0x57c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d118      	bne.n	8007214 <HAL_RCC_OscConfig+0x314>
 80071e2:	4ba6      	ldr	r3, [pc, #664]	; (800747c <HAL_RCC_OscConfig+0x57c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4aa5      	ldr	r2, [pc, #660]	; (800747c <HAL_RCC_OscConfig+0x57c>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	f7fd fc47 	bl	8004a80 <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x308>
 80071f6:	f7fd fc43 	bl	8004a80 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x308>
 8007204:	2303      	movs	r3, #3
 8007206:	e18d      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8007208:	4b9c      	ldr	r3, [pc, #624]	; (800747c <HAL_RCC_OscConfig+0x57c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCC_OscConfig+0x2f6>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d108      	bne.n	800722e <HAL_RCC_OscConfig+0x32e>
 800721c:	4b96      	ldr	r3, [pc, #600]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	4a95      	ldr	r2, [pc, #596]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007224:	f043 0301 	orr.w	r3, r3, #1
 8007228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800722c:	e024      	b.n	8007278 <HAL_RCC_OscConfig+0x378>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2b05      	cmp	r3, #5
 8007234:	d110      	bne.n	8007258 <HAL_RCC_OscConfig+0x358>
 8007236:	4b90      	ldr	r3, [pc, #576]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723c:	4a8e      	ldr	r2, [pc, #568]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800723e:	f043 0304 	orr.w	r3, r3, #4
 8007242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007246:	4b8c      	ldr	r3, [pc, #560]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724c:	4a8a      	ldr	r2, [pc, #552]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007256:	e00f      	b.n	8007278 <HAL_RCC_OscConfig+0x378>
 8007258:	4b87      	ldr	r3, [pc, #540]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725e:	4a86      	ldr	r2, [pc, #536]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007268:	4b83      	ldr	r3, [pc, #524]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726e:	4a82      	ldr	r2, [pc, #520]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d016      	beq.n	80072ae <HAL_RCC_OscConfig+0x3ae>
 8007280:	f7fd fbfe 	bl	8004a80 <HAL_GetTick>
 8007284:	6138      	str	r0, [r7, #16]
 8007286:	e00a      	b.n	800729e <HAL_RCC_OscConfig+0x39e>
 8007288:	f7fd fbfa 	bl	8004a80 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	f241 3288 	movw	r2, #5000	; 0x1388
 8007296:	4293      	cmp	r3, r2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x39e>
 800729a:	2303      	movs	r3, #3
 800729c:	e142      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 800729e:	4b76      	ldr	r3, [pc, #472]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 80072a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0ed      	beq.n	8007288 <HAL_RCC_OscConfig+0x388>
 80072ac:	e015      	b.n	80072da <HAL_RCC_OscConfig+0x3da>
 80072ae:	f7fd fbe7 	bl	8004a80 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]
 80072b4:	e00a      	b.n	80072cc <HAL_RCC_OscConfig+0x3cc>
 80072b6:	f7fd fbe3 	bl	8004a80 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x3cc>
 80072c8:	2303      	movs	r3, #3
 80072ca:	e12b      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 80072cc:	4b6a      	ldr	r3, [pc, #424]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1ed      	bne.n	80072b6 <HAL_RCC_OscConfig+0x3b6>
 80072da:	7ffb      	ldrb	r3, [r7, #31]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d105      	bne.n	80072ec <HAL_RCC_OscConfig+0x3ec>
 80072e0:	4b65      	ldr	r3, [pc, #404]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 80072e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e4:	4a64      	ldr	r2, [pc, #400]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 80072e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ea:	6593      	str	r3, [r2, #88]	; 0x58
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d03c      	beq.n	8007372 <HAL_RCC_OscConfig+0x472>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01c      	beq.n	800733a <HAL_RCC_OscConfig+0x43a>
 8007300:	4b5d      	ldr	r3, [pc, #372]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007306:	4a5c      	ldr	r2, [pc, #368]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007308:	f043 0301 	orr.w	r3, r3, #1
 800730c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8007310:	f7fd fbb6 	bl	8004a80 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]
 8007316:	e008      	b.n	800732a <HAL_RCC_OscConfig+0x42a>
 8007318:	f7fd fbb2 	bl	8004a80 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x42a>
 8007326:	2303      	movs	r3, #3
 8007328:	e0fc      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 800732a:	4b53      	ldr	r3, [pc, #332]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800732c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0ef      	beq.n	8007318 <HAL_RCC_OscConfig+0x418>
 8007338:	e01b      	b.n	8007372 <HAL_RCC_OscConfig+0x472>
 800733a:	4b4f      	ldr	r3, [pc, #316]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800733c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007340:	4a4d      	ldr	r2, [pc, #308]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007342:	f023 0301 	bic.w	r3, r3, #1
 8007346:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800734a:	f7fd fb99 	bl	8004a80 <HAL_GetTick>
 800734e:	6138      	str	r0, [r7, #16]
 8007350:	e008      	b.n	8007364 <HAL_RCC_OscConfig+0x464>
 8007352:	f7fd fb95 	bl	8004a80 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <HAL_RCC_OscConfig+0x464>
 8007360:	2303      	movs	r3, #3
 8007362:	e0df      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8007364:	4b44      	ldr	r3, [pc, #272]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1ef      	bne.n	8007352 <HAL_RCC_OscConfig+0x452>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80d3 	beq.w	8007522 <HAL_RCC_OscConfig+0x622>
 800737c:	4b3e      	ldr	r3, [pc, #248]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 030c 	and.w	r3, r3, #12
 8007384:	2b0c      	cmp	r3, #12
 8007386:	f000 808d 	beq.w	80074a4 <HAL_RCC_OscConfig+0x5a4>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	2b02      	cmp	r3, #2
 8007390:	d15a      	bne.n	8007448 <HAL_RCC_OscConfig+0x548>
 8007392:	4b39      	ldr	r3, [pc, #228]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a38      	ldr	r2, [pc, #224]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	f7fd fb6f 	bl	8004a80 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]
 80073a4:	e008      	b.n	80073b8 <HAL_RCC_OscConfig+0x4b8>
 80073a6:	f7fd fb6b 	bl	8004a80 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x4b8>
 80073b4:	2303      	movs	r3, #3
 80073b6:	e0b5      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 80073b8:	4b2f      	ldr	r3, [pc, #188]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1f0      	bne.n	80073a6 <HAL_RCC_OscConfig+0x4a6>
 80073c4:	4b2c      	ldr	r3, [pc, #176]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	4b2d      	ldr	r3, [pc, #180]	; (8007480 <HAL_RCC_OscConfig+0x580>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6a11      	ldr	r1, [r2, #32]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073d4:	3a01      	subs	r2, #1
 80073d6:	0112      	lsls	r2, r2, #4
 80073d8:	4311      	orrs	r1, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80073de:	0212      	lsls	r2, r2, #8
 80073e0:	4311      	orrs	r1, r2
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073e6:	0852      	lsrs	r2, r2, #1
 80073e8:	3a01      	subs	r2, #1
 80073ea:	0552      	lsls	r2, r2, #21
 80073ec:	4311      	orrs	r1, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073f2:	0852      	lsrs	r2, r2, #1
 80073f4:	3a01      	subs	r2, #1
 80073f6:	0652      	lsls	r2, r2, #25
 80073f8:	4311      	orrs	r1, r2
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073fe:	06d2      	lsls	r2, r2, #27
 8007400:	430a      	orrs	r2, r1
 8007402:	491d      	ldr	r1, [pc, #116]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007404:	4313      	orrs	r3, r2
 8007406:	60cb      	str	r3, [r1, #12]
 8007408:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800740e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	4b18      	ldr	r3, [pc, #96]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	4a17      	ldr	r2, [pc, #92]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800741a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800741e:	60d3      	str	r3, [r2, #12]
 8007420:	f7fd fb2e 	bl	8004a80 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x53a>
 8007428:	f7fd fb2a 	bl	8004a80 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x53a>
 8007436:	2303      	movs	r3, #3
 8007438:	e074      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0f0      	beq.n	8007428 <HAL_RCC_OscConfig+0x528>
 8007446:	e06c      	b.n	8007522 <HAL_RCC_OscConfig+0x622>
 8007448:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0a      	ldr	r2, [pc, #40]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800744e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	4b08      	ldr	r3, [pc, #32]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	4a07      	ldr	r2, [pc, #28]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 800745a:	f023 0303 	bic.w	r3, r3, #3
 800745e:	60d3      	str	r3, [r2, #12]
 8007460:	4b05      	ldr	r3, [pc, #20]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	4a04      	ldr	r2, [pc, #16]	; (8007478 <HAL_RCC_OscConfig+0x578>)
 8007466:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800746a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800746e:	60d3      	str	r3, [r2, #12]
 8007470:	f7fd fb06 	bl	8004a80 <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]
 8007476:	e00e      	b.n	8007496 <HAL_RCC_OscConfig+0x596>
 8007478:	40021000 	.word	0x40021000
 800747c:	40007000 	.word	0x40007000
 8007480:	019f800c 	.word	0x019f800c
 8007484:	f7fd fafc 	bl	8004a80 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x596>
 8007492:	2303      	movs	r3, #3
 8007494:	e046      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8007496:	4b25      	ldr	r3, [pc, #148]	; (800752c <HAL_RCC_OscConfig+0x62c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <HAL_RCC_OscConfig+0x584>
 80074a2:	e03e      	b.n	8007522 <HAL_RCC_OscConfig+0x622>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_RCC_OscConfig+0x5b0>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e039      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 80074b0:	4b1e      	ldr	r3, [pc, #120]	; (800752c <HAL_RCC_OscConfig+0x62c>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f003 0203 	and.w	r2, r3, #3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d12c      	bne.n	800751e <HAL_RCC_OscConfig+0x61e>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	3b01      	subs	r3, #1
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d123      	bne.n	800751e <HAL_RCC_OscConfig+0x61e>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d11b      	bne.n	800751e <HAL_RCC_OscConfig+0x61e>
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	06db      	lsls	r3, r3, #27
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d113      	bne.n	800751e <HAL_RCC_OscConfig+0x61e>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007500:	085b      	lsrs	r3, r3, #1
 8007502:	3b01      	subs	r3, #1
 8007504:	055b      	lsls	r3, r3, #21
 8007506:	429a      	cmp	r2, r3
 8007508:	d109      	bne.n	800751e <HAL_RCC_OscConfig+0x61e>
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	085b      	lsrs	r3, r3, #1
 8007516:	3b01      	subs	r3, #1
 8007518:	065b      	lsls	r3, r3, #25
 800751a:	429a      	cmp	r2, r3
 800751c:	d001      	beq.n	8007522 <HAL_RCC_OscConfig+0x622>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <HAL_RCC_OscConfig+0x624>
 8007522:	2300      	movs	r3, #0
 8007524:	4618      	mov	r0, r3
 8007526:	3720      	adds	r7, #32
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40021000 	.word	0x40021000

08007530 <HAL_RCC_ClockConfig>:
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
 800753a:	2300      	movs	r3, #0
 800753c:	617b      	str	r3, [r7, #20]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <HAL_RCC_ClockConfig+0x18>
 8007544:	2301      	movs	r3, #1
 8007546:	e11e      	b.n	8007786 <HAL_RCC_ClockConfig+0x256>
 8007548:	4b91      	ldr	r3, [pc, #580]	; (8007790 <HAL_RCC_ClockConfig+0x260>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d910      	bls.n	8007578 <HAL_RCC_ClockConfig+0x48>
 8007556:	4b8e      	ldr	r3, [pc, #568]	; (8007790 <HAL_RCC_ClockConfig+0x260>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f023 020f 	bic.w	r2, r3, #15
 800755e:	498c      	ldr	r1, [pc, #560]	; (8007790 <HAL_RCC_ClockConfig+0x260>)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	4313      	orrs	r3, r2
 8007564:	600b      	str	r3, [r1, #0]
 8007566:	4b8a      	ldr	r3, [pc, #552]	; (8007790 <HAL_RCC_ClockConfig+0x260>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d001      	beq.n	8007578 <HAL_RCC_ClockConfig+0x48>
 8007574:	2301      	movs	r3, #1
 8007576:	e106      	b.n	8007786 <HAL_RCC_ClockConfig+0x256>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d073      	beq.n	800766c <HAL_RCC_ClockConfig+0x13c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b03      	cmp	r3, #3
 800758a:	d129      	bne.n	80075e0 <HAL_RCC_ClockConfig+0xb0>
 800758c:	4b81      	ldr	r3, [pc, #516]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <HAL_RCC_ClockConfig+0x6c>
 8007598:	2301      	movs	r3, #1
 800759a:	e0f4      	b.n	8007786 <HAL_RCC_ClockConfig+0x256>
 800759c:	f000 f99e 	bl	80078dc <RCC_GetSysClockFreqFromPLLSource>
 80075a0:	6138      	str	r0, [r7, #16]
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	4a7c      	ldr	r2, [pc, #496]	; (8007798 <HAL_RCC_ClockConfig+0x268>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d93f      	bls.n	800762a <HAL_RCC_ClockConfig+0xfa>
 80075aa:	4b7a      	ldr	r3, [pc, #488]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <HAL_RCC_ClockConfig+0x9a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d033      	beq.n	800762a <HAL_RCC_ClockConfig+0xfa>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d12f      	bne.n	800762a <HAL_RCC_ClockConfig+0xfa>
 80075ca:	4b72      	ldr	r3, [pc, #456]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075d2:	4a70      	ldr	r2, [pc, #448]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80075d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d8:	6093      	str	r3, [r2, #8]
 80075da:	2380      	movs	r3, #128	; 0x80
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	e024      	b.n	800762a <HAL_RCC_ClockConfig+0xfa>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d107      	bne.n	80075f8 <HAL_RCC_ClockConfig+0xc8>
 80075e8:	4b6a      	ldr	r3, [pc, #424]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d109      	bne.n	8007608 <HAL_RCC_ClockConfig+0xd8>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e0c6      	b.n	8007786 <HAL_RCC_ClockConfig+0x256>
 80075f8:	4b66      	ldr	r3, [pc, #408]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_RCC_ClockConfig+0xd8>
 8007604:	2301      	movs	r3, #1
 8007606:	e0be      	b.n	8007786 <HAL_RCC_ClockConfig+0x256>
 8007608:	f000 f8ce 	bl	80077a8 <HAL_RCC_GetSysClockFreq>
 800760c:	6138      	str	r0, [r7, #16]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	4a61      	ldr	r2, [pc, #388]	; (8007798 <HAL_RCC_ClockConfig+0x268>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d909      	bls.n	800762a <HAL_RCC_ClockConfig+0xfa>
 8007616:	4b5f      	ldr	r3, [pc, #380]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800761e:	4a5d      	ldr	r2, [pc, #372]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	6093      	str	r3, [r2, #8]
 8007626:	2380      	movs	r3, #128	; 0x80
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	4b5a      	ldr	r3, [pc, #360]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f023 0203 	bic.w	r2, r3, #3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	4957      	ldr	r1, [pc, #348]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 8007638:	4313      	orrs	r3, r2
 800763a:	608b      	str	r3, [r1, #8]
 800763c:	f7fd fa20 	bl	8004a80 <HAL_GetTick>
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	e00a      	b.n	800765a <HAL_RCC_ClockConfig+0x12a>
 8007644:	f7fd fa1c 	bl	8004a80 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007652:	4293      	cmp	r3, r2
 8007654:	d901      	bls.n	800765a <HAL_RCC_ClockConfig+0x12a>
 8007656:	2303      	movs	r3, #3
 8007658:	e095      	b.n	8007786 <HAL_RCC_ClockConfig+0x256>
 800765a:	4b4e      	ldr	r3, [pc, #312]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f003 020c 	and.w	r2, r3, #12
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	429a      	cmp	r2, r3
 800766a:	d1eb      	bne.n	8007644 <HAL_RCC_ClockConfig+0x114>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d023      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x190>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <HAL_RCC_ClockConfig+0x160>
 8007684:	4b43      	ldr	r3, [pc, #268]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	4a42      	ldr	r2, [pc, #264]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 800768a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800768e:	6093      	str	r3, [r2, #8]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <HAL_RCC_ClockConfig+0x17c>
 800769c:	4b3d      	ldr	r3, [pc, #244]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076a4:	4a3b      	ldr	r2, [pc, #236]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80076a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80076aa:	6093      	str	r3, [r2, #8]
 80076ac:	4b39      	ldr	r3, [pc, #228]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	4936      	ldr	r1, [pc, #216]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	608b      	str	r3, [r1, #8]
 80076be:	e008      	b.n	80076d2 <HAL_RCC_ClockConfig+0x1a2>
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b80      	cmp	r3, #128	; 0x80
 80076c4:	d105      	bne.n	80076d2 <HAL_RCC_ClockConfig+0x1a2>
 80076c6:	4b33      	ldr	r3, [pc, #204]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	4a32      	ldr	r2, [pc, #200]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 80076cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076d0:	6093      	str	r3, [r2, #8]
 80076d2:	4b2f      	ldr	r3, [pc, #188]	; (8007790 <HAL_RCC_ClockConfig+0x260>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 030f 	and.w	r3, r3, #15
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d21d      	bcs.n	800771c <HAL_RCC_ClockConfig+0x1ec>
 80076e0:	4b2b      	ldr	r3, [pc, #172]	; (8007790 <HAL_RCC_ClockConfig+0x260>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f023 020f 	bic.w	r2, r3, #15
 80076e8:	4929      	ldr	r1, [pc, #164]	; (8007790 <HAL_RCC_ClockConfig+0x260>)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	600b      	str	r3, [r1, #0]
 80076f0:	f7fd f9c6 	bl	8004a80 <HAL_GetTick>
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	e00a      	b.n	800770e <HAL_RCC_ClockConfig+0x1de>
 80076f8:	f7fd f9c2 	bl	8004a80 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	f241 3288 	movw	r2, #5000	; 0x1388
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <HAL_RCC_ClockConfig+0x1de>
 800770a:	2303      	movs	r3, #3
 800770c:	e03b      	b.n	8007786 <HAL_RCC_ClockConfig+0x256>
 800770e:	4b20      	ldr	r3, [pc, #128]	; (8007790 <HAL_RCC_ClockConfig+0x260>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d1ed      	bne.n	80076f8 <HAL_RCC_ClockConfig+0x1c8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <HAL_RCC_ClockConfig+0x20a>
 8007728:	4b1a      	ldr	r3, [pc, #104]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	4917      	ldr	r1, [pc, #92]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 8007736:	4313      	orrs	r3, r2
 8007738:	608b      	str	r3, [r1, #8]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d009      	beq.n	800775a <HAL_RCC_ClockConfig+0x22a>
 8007746:	4b13      	ldr	r3, [pc, #76]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	490f      	ldr	r1, [pc, #60]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 8007756:	4313      	orrs	r3, r2
 8007758:	608b      	str	r3, [r1, #8]
 800775a:	f000 f825 	bl	80077a8 <HAL_RCC_GetSysClockFreq>
 800775e:	4601      	mov	r1, r0
 8007760:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <HAL_RCC_ClockConfig+0x264>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	091b      	lsrs	r3, r3, #4
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	4a0c      	ldr	r2, [pc, #48]	; (800779c <HAL_RCC_ClockConfig+0x26c>)
 800776c:	5cd3      	ldrb	r3, [r2, r3]
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	fa21 f303 	lsr.w	r3, r1, r3
 8007776:	4a0a      	ldr	r2, [pc, #40]	; (80077a0 <HAL_RCC_ClockConfig+0x270>)
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <HAL_RCC_ClockConfig+0x274>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f7fd f932 	bl	80049e8 <HAL_InitTick>
 8007784:	4603      	mov	r3, r0
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	40022000 	.word	0x40022000
 8007794:	40021000 	.word	0x40021000
 8007798:	04c4b400 	.word	0x04c4b400
 800779c:	0800ab60 	.word	0x0800ab60
 80077a0:	20000000 	.word	0x20000000
 80077a4:	20000004 	.word	0x20000004

080077a8 <HAL_RCC_GetSysClockFreq>:
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4b2c      	ldr	r3, [pc, #176]	; (8007860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 030c 	and.w	r3, r3, #12
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d102      	bne.n	80077c0 <HAL_RCC_GetSysClockFreq+0x18>
 80077ba:	4b2a      	ldr	r3, [pc, #168]	; (8007864 <HAL_RCC_GetSysClockFreq+0xbc>)
 80077bc:	613b      	str	r3, [r7, #16]
 80077be:	e047      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0xa8>
 80077c0:	4b27      	ldr	r3, [pc, #156]	; (8007860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 030c 	and.w	r3, r3, #12
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d102      	bne.n	80077d2 <HAL_RCC_GetSysClockFreq+0x2a>
 80077cc:	4b26      	ldr	r3, [pc, #152]	; (8007868 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	e03e      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0xa8>
 80077d2:	4b23      	ldr	r3, [pc, #140]	; (8007860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 030c 	and.w	r3, r3, #12
 80077da:	2b0c      	cmp	r3, #12
 80077dc:	d136      	bne.n	800784c <HAL_RCC_GetSysClockFreq+0xa4>
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	4b1d      	ldr	r3, [pc, #116]	; (8007860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	091b      	lsrs	r3, r3, #4
 80077ee:	f003 030f 	and.w	r3, r3, #15
 80077f2:	3301      	adds	r3, #1
 80077f4:	60bb      	str	r3, [r7, #8]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d10c      	bne.n	8007816 <HAL_RCC_GetSysClockFreq+0x6e>
 80077fc:	4a1a      	ldr	r2, [pc, #104]	; (8007868 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	fbb2 f3f3 	udiv	r3, r2, r3
 8007804:	4a16      	ldr	r2, [pc, #88]	; (8007860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007806:	68d2      	ldr	r2, [r2, #12]
 8007808:	0a12      	lsrs	r2, r2, #8
 800780a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800780e:	fb02 f303 	mul.w	r3, r2, r3
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e00c      	b.n	8007830 <HAL_RCC_GetSysClockFreq+0x88>
 8007816:	4a13      	ldr	r2, [pc, #76]	; (8007864 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	fbb2 f3f3 	udiv	r3, r2, r3
 800781e:	4a10      	ldr	r2, [pc, #64]	; (8007860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007820:	68d2      	ldr	r2, [r2, #12]
 8007822:	0a12      	lsrs	r2, r2, #8
 8007824:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007828:	fb02 f303 	mul.w	r3, r2, r3
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	bf00      	nop
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	0e5b      	lsrs	r3, r3, #25
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	3301      	adds	r3, #1
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	607b      	str	r3, [r7, #4]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	fbb2 f3f3 	udiv	r3, r2, r3
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	e001      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0xa8>
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	4618      	mov	r0, r3
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40021000 	.word	0x40021000
 8007864:	00f42400 	.word	0x00f42400
 8007868:	016e3600 	.word	0x016e3600

0800786c <HAL_RCC_GetHCLKFreq>:
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
 8007870:	4b03      	ldr	r3, [pc, #12]	; (8007880 <HAL_RCC_GetHCLKFreq+0x14>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4618      	mov	r0, r3
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20000000 	.word	0x20000000

08007884 <HAL_RCC_GetPCLK1Freq>:
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
 8007888:	f7ff fff0 	bl	800786c <HAL_RCC_GetHCLKFreq>
 800788c:	4601      	mov	r1, r0
 800788e:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	0a1b      	lsrs	r3, r3, #8
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	4a04      	ldr	r2, [pc, #16]	; (80078ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800789a:	5cd3      	ldrb	r3, [r2, r3]
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	fa21 f303 	lsr.w	r3, r1, r3
 80078a4:	4618      	mov	r0, r3
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40021000 	.word	0x40021000
 80078ac:	0800ab70 	.word	0x0800ab70

080078b0 <HAL_RCC_GetPCLK2Freq>:
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	f7ff ffda 	bl	800786c <HAL_RCC_GetHCLKFreq>
 80078b8:	4601      	mov	r1, r0
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	0adb      	lsrs	r3, r3, #11
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80078c6:	5cd3      	ldrb	r3, [r2, r3]
 80078c8:	f003 031f 	and.w	r3, r3, #31
 80078cc:	fa21 f303 	lsr.w	r3, r1, r3
 80078d0:	4618      	mov	r0, r3
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40021000 	.word	0x40021000
 80078d8:	0800ab70 	.word	0x0800ab70

080078dc <RCC_GetSysClockFreqFromPLLSource>:
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4b1e      	ldr	r3, [pc, #120]	; (800795c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	4b1b      	ldr	r3, [pc, #108]	; (800795c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	091b      	lsrs	r3, r3, #4
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	3301      	adds	r3, #1
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d10c      	bne.n	800791a <RCC_GetSysClockFreqFromPLLSource+0x3e>
 8007900:	4a17      	ldr	r2, [pc, #92]	; (8007960 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	fbb2 f3f3 	udiv	r3, r2, r3
 8007908:	4a14      	ldr	r2, [pc, #80]	; (800795c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800790a:	68d2      	ldr	r2, [r2, #12]
 800790c:	0a12      	lsrs	r2, r2, #8
 800790e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007912:	fb02 f303 	mul.w	r3, r2, r3
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	e00c      	b.n	8007934 <RCC_GetSysClockFreqFromPLLSource+0x58>
 800791a:	4a12      	ldr	r2, [pc, #72]	; (8007964 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007922:	4a0e      	ldr	r2, [pc, #56]	; (800795c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007924:	68d2      	ldr	r2, [r2, #12]
 8007926:	0a12      	lsrs	r2, r2, #8
 8007928:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800792c:	fb02 f303 	mul.w	r3, r2, r3
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	bf00      	nop
 8007934:	4b09      	ldr	r3, [pc, #36]	; (800795c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	0e5b      	lsrs	r3, r3, #25
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	3301      	adds	r3, #1
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	60bb      	str	r3, [r7, #8]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	fbb2 f3f3 	udiv	r3, r2, r3
 800794c:	607b      	str	r3, [r7, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4618      	mov	r0, r3
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	40021000 	.word	0x40021000
 8007960:	016e3600 	.word	0x016e3600
 8007964:	00f42400 	.word	0x00f42400

08007968 <HAL_RCCEx_PeriphCLKConfig>:
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	2300      	movs	r3, #0
 8007972:	74fb      	strb	r3, [r7, #19]
 8007974:	2300      	movs	r3, #0
 8007976:	74bb      	strb	r3, [r7, #18]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 8098 	beq.w	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007986:	2300      	movs	r3, #0
 8007988:	747b      	strb	r3, [r7, #17]
 800798a:	4b43      	ldr	r3, [pc, #268]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800798c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10d      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8007996:	4b40      	ldr	r3, [pc, #256]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799a:	4a3f      	ldr	r2, [pc, #252]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800799c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a0:	6593      	str	r3, [r2, #88]	; 0x58
 80079a2:	4b3d      	ldr	r3, [pc, #244]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079aa:	60bb      	str	r3, [r7, #8]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2301      	movs	r3, #1
 80079b0:	747b      	strb	r3, [r7, #17]
 80079b2:	4b3a      	ldr	r3, [pc, #232]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a39      	ldr	r2, [pc, #228]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	f7fd f85f 	bl	8004a80 <HAL_GetTick>
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	e009      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x72>
 80079c6:	f7fd f85b 	bl	8004a80 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d902      	bls.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x72>
 80079d4:	2303      	movs	r3, #3
 80079d6:	74fb      	strb	r3, [r7, #19]
 80079d8:	e005      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80079da:	4b30      	ldr	r3, [pc, #192]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0ef      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80079e6:	7cfb      	ldrb	r3, [r7, #19]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d159      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80079ec:	4b2a      	ldr	r3, [pc, #168]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d01e      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d019      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a08:	4b23      	ldr	r3, [pc, #140]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	4b20      	ldr	r3, [pc, #128]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1a:	4a1f      	ldr	r2, [pc, #124]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a24:	4b1c      	ldr	r3, [pc, #112]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2a:	4a1b      	ldr	r2, [pc, #108]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a34:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d016      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007a46:	f7fd f81b 	bl	8004a80 <HAL_GetTick>
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	e00b      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a4e:	f7fd f817 	bl	8004a80 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d902      	bls.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007a60:	2303      	movs	r3, #3
 8007a62:	74fb      	strb	r3, [r7, #19]
 8007a64:	e006      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0ec      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8007a74:	7cfb      	ldrb	r3, [r7, #19]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10b      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8007a7a:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	4903      	ldr	r1, [pc, #12]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a90:	e008      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007a92:	7cfb      	ldrb	r3, [r7, #19]
 8007a94:	74bb      	strb	r3, [r7, #18]
 8007a96:	e005      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007a98:	40021000 	.word	0x40021000
 8007a9c:	40007000 	.word	0x40007000
 8007aa0:	7cfb      	ldrb	r3, [r7, #19]
 8007aa2:	74bb      	strb	r3, [r7, #18]
 8007aa4:	7c7b      	ldrb	r3, [r7, #17]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d105      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007aaa:	4ba6      	ldr	r3, [pc, #664]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aae:	4aa5      	ldr	r2, [pc, #660]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8007ac2:	4ba0      	ldr	r3, [pc, #640]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac8:	f023 0203 	bic.w	r2, r3, #3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	499c      	ldr	r1, [pc, #624]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007ae4:	4b97      	ldr	r3, [pc, #604]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aea:	f023 020c 	bic.w	r2, r3, #12
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	4994      	ldr	r1, [pc, #592]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007b06:	4b8f      	ldr	r3, [pc, #572]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	498b      	ldr	r1, [pc, #556]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0308 	and.w	r3, r3, #8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8007b28:	4b86      	ldr	r3, [pc, #536]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	4983      	ldr	r1, [pc, #524]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0320 	and.w	r3, r3, #32
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007b4a:	4b7e      	ldr	r3, [pc, #504]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	497a      	ldr	r1, [pc, #488]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007b6c:	4b75      	ldr	r3, [pc, #468]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	4972      	ldr	r1, [pc, #456]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8007b8e:	4b6d      	ldr	r3, [pc, #436]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	4969      	ldr	r1, [pc, #420]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007bb0:	4b64      	ldr	r3, [pc, #400]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	4961      	ldr	r1, [pc, #388]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007bd2:	4b5c      	ldr	r3, [pc, #368]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	4958      	ldr	r1, [pc, #352]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d015      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007bf4:	4b53      	ldr	r3, [pc, #332]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	4950      	ldr	r1, [pc, #320]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c12:	d105      	bne.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007c14:	4b4b      	ldr	r3, [pc, #300]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	4a4a      	ldr	r2, [pc, #296]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c1e:	60d3      	str	r3, [r2, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d015      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8007c2c:	4b45      	ldr	r3, [pc, #276]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	4942      	ldr	r1, [pc, #264]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c4a:	d105      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8007c4c:	4b3d      	ldr	r3, [pc, #244]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a3c      	ldr	r2, [pc, #240]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c56:	60d3      	str	r3, [r2, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d015      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007c64:	4b37      	ldr	r3, [pc, #220]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	4934      	ldr	r1, [pc, #208]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c82:	d105      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007c84:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	4a2e      	ldr	r2, [pc, #184]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c8e:	60d3      	str	r3, [r2, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007c9c:	4b29      	ldr	r3, [pc, #164]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007caa:	4926      	ldr	r1, [pc, #152]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cba:	d105      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007cbc:	4b21      	ldr	r3, [pc, #132]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4a20      	ldr	r2, [pc, #128]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cc6:	60d3      	str	r3, [r2, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8007cd4:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	4918      	ldr	r1, [pc, #96]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cf2:	d105      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8007cf4:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a12      	ldr	r2, [pc, #72]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cfe:	60d3      	str	r3, [r2, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007d0c:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1a:	490a      	ldr	r1, [pc, #40]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d2a:	d105      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4a04      	ldr	r2, [pc, #16]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d36:	60d3      	str	r3, [r2, #12]
 8007d38:	7cbb      	ldrb	r3, [r7, #18]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40021000 	.word	0x40021000

08007d48 <HAL_TIM_Base_Start_IT>:
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d001      	beq.n	8007d60 <HAL_TIM_Base_Start_IT+0x18>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e04a      	b.n	8007df6 <HAL_TIM_Base_Start_IT+0xae>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	60da      	str	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a21      	ldr	r2, [pc, #132]	; (8007e04 <HAL_TIM_Base_Start_IT+0xbc>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d018      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8a:	d013      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1d      	ldr	r2, [pc, #116]	; (8007e08 <HAL_TIM_Base_Start_IT+0xc0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00e      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a1c      	ldr	r2, [pc, #112]	; (8007e0c <HAL_TIM_Base_Start_IT+0xc4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d009      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a1a      	ldr	r2, [pc, #104]	; (8007e10 <HAL_TIM_Base_Start_IT+0xc8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d004      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <HAL_TIM_Base_Start_IT+0xcc>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d115      	bne.n	8007de0 <HAL_TIM_Base_Start_IT+0x98>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	4b17      	ldr	r3, [pc, #92]	; (8007e18 <HAL_TIM_Base_Start_IT+0xd0>)
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b06      	cmp	r3, #6
 8007dc4:	d015      	beq.n	8007df2 <HAL_TIM_Base_Start_IT+0xaa>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dcc:	d011      	beq.n	8007df2 <HAL_TIM_Base_Start_IT+0xaa>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f042 0201 	orr.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e008      	b.n	8007df2 <HAL_TIM_Base_Start_IT+0xaa>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	e000      	b.n	8007df4 <HAL_TIM_Base_Start_IT+0xac>
 8007df2:	bf00      	nop
 8007df4:	2300      	movs	r3, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40012c00 	.word	0x40012c00
 8007e08:	40000400 	.word	0x40000400
 8007e0c:	40000800 	.word	0x40000800
 8007e10:	40013400 	.word	0x40013400
 8007e14:	40014000 	.word	0x40014000
 8007e18:	00010007 	.word	0x00010007

08007e1c <HAL_TIM_PWM_Init>:
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_TIM_PWM_Init+0x12>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e049      	b.n	8007ec2 <HAL_TIM_PWM_Init+0xa6>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <HAL_TIM_PWM_Init+0x2c>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fc f8b4 	bl	8003fb0 <HAL_TIM_PWM_MspInit>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f000 fbf8 	bl	8008650 <TIM_Base_SetConfig>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <HAL_TIM_PWM_Start>:
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <HAL_TIM_PWM_Start+0x24>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	bf14      	ite	ne
 8007ee8:	2301      	movne	r3, #1
 8007eea:	2300      	moveq	r3, #0
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	e03c      	b.n	8007f6a <HAL_TIM_PWM_Start+0x9e>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d109      	bne.n	8007f0a <HAL_TIM_PWM_Start+0x3e>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	bf14      	ite	ne
 8007f02:	2301      	movne	r3, #1
 8007f04:	2300      	moveq	r3, #0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	e02f      	b.n	8007f6a <HAL_TIM_PWM_Start+0x9e>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d109      	bne.n	8007f24 <HAL_TIM_PWM_Start+0x58>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	bf14      	ite	ne
 8007f1c:	2301      	movne	r3, #1
 8007f1e:	2300      	moveq	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	e022      	b.n	8007f6a <HAL_TIM_PWM_Start+0x9e>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b0c      	cmp	r3, #12
 8007f28:	d109      	bne.n	8007f3e <HAL_TIM_PWM_Start+0x72>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	bf14      	ite	ne
 8007f36:	2301      	movne	r3, #1
 8007f38:	2300      	moveq	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	e015      	b.n	8007f6a <HAL_TIM_PWM_Start+0x9e>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	d109      	bne.n	8007f58 <HAL_TIM_PWM_Start+0x8c>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	bf14      	ite	ne
 8007f50:	2301      	movne	r3, #1
 8007f52:	2300      	moveq	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	e008      	b.n	8007f6a <HAL_TIM_PWM_Start+0x9e>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	bf14      	ite	ne
 8007f64:	2301      	movne	r3, #1
 8007f66:	2300      	moveq	r3, #0
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <HAL_TIM_PWM_Start+0xa6>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e097      	b.n	80080a2 <HAL_TIM_PWM_Start+0x1d6>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <HAL_TIM_PWM_Start+0xb6>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f80:	e023      	b.n	8007fca <HAL_TIM_PWM_Start+0xfe>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d104      	bne.n	8007f92 <HAL_TIM_PWM_Start+0xc6>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f90:	e01b      	b.n	8007fca <HAL_TIM_PWM_Start+0xfe>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d104      	bne.n	8007fa2 <HAL_TIM_PWM_Start+0xd6>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fa0:	e013      	b.n	8007fca <HAL_TIM_PWM_Start+0xfe>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b0c      	cmp	r3, #12
 8007fa6:	d104      	bne.n	8007fb2 <HAL_TIM_PWM_Start+0xe6>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fb0:	e00b      	b.n	8007fca <HAL_TIM_PWM_Start+0xfe>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b10      	cmp	r3, #16
 8007fb6:	d104      	bne.n	8007fc2 <HAL_TIM_PWM_Start+0xf6>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fc0:	e003      	b.n	8007fca <HAL_TIM_PWM_Start+0xfe>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fec2 	bl	8008d5c <TIM_CCxChannelCmd>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a33      	ldr	r2, [pc, #204]	; (80080ac <HAL_TIM_PWM_Start+0x1e0>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <HAL_TIM_PWM_Start+0x13e>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a32      	ldr	r2, [pc, #200]	; (80080b0 <HAL_TIM_PWM_Start+0x1e4>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00e      	beq.n	800800a <HAL_TIM_PWM_Start+0x13e>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a30      	ldr	r2, [pc, #192]	; (80080b4 <HAL_TIM_PWM_Start+0x1e8>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d009      	beq.n	800800a <HAL_TIM_PWM_Start+0x13e>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a2f      	ldr	r2, [pc, #188]	; (80080b8 <HAL_TIM_PWM_Start+0x1ec>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d004      	beq.n	800800a <HAL_TIM_PWM_Start+0x13e>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a2d      	ldr	r2, [pc, #180]	; (80080bc <HAL_TIM_PWM_Start+0x1f0>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d101      	bne.n	800800e <HAL_TIM_PWM_Start+0x142>
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <HAL_TIM_PWM_Start+0x144>
 800800e:	2300      	movs	r3, #0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d007      	beq.n	8008024 <HAL_TIM_PWM_Start+0x158>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008022:	645a      	str	r2, [r3, #68]	; 0x44
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a20      	ldr	r2, [pc, #128]	; (80080ac <HAL_TIM_PWM_Start+0x1e0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d018      	beq.n	8008060 <HAL_TIM_PWM_Start+0x194>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008036:	d013      	beq.n	8008060 <HAL_TIM_PWM_Start+0x194>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a20      	ldr	r2, [pc, #128]	; (80080c0 <HAL_TIM_PWM_Start+0x1f4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d00e      	beq.n	8008060 <HAL_TIM_PWM_Start+0x194>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a1f      	ldr	r2, [pc, #124]	; (80080c4 <HAL_TIM_PWM_Start+0x1f8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d009      	beq.n	8008060 <HAL_TIM_PWM_Start+0x194>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <HAL_TIM_PWM_Start+0x1e4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d004      	beq.n	8008060 <HAL_TIM_PWM_Start+0x194>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a16      	ldr	r2, [pc, #88]	; (80080b4 <HAL_TIM_PWM_Start+0x1e8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d115      	bne.n	800808c <HAL_TIM_PWM_Start+0x1c0>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <HAL_TIM_PWM_Start+0x1fc>)
 8008068:	4013      	ands	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b06      	cmp	r3, #6
 8008070:	d015      	beq.n	800809e <HAL_TIM_PWM_Start+0x1d2>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008078:	d011      	beq.n	800809e <HAL_TIM_PWM_Start+0x1d2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0201 	orr.w	r2, r2, #1
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	e008      	b.n	800809e <HAL_TIM_PWM_Start+0x1d2>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	e000      	b.n	80080a0 <HAL_TIM_PWM_Start+0x1d4>
 800809e:	bf00      	nop
 80080a0:	2300      	movs	r3, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40012c00 	.word	0x40012c00
 80080b0:	40013400 	.word	0x40013400
 80080b4:	40014000 	.word	0x40014000
 80080b8:	40014400 	.word	0x40014400
 80080bc:	40014800 	.word	0x40014800
 80080c0:	40000400 	.word	0x40000400
 80080c4:	40000800 	.word	0x40000800
 80080c8:	00010007 	.word	0x00010007

080080cc <HAL_TIM_IRQHandler>:
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d122      	bne.n	8008128 <HAL_TIM_IRQHandler+0x5c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d11b      	bne.n	8008128 <HAL_TIM_IRQHandler+0x5c>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0202 	mvn.w	r2, #2
 80080f8:	611a      	str	r2, [r3, #16]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	771a      	strb	r2, [r3, #28]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f003 0303 	and.w	r3, r3, #3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_TIM_IRQHandler+0x4a>
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa80 	bl	8008614 <HAL_TIM_IC_CaptureCallback>
 8008114:	e005      	b.n	8008122 <HAL_TIM_IRQHandler+0x56>
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa72 	bl	8008600 <HAL_TIM_OC_DelayElapsedCallback>
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fa83 	bl	8008628 <HAL_TIM_PWM_PulseFinishedCallback>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	771a      	strb	r2, [r3, #28]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b04      	cmp	r3, #4
 8008134:	d122      	bne.n	800817c <HAL_TIM_IRQHandler+0xb0>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b04      	cmp	r3, #4
 8008142:	d11b      	bne.n	800817c <HAL_TIM_IRQHandler+0xb0>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0204 	mvn.w	r2, #4
 800814c:	611a      	str	r2, [r3, #16]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	771a      	strb	r2, [r3, #28]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_TIM_IRQHandler+0x9e>
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa56 	bl	8008614 <HAL_TIM_IC_CaptureCallback>
 8008168:	e005      	b.n	8008176 <HAL_TIM_IRQHandler+0xaa>
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fa48 	bl	8008600 <HAL_TIM_OC_DelayElapsedCallback>
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fa59 	bl	8008628 <HAL_TIM_PWM_PulseFinishedCallback>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	771a      	strb	r2, [r3, #28]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 0308 	and.w	r3, r3, #8
 8008186:	2b08      	cmp	r3, #8
 8008188:	d122      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x104>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b08      	cmp	r3, #8
 8008196:	d11b      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x104>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0208 	mvn.w	r2, #8
 80081a0:	611a      	str	r2, [r3, #16]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2204      	movs	r2, #4
 80081a6:	771a      	strb	r2, [r3, #28]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_TIM_IRQHandler+0xf2>
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa2c 	bl	8008614 <HAL_TIM_IC_CaptureCallback>
 80081bc:	e005      	b.n	80081ca <HAL_TIM_IRQHandler+0xfe>
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa1e 	bl	8008600 <HAL_TIM_OC_DelayElapsedCallback>
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa2f 	bl	8008628 <HAL_TIM_PWM_PulseFinishedCallback>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	771a      	strb	r2, [r3, #28]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	2b10      	cmp	r3, #16
 80081dc:	d122      	bne.n	8008224 <HAL_TIM_IRQHandler+0x158>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	d11b      	bne.n	8008224 <HAL_TIM_IRQHandler+0x158>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0210 	mvn.w	r2, #16
 80081f4:	611a      	str	r2, [r3, #16]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2208      	movs	r2, #8
 80081fa:	771a      	strb	r2, [r3, #28]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0x146>
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa02 	bl	8008614 <HAL_TIM_IC_CaptureCallback>
 8008210:	e005      	b.n	800821e <HAL_TIM_IRQHandler+0x152>
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f9f4 	bl	8008600 <HAL_TIM_OC_DelayElapsedCallback>
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fa05 	bl	8008628 <HAL_TIM_PWM_PulseFinishedCallback>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b01      	cmp	r3, #1
 8008230:	d10e      	bne.n	8008250 <HAL_TIM_IRQHandler+0x184>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b01      	cmp	r3, #1
 800823e:	d107      	bne.n	8008250 <HAL_TIM_IRQHandler+0x184>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0201 	mvn.w	r2, #1
 8008248:	611a      	str	r2, [r3, #16]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f9ce 	bl	80085ec <HAL_TIM_PeriodElapsedCallback>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825a:	2b80      	cmp	r3, #128	; 0x80
 800825c:	d10e      	bne.n	800827c <HAL_TIM_IRQHandler+0x1b0>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008268:	2b80      	cmp	r3, #128	; 0x80
 800826a:	d107      	bne.n	800827c <HAL_TIM_IRQHandler+0x1b0>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008274:	611a      	str	r2, [r3, #16]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 ff76 	bl	8009168 <HAL_TIMEx_BreakCallback>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828a:	d10e      	bne.n	80082aa <HAL_TIM_IRQHandler+0x1de>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008296:	2b80      	cmp	r3, #128	; 0x80
 8008298:	d107      	bne.n	80082aa <HAL_TIM_IRQHandler+0x1de>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082a2:	611a      	str	r2, [r3, #16]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 ff69 	bl	800917c <HAL_TIMEx_Break2Callback>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	d10e      	bne.n	80082d6 <HAL_TIM_IRQHandler+0x20a>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	d107      	bne.n	80082d6 <HAL_TIM_IRQHandler+0x20a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082ce:	611a      	str	r2, [r3, #16]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9b3 	bl	800863c <HAL_TIM_TriggerCallback>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b20      	cmp	r3, #32
 80082e2:	d10e      	bne.n	8008302 <HAL_TIM_IRQHandler+0x236>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d107      	bne.n	8008302 <HAL_TIM_IRQHandler+0x236>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0220 	mvn.w	r2, #32
 80082fa:	611a      	str	r2, [r3, #16]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 ff29 	bl	8009154 <HAL_TIMEx_CommutCallback>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800830c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008310:	d10f      	bne.n	8008332 <HAL_TIM_IRQHandler+0x266>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800831c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008320:	d107      	bne.n	8008332 <HAL_TIM_IRQHandler+0x266>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800832a:	611a      	str	r2, [r3, #16]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 ff2f 	bl	8009190 <HAL_TIMEx_EncoderIndexCallback>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800833c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008340:	d10f      	bne.n	8008362 <HAL_TIM_IRQHandler+0x296>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800834c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008350:	d107      	bne.n	8008362 <HAL_TIM_IRQHandler+0x296>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800835a:	611a      	str	r2, [r3, #16]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 ff21 	bl	80091a4 <HAL_TIMEx_DirectionChangeCallback>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800836c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008370:	d10f      	bne.n	8008392 <HAL_TIM_IRQHandler+0x2c6>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800837c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008380:	d107      	bne.n	8008392 <HAL_TIM_IRQHandler+0x2c6>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800838a:	611a      	str	r2, [r3, #16]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 ff13 	bl	80091b8 <HAL_TIMEx_IndexErrorCallback>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800839c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083a0:	d10f      	bne.n	80083c2 <HAL_TIM_IRQHandler+0x2f6>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083b0:	d107      	bne.n	80083c2 <HAL_TIM_IRQHandler+0x2f6>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80083ba:	611a      	str	r2, [r3, #16]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 ff05 	bl	80091cc <HAL_TIMEx_TransitionErrorCallback>
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <HAL_TIM_PWM_ConfigChannel>:
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e0fd      	b.n	80085e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b14      	cmp	r3, #20
 80083f2:	f200 80f0 	bhi.w	80085d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80083f6:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80083f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fc:	08008451 	.word	0x08008451
 8008400:	080085d7 	.word	0x080085d7
 8008404:	080085d7 	.word	0x080085d7
 8008408:	080085d7 	.word	0x080085d7
 800840c:	08008491 	.word	0x08008491
 8008410:	080085d7 	.word	0x080085d7
 8008414:	080085d7 	.word	0x080085d7
 8008418:	080085d7 	.word	0x080085d7
 800841c:	080084d3 	.word	0x080084d3
 8008420:	080085d7 	.word	0x080085d7
 8008424:	080085d7 	.word	0x080085d7
 8008428:	080085d7 	.word	0x080085d7
 800842c:	08008513 	.word	0x08008513
 8008430:	080085d7 	.word	0x080085d7
 8008434:	080085d7 	.word	0x080085d7
 8008438:	080085d7 	.word	0x080085d7
 800843c:	08008555 	.word	0x08008555
 8008440:	080085d7 	.word	0x080085d7
 8008444:	080085d7 	.word	0x080085d7
 8008448:	080085d7 	.word	0x080085d7
 800844c:	08008595 	.word	0x08008595
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f98a 	bl	8008770 <TIM_OC1_SetConfig>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699a      	ldr	r2, [r3, #24]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0208 	orr.w	r2, r2, #8
 800846a:	619a      	str	r2, [r3, #24]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0204 	bic.w	r2, r2, #4
 800847a:	619a      	str	r2, [r3, #24]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6999      	ldr	r1, [r3, #24]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	691a      	ldr	r2, [r3, #16]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	619a      	str	r2, [r3, #24]
 800848e:	e0a3      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f9fa 	bl	8008890 <TIM_OC2_SetConfig>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084aa:	619a      	str	r2, [r3, #24]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699a      	ldr	r2, [r3, #24]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084ba:	619a      	str	r2, [r3, #24]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6999      	ldr	r1, [r3, #24]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	021a      	lsls	r2, r3, #8
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	619a      	str	r2, [r3, #24]
 80084d0:	e082      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fa63 	bl	80089a4 <TIM_OC3_SetConfig>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69da      	ldr	r2, [r3, #28]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0208 	orr.w	r2, r2, #8
 80084ec:	61da      	str	r2, [r3, #28]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	69da      	ldr	r2, [r3, #28]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0204 	bic.w	r2, r2, #4
 80084fc:	61da      	str	r2, [r3, #28]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69d9      	ldr	r1, [r3, #28]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	61da      	str	r2, [r3, #28]
 8008510:	e062      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 facb 	bl	8008ab4 <TIM_OC4_SetConfig>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800852c:	61da      	str	r2, [r3, #28]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800853c:	61da      	str	r2, [r3, #28]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69d9      	ldr	r1, [r3, #28]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	021a      	lsls	r2, r3, #8
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	61da      	str	r2, [r3, #28]
 8008552:	e041      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fb34 	bl	8008bc8 <TIM_OC5_SetConfig>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0208 	orr.w	r2, r2, #8
 800856e:	651a      	str	r2, [r3, #80]	; 0x50
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0204 	bic.w	r2, r2, #4
 800857e:	651a      	str	r2, [r3, #80]	; 0x50
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	691a      	ldr	r2, [r3, #16]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	651a      	str	r2, [r3, #80]	; 0x50
 8008592:	e021      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fb78 	bl	8008c90 <TIM_OC6_SetConfig>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ae:	651a      	str	r2, [r3, #80]	; 0x50
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085be:	651a      	str	r2, [r3, #80]	; 0x50
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	021a      	lsls	r2, r3, #8
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	651a      	str	r2, [r3, #80]	; 0x50
 80085d4:	e000      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
 80085d6:	bf00      	nop
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085e0:	2300      	movs	r3, #0
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop

080085ec <HAL_TIM_PeriodElapsedCallback>:
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_TIM_OC_DelayElapsedCallback>:
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_TIM_IC_CaptureCallback>:
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_TIM_TriggerCallback>:
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <TIM_Base_SetConfig>:
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a3c      	ldr	r2, [pc, #240]	; (8008754 <TIM_Base_SetConfig+0x104>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d00f      	beq.n	8008688 <TIM_Base_SetConfig+0x38>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866e:	d00b      	beq.n	8008688 <TIM_Base_SetConfig+0x38>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a39      	ldr	r2, [pc, #228]	; (8008758 <TIM_Base_SetConfig+0x108>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d007      	beq.n	8008688 <TIM_Base_SetConfig+0x38>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a38      	ldr	r2, [pc, #224]	; (800875c <TIM_Base_SetConfig+0x10c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d003      	beq.n	8008688 <TIM_Base_SetConfig+0x38>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a37      	ldr	r2, [pc, #220]	; (8008760 <TIM_Base_SetConfig+0x110>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d108      	bne.n	800869a <TIM_Base_SetConfig+0x4a>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a2d      	ldr	r2, [pc, #180]	; (8008754 <TIM_Base_SetConfig+0x104>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d01b      	beq.n	80086da <TIM_Base_SetConfig+0x8a>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a8:	d017      	beq.n	80086da <TIM_Base_SetConfig+0x8a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a2a      	ldr	r2, [pc, #168]	; (8008758 <TIM_Base_SetConfig+0x108>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d013      	beq.n	80086da <TIM_Base_SetConfig+0x8a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a29      	ldr	r2, [pc, #164]	; (800875c <TIM_Base_SetConfig+0x10c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d00f      	beq.n	80086da <TIM_Base_SetConfig+0x8a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a28      	ldr	r2, [pc, #160]	; (8008760 <TIM_Base_SetConfig+0x110>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d00b      	beq.n	80086da <TIM_Base_SetConfig+0x8a>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a27      	ldr	r2, [pc, #156]	; (8008764 <TIM_Base_SetConfig+0x114>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d007      	beq.n	80086da <TIM_Base_SetConfig+0x8a>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a26      	ldr	r2, [pc, #152]	; (8008768 <TIM_Base_SetConfig+0x118>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d003      	beq.n	80086da <TIM_Base_SetConfig+0x8a>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a25      	ldr	r2, [pc, #148]	; (800876c <TIM_Base_SetConfig+0x11c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d108      	bne.n	80086ec <TIM_Base_SetConfig+0x9c>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	62da      	str	r2, [r3, #44]	; 0x2c
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	629a      	str	r2, [r3, #40]	; 0x28
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a10      	ldr	r2, [pc, #64]	; (8008754 <TIM_Base_SetConfig+0x104>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d00f      	beq.n	8008738 <TIM_Base_SetConfig+0xe8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a11      	ldr	r2, [pc, #68]	; (8008760 <TIM_Base_SetConfig+0x110>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d00b      	beq.n	8008738 <TIM_Base_SetConfig+0xe8>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a10      	ldr	r2, [pc, #64]	; (8008764 <TIM_Base_SetConfig+0x114>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d007      	beq.n	8008738 <TIM_Base_SetConfig+0xe8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a0f      	ldr	r2, [pc, #60]	; (8008768 <TIM_Base_SetConfig+0x118>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d003      	beq.n	8008738 <TIM_Base_SetConfig+0xe8>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a0e      	ldr	r2, [pc, #56]	; (800876c <TIM_Base_SetConfig+0x11c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d103      	bne.n	8008740 <TIM_Base_SetConfig+0xf0>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	631a      	str	r2, [r3, #48]	; 0x30
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	615a      	str	r2, [r3, #20]
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	40012c00 	.word	0x40012c00
 8008758:	40000400 	.word	0x40000400
 800875c:	40000800 	.word	0x40000800
 8008760:	40013400 	.word	0x40013400
 8008764:	40014000 	.word	0x40014000
 8008768:	40014400 	.word	0x40014400
 800876c:	40014800 	.word	0x40014800

08008770 <TIM_OC1_SetConfig>:
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f023 0201 	bic.w	r2, r3, #1
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	621a      	str	r2, [r3, #32]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	613b      	str	r3, [r7, #16]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800879e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f023 0302 	bic.w	r3, r3, #2
 80087bc:	617b      	str	r3, [r7, #20]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a2c      	ldr	r2, [pc, #176]	; (800887c <TIM_OC1_SetConfig+0x10c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00f      	beq.n	80087f0 <TIM_OC1_SetConfig+0x80>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a2b      	ldr	r2, [pc, #172]	; (8008880 <TIM_OC1_SetConfig+0x110>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00b      	beq.n	80087f0 <TIM_OC1_SetConfig+0x80>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a2a      	ldr	r2, [pc, #168]	; (8008884 <TIM_OC1_SetConfig+0x114>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d007      	beq.n	80087f0 <TIM_OC1_SetConfig+0x80>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a29      	ldr	r2, [pc, #164]	; (8008888 <TIM_OC1_SetConfig+0x118>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d003      	beq.n	80087f0 <TIM_OC1_SetConfig+0x80>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a28      	ldr	r2, [pc, #160]	; (800888c <TIM_OC1_SetConfig+0x11c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d10c      	bne.n	800880a <TIM_OC1_SetConfig+0x9a>
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f023 0308 	bic.w	r3, r3, #8
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	4313      	orrs	r3, r2
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f023 0304 	bic.w	r3, r3, #4
 8008808:	617b      	str	r3, [r7, #20]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a1b      	ldr	r2, [pc, #108]	; (800887c <TIM_OC1_SetConfig+0x10c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d00f      	beq.n	8008832 <TIM_OC1_SetConfig+0xc2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a1a      	ldr	r2, [pc, #104]	; (8008880 <TIM_OC1_SetConfig+0x110>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00b      	beq.n	8008832 <TIM_OC1_SetConfig+0xc2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a19      	ldr	r2, [pc, #100]	; (8008884 <TIM_OC1_SetConfig+0x114>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d007      	beq.n	8008832 <TIM_OC1_SetConfig+0xc2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a18      	ldr	r2, [pc, #96]	; (8008888 <TIM_OC1_SetConfig+0x118>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d003      	beq.n	8008832 <TIM_OC1_SetConfig+0xc2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a17      	ldr	r2, [pc, #92]	; (800888c <TIM_OC1_SetConfig+0x11c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d111      	bne.n	8008856 <TIM_OC1_SetConfig+0xe6>
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	4313      	orrs	r3, r2
 800884a:	613b      	str	r3, [r7, #16]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	605a      	str	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	619a      	str	r2, [r3, #24]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	635a      	str	r2, [r3, #52]	; 0x34
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	621a      	str	r2, [r3, #32]
 8008870:	bf00      	nop
 8008872:	371c      	adds	r7, #28
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	40012c00 	.word	0x40012c00
 8008880:	40013400 	.word	0x40013400
 8008884:	40014000 	.word	0x40014000
 8008888:	40014400 	.word	0x40014400
 800888c:	40014800 	.word	0x40014800

08008890 <TIM_OC2_SetConfig>:
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0210 	bic.w	r2, r3, #16
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	621a      	str	r2, [r3, #32]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f023 0320 	bic.w	r3, r3, #32
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a28      	ldr	r2, [pc, #160]	; (8008990 <TIM_OC2_SetConfig+0x100>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d003      	beq.n	80088fc <TIM_OC2_SetConfig+0x6c>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a27      	ldr	r2, [pc, #156]	; (8008994 <TIM_OC2_SetConfig+0x104>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d10d      	bne.n	8008918 <TIM_OC2_SetConfig+0x88>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	4313      	orrs	r3, r2
 800890e:	617b      	str	r3, [r7, #20]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008916:	617b      	str	r3, [r7, #20]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a1d      	ldr	r2, [pc, #116]	; (8008990 <TIM_OC2_SetConfig+0x100>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d00f      	beq.n	8008940 <TIM_OC2_SetConfig+0xb0>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a1c      	ldr	r2, [pc, #112]	; (8008994 <TIM_OC2_SetConfig+0x104>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d00b      	beq.n	8008940 <TIM_OC2_SetConfig+0xb0>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a1b      	ldr	r2, [pc, #108]	; (8008998 <TIM_OC2_SetConfig+0x108>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d007      	beq.n	8008940 <TIM_OC2_SetConfig+0xb0>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a1a      	ldr	r2, [pc, #104]	; (800899c <TIM_OC2_SetConfig+0x10c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d003      	beq.n	8008940 <TIM_OC2_SetConfig+0xb0>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a19      	ldr	r2, [pc, #100]	; (80089a0 <TIM_OC2_SetConfig+0x110>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d113      	bne.n	8008968 <TIM_OC2_SetConfig+0xd8>
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	4313      	orrs	r3, r2
 800895a:	613b      	str	r3, [r7, #16]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	4313      	orrs	r3, r2
 8008966:	613b      	str	r3, [r7, #16]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	605a      	str	r2, [r3, #4]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	619a      	str	r2, [r3, #24]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	639a      	str	r2, [r3, #56]	; 0x38
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	621a      	str	r2, [r3, #32]
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	40012c00 	.word	0x40012c00
 8008994:	40013400 	.word	0x40013400
 8008998:	40014000 	.word	0x40014000
 800899c:	40014400 	.word	0x40014400
 80089a0:	40014800 	.word	0x40014800

080089a4 <TIM_OC3_SetConfig>:
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	621a      	str	r2, [r3, #32]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0303 	bic.w	r3, r3, #3
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	021b      	lsls	r3, r3, #8
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a27      	ldr	r2, [pc, #156]	; (8008aa0 <TIM_OC3_SetConfig+0xfc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d003      	beq.n	8008a0e <TIM_OC3_SetConfig+0x6a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a26      	ldr	r2, [pc, #152]	; (8008aa4 <TIM_OC3_SetConfig+0x100>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d10d      	bne.n	8008a2a <TIM_OC3_SetConfig+0x86>
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	021b      	lsls	r3, r3, #8
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a28:	617b      	str	r3, [r7, #20]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a1c      	ldr	r2, [pc, #112]	; (8008aa0 <TIM_OC3_SetConfig+0xfc>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00f      	beq.n	8008a52 <TIM_OC3_SetConfig+0xae>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a1b      	ldr	r2, [pc, #108]	; (8008aa4 <TIM_OC3_SetConfig+0x100>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00b      	beq.n	8008a52 <TIM_OC3_SetConfig+0xae>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a1a      	ldr	r2, [pc, #104]	; (8008aa8 <TIM_OC3_SetConfig+0x104>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d007      	beq.n	8008a52 <TIM_OC3_SetConfig+0xae>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a19      	ldr	r2, [pc, #100]	; (8008aac <TIM_OC3_SetConfig+0x108>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d003      	beq.n	8008a52 <TIM_OC3_SetConfig+0xae>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a18      	ldr	r2, [pc, #96]	; (8008ab0 <TIM_OC3_SetConfig+0x10c>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d113      	bne.n	8008a7a <TIM_OC3_SetConfig+0xd6>
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a60:	613b      	str	r3, [r7, #16]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	011b      	lsls	r3, r3, #4
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	011b      	lsls	r3, r3, #4
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	605a      	str	r2, [r3, #4]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	61da      	str	r2, [r3, #28]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	621a      	str	r2, [r3, #32]
 8008a94:	bf00      	nop
 8008a96:	371c      	adds	r7, #28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	40012c00 	.word	0x40012c00
 8008aa4:	40013400 	.word	0x40013400
 8008aa8:	40014000 	.word	0x40014000
 8008aac:	40014400 	.word	0x40014400
 8008ab0:	40014800 	.word	0x40014800

08008ab4 <TIM_OC4_SetConfig>:
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	621a      	str	r2, [r3, #32]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	613b      	str	r3, [r7, #16]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	021b      	lsls	r3, r3, #8
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	031b      	lsls	r3, r3, #12
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a28      	ldr	r2, [pc, #160]	; (8008bb4 <TIM_OC4_SetConfig+0x100>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d003      	beq.n	8008b20 <TIM_OC4_SetConfig+0x6c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a27      	ldr	r2, [pc, #156]	; (8008bb8 <TIM_OC4_SetConfig+0x104>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d10d      	bne.n	8008b3c <TIM_OC4_SetConfig+0x88>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	031b      	lsls	r3, r3, #12
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	617b      	str	r3, [r7, #20]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <TIM_OC4_SetConfig+0x100>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00f      	beq.n	8008b64 <TIM_OC4_SetConfig+0xb0>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a1c      	ldr	r2, [pc, #112]	; (8008bb8 <TIM_OC4_SetConfig+0x104>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d00b      	beq.n	8008b64 <TIM_OC4_SetConfig+0xb0>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a1b      	ldr	r2, [pc, #108]	; (8008bbc <TIM_OC4_SetConfig+0x108>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d007      	beq.n	8008b64 <TIM_OC4_SetConfig+0xb0>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a1a      	ldr	r2, [pc, #104]	; (8008bc0 <TIM_OC4_SetConfig+0x10c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d003      	beq.n	8008b64 <TIM_OC4_SetConfig+0xb0>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a19      	ldr	r2, [pc, #100]	; (8008bc4 <TIM_OC4_SetConfig+0x110>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d113      	bne.n	8008b8c <TIM_OC4_SetConfig+0xd8>
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	019b      	lsls	r3, r3, #6
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	019b      	lsls	r3, r3, #6
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	605a      	str	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	61da      	str	r2, [r3, #28]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	621a      	str	r2, [r3, #32]
 8008ba6:	bf00      	nop
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	40012c00 	.word	0x40012c00
 8008bb8:	40013400 	.word	0x40013400
 8008bbc:	40014000 	.word	0x40014000
 8008bc0:	40014400 	.word	0x40014400
 8008bc4:	40014800 	.word	0x40014800

08008bc8 <TIM_OC5_SetConfig>:
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	621a      	str	r2, [r3, #32]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	613b      	str	r3, [r7, #16]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	041b      	lsls	r3, r3, #16
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a17      	ldr	r2, [pc, #92]	; (8008c7c <TIM_OC5_SetConfig+0xb4>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00f      	beq.n	8008c42 <TIM_OC5_SetConfig+0x7a>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a16      	ldr	r2, [pc, #88]	; (8008c80 <TIM_OC5_SetConfig+0xb8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00b      	beq.n	8008c42 <TIM_OC5_SetConfig+0x7a>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a15      	ldr	r2, [pc, #84]	; (8008c84 <TIM_OC5_SetConfig+0xbc>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d007      	beq.n	8008c42 <TIM_OC5_SetConfig+0x7a>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a14      	ldr	r2, [pc, #80]	; (8008c88 <TIM_OC5_SetConfig+0xc0>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d003      	beq.n	8008c42 <TIM_OC5_SetConfig+0x7a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a13      	ldr	r2, [pc, #76]	; (8008c8c <TIM_OC5_SetConfig+0xc4>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d109      	bne.n	8008c56 <TIM_OC5_SetConfig+0x8e>
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	605a      	str	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	651a      	str	r2, [r3, #80]	; 0x50
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	649a      	str	r2, [r3, #72]	; 0x48
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	621a      	str	r2, [r3, #32]
 8008c70:	bf00      	nop
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	40012c00 	.word	0x40012c00
 8008c80:	40013400 	.word	0x40013400
 8008c84:	40014000 	.word	0x40014000
 8008c88:	40014400 	.word	0x40014400
 8008c8c:	40014800 	.word	0x40014800

08008c90 <TIM_OC6_SetConfig>:
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	021b      	lsls	r3, r3, #8
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	051b      	lsls	r3, r3, #20
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <TIM_OC6_SetConfig+0xb8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00f      	beq.n	8008d0c <TIM_OC6_SetConfig+0x7c>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a17      	ldr	r2, [pc, #92]	; (8008d4c <TIM_OC6_SetConfig+0xbc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00b      	beq.n	8008d0c <TIM_OC6_SetConfig+0x7c>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <TIM_OC6_SetConfig+0xc0>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d007      	beq.n	8008d0c <TIM_OC6_SetConfig+0x7c>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a15      	ldr	r2, [pc, #84]	; (8008d54 <TIM_OC6_SetConfig+0xc4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d003      	beq.n	8008d0c <TIM_OC6_SetConfig+0x7c>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <TIM_OC6_SetConfig+0xc8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d109      	bne.n	8008d20 <TIM_OC6_SetConfig+0x90>
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	029b      	lsls	r3, r3, #10
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	605a      	str	r2, [r3, #4]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	651a      	str	r2, [r3, #80]	; 0x50
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	64da      	str	r2, [r3, #76]	; 0x4c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	621a      	str	r2, [r3, #32]
 8008d3a:	bf00      	nop
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40012c00 	.word	0x40012c00
 8008d4c:	40013400 	.word	0x40013400
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40014400 	.word	0x40014400
 8008d58:	40014800 	.word	0x40014800

08008d5c <TIM_CCxChannelCmd>:
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f003 031f 	and.w	r3, r3, #31
 8008d6e:	2201      	movs	r2, #1
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	617b      	str	r3, [r7, #20]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6a1a      	ldr	r2, [r3, #32]
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	401a      	ands	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	621a      	str	r2, [r3, #32]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a1a      	ldr	r2, [r3, #32]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f003 031f 	and.w	r3, r3, #31
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	fa01 f303 	lsl.w	r3, r1, r3
 8008d94:	431a      	orrs	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	621a      	str	r2, [r3, #32]
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
	...

08008da8 <HAL_TIMEx_PWMN_Start>:
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d109      	bne.n	8008dcc <HAL_TIMEx_PWMN_Start+0x24>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	bf14      	ite	ne
 8008dc4:	2301      	movne	r3, #1
 8008dc6:	2300      	moveq	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	e022      	b.n	8008e12 <HAL_TIMEx_PWMN_Start+0x6a>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d109      	bne.n	8008de6 <HAL_TIMEx_PWMN_Start+0x3e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	bf14      	ite	ne
 8008dde:	2301      	movne	r3, #1
 8008de0:	2300      	moveq	r3, #0
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	e015      	b.n	8008e12 <HAL_TIMEx_PWMN_Start+0x6a>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d109      	bne.n	8008e00 <HAL_TIMEx_PWMN_Start+0x58>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	bf14      	ite	ne
 8008df8:	2301      	movne	r3, #1
 8008dfa:	2300      	moveq	r3, #0
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	e008      	b.n	8008e12 <HAL_TIMEx_PWMN_Start+0x6a>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	bf14      	ite	ne
 8008e0c:	2301      	movne	r3, #1
 8008e0e:	2300      	moveq	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <HAL_TIMEx_PWMN_Start+0x72>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e069      	b.n	8008eee <HAL_TIMEx_PWMN_Start+0x146>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d104      	bne.n	8008e2a <HAL_TIMEx_PWMN_Start+0x82>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e28:	e013      	b.n	8008e52 <HAL_TIMEx_PWMN_Start+0xaa>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	d104      	bne.n	8008e3a <HAL_TIMEx_PWMN_Start+0x92>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2202      	movs	r2, #2
 8008e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e38:	e00b      	b.n	8008e52 <HAL_TIMEx_PWMN_Start+0xaa>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d104      	bne.n	8008e4a <HAL_TIMEx_PWMN_Start+0xa2>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e48:	e003      	b.n	8008e52 <HAL_TIMEx_PWMN_Start+0xaa>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2204      	movs	r2, #4
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f9c0 	bl	80091e0 <TIM_CCxNChannelCmd>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a20      	ldr	r2, [pc, #128]	; (8008ef8 <HAL_TIMEx_PWMN_Start+0x150>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d018      	beq.n	8008eac <HAL_TIMEx_PWMN_Start+0x104>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e82:	d013      	beq.n	8008eac <HAL_TIMEx_PWMN_Start+0x104>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1c      	ldr	r2, [pc, #112]	; (8008efc <HAL_TIMEx_PWMN_Start+0x154>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d00e      	beq.n	8008eac <HAL_TIMEx_PWMN_Start+0x104>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1b      	ldr	r2, [pc, #108]	; (8008f00 <HAL_TIMEx_PWMN_Start+0x158>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d009      	beq.n	8008eac <HAL_TIMEx_PWMN_Start+0x104>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a19      	ldr	r2, [pc, #100]	; (8008f04 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d004      	beq.n	8008eac <HAL_TIMEx_PWMN_Start+0x104>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a18      	ldr	r2, [pc, #96]	; (8008f08 <HAL_TIMEx_PWMN_Start+0x160>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d115      	bne.n	8008ed8 <HAL_TIMEx_PWMN_Start+0x130>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	4b16      	ldr	r3, [pc, #88]	; (8008f0c <HAL_TIMEx_PWMN_Start+0x164>)
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b06      	cmp	r3, #6
 8008ebc:	d015      	beq.n	8008eea <HAL_TIMEx_PWMN_Start+0x142>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec4:	d011      	beq.n	8008eea <HAL_TIMEx_PWMN_Start+0x142>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0201 	orr.w	r2, r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	e008      	b.n	8008eea <HAL_TIMEx_PWMN_Start+0x142>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	e000      	b.n	8008eec <HAL_TIMEx_PWMN_Start+0x144>
 8008eea:	bf00      	nop
 8008eec:	2300      	movs	r3, #0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	40012c00 	.word	0x40012c00
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40013400 	.word	0x40013400
 8008f08:	40014000 	.word	0x40014000
 8008f0c:	00010007 	.word	0x00010007

08008f10 <HAL_TIMEx_MasterConfigSynchronization>:
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e065      	b.n	8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	60bb      	str	r3, [r7, #8]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a2c      	ldr	r2, [pc, #176]	; (8009000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d004      	beq.n	8008f5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a2b      	ldr	r2, [pc, #172]	; (8009004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d108      	bne.n	8008f6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	605a      	str	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a1b      	ldr	r2, [pc, #108]	; (8009000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d018      	beq.n	8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f9e:	d013      	beq.n	8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a18      	ldr	r2, [pc, #96]	; (8009008 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00e      	beq.n	8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a17      	ldr	r2, [pc, #92]	; (800900c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d009      	beq.n	8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a12      	ldr	r2, [pc, #72]	; (8009004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d004      	beq.n	8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a13      	ldr	r2, [pc, #76]	; (8009010 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d10c      	bne.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fce:	60bb      	str	r3, [r7, #8]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60bb      	str	r3, [r7, #8]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	609a      	str	r2, [r3, #8]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	40012c00 	.word	0x40012c00
 8009004:	40013400 	.word	0x40013400
 8009008:	40000400 	.word	0x40000400
 800900c:	40000800 	.word	0x40000800
 8009010:	40014000 	.word	0x40014000

08009014 <HAL_TIMEx_ConfigBreakDeadTime>:
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	2300      	movs	r3, #0
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800902c:	2302      	movs	r3, #2
 800902e:	e087      	b.n	8009140 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	4313      	orrs	r3, r2
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	4313      	orrs	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4313      	orrs	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	4313      	orrs	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	041b      	lsls	r3, r3, #16
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a27      	ldr	r2, [pc, #156]	; (800914c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d004      	beq.n	80090be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a25      	ldr	r2, [pc, #148]	; (8009150 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d106      	bne.n	80090cc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a1e      	ldr	r2, [pc, #120]	; (800914c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d004      	beq.n	80090e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a1d      	ldr	r2, [pc, #116]	; (8009150 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d126      	bne.n	800912e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ea:	051b      	lsls	r3, r3, #20
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	4313      	orrs	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a0e      	ldr	r2, [pc, #56]	; (800914c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d004      	beq.n	8009120 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a0d      	ldr	r2, [pc, #52]	; (8009150 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d106      	bne.n	800912e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	645a      	str	r2, [r3, #68]	; 0x44
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800913e:	2300      	movs	r3, #0
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	40012c00 	.word	0x40012c00
 8009150:	40013400 	.word	0x40013400

08009154 <HAL_TIMEx_CommutCallback>:
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_TIMEx_BreakCallback>:
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_TIMEx_Break2Callback>:
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_TIMEx_EncoderIndexCallback>:
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIMEx_DirectionChangeCallback>:
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIMEx_IndexErrorCallback>:
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIMEx_TransitionErrorCallback>:
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <TIM_CCxNChannelCmd>:
 80091e0:	b480      	push	{r7}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f003 031f 	and.w	r3, r3, #31
 80091f2:	2204      	movs	r2, #4
 80091f4:	fa02 f303 	lsl.w	r3, r2, r3
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6a1a      	ldr	r2, [r3, #32]
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	43db      	mvns	r3, r3
 8009202:	401a      	ands	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	621a      	str	r2, [r3, #32]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6a1a      	ldr	r2, [r3, #32]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f003 031f 	and.w	r3, r3, #31
 8009212:	6879      	ldr	r1, [r7, #4]
 8009214:	fa01 f303 	lsl.w	r3, r1, r3
 8009218:	431a      	orrs	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	621a      	str	r2, [r3, #32]
 800921e:	bf00      	nop
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <HAL_UART_Init>:
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <HAL_UART_Init+0x12>
 8009238:	2301      	movs	r3, #1
 800923a:	e042      	b.n	80092c2 <HAL_UART_Init+0x98>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009242:	2b00      	cmp	r3, #0
 8009244:	d106      	bne.n	8009254 <HAL_UART_Init+0x2a>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7fa ff60 	bl	8004114 <HAL_UART_MspInit>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2224      	movs	r2, #36	; 0x24
 8009258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 0201 	bic.w	r2, r2, #1
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fae7 	bl	8009840 <UART_SetConfig>
 8009272:	4603      	mov	r3, r0
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_UART_Init+0x52>
 8009278:	2301      	movs	r3, #1
 800927a:	e022      	b.n	80092c2 <HAL_UART_Init+0x98>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <HAL_UART_Init+0x60>
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fd83 	bl	8009d90 <UART_AdvFeatureConfig>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009298:	605a      	str	r2, [r3, #4]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092a8:	609a      	str	r2, [r3, #8]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 0201 	orr.w	r2, r2, #1
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fe0a 	bl	8009ed4 <UART_CheckIdleState>
 80092c0:	4603      	mov	r3, r0
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <HAL_UART_Transmit_DMA>:
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80fb      	strh	r3, [r7, #6]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092e0:	2b20      	cmp	r3, #32
 80092e2:	d168      	bne.n	80093b6 <HAL_UART_Transmit_DMA+0xea>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <HAL_UART_Transmit_DMA+0x24>
 80092ea:	88fb      	ldrh	r3, [r7, #6]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <HAL_UART_Transmit_DMA+0x28>
 80092f0:	2301      	movs	r3, #1
 80092f2:	e061      	b.n	80093b8 <HAL_UART_Transmit_DMA+0xec>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_UART_Transmit_DMA+0x36>
 80092fe:	2302      	movs	r3, #2
 8009300:	e05a      	b.n	80093b8 <HAL_UART_Transmit_DMA+0xec>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	651a      	str	r2, [r3, #80]	; 0x50
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	88fa      	ldrh	r2, [r7, #6]
 8009314:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	88fa      	ldrh	r2, [r7, #6]
 800931c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2221      	movs	r2, #33	; 0x21
 800932c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009334:	2b00      	cmp	r3, #0
 8009336:	d02c      	beq.n	8009392 <HAL_UART_Transmit_DMA+0xc6>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800933c:	4a20      	ldr	r2, [pc, #128]	; (80093c0 <HAL_UART_Transmit_DMA+0xf4>)
 800933e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009344:	4a1f      	ldr	r2, [pc, #124]	; (80093c4 <HAL_UART_Transmit_DMA+0xf8>)
 8009346:	631a      	str	r2, [r3, #48]	; 0x30
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800934c:	4a1e      	ldr	r2, [pc, #120]	; (80093c8 <HAL_UART_Transmit_DMA+0xfc>)
 800934e:	635a      	str	r2, [r3, #52]	; 0x34
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009354:	2200      	movs	r2, #0
 8009356:	639a      	str	r2, [r3, #56]	; 0x38
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009360:	4619      	mov	r1, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3328      	adds	r3, #40	; 0x28
 8009368:	461a      	mov	r2, r3
 800936a:	88fb      	ldrh	r3, [r7, #6]
 800936c:	f7fd f916 	bl	800659c <HAL_DMA_Start_IT>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00d      	beq.n	8009392 <HAL_UART_Transmit_DMA+0xc6>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2210      	movs	r2, #16
 800937a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800938e:	2301      	movs	r3, #1
 8009390:	e012      	b.n	80093b8 <HAL_UART_Transmit_DMA+0xec>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2240      	movs	r2, #64	; 0x40
 8009398:	621a      	str	r2, [r3, #32]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093b0:	609a      	str	r2, [r3, #8]
 80093b2:	2300      	movs	r3, #0
 80093b4:	e000      	b.n	80093b8 <HAL_UART_Transmit_DMA+0xec>
 80093b6:	2302      	movs	r3, #2
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	0800a0e7 	.word	0x0800a0e7
 80093c4:	0800a13b 	.word	0x0800a13b
 80093c8:	0800a1dd 	.word	0x0800a1dd

080093cc <HAL_UART_Receive_DMA>:
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	d170      	bne.n	80094c6 <HAL_UART_Receive_DMA+0xfa>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d002      	beq.n	80093f0 <HAL_UART_Receive_DMA+0x24>
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <HAL_UART_Receive_DMA+0x28>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e069      	b.n	80094c8 <HAL_UART_Receive_DMA+0xfc>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <HAL_UART_Receive_DMA+0x36>
 80093fe:	2302      	movs	r3, #2
 8009400:	e062      	b.n	80094c8 <HAL_UART_Receive_DMA+0xfc>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	659a      	str	r2, [r3, #88]	; 0x58
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	88fa      	ldrh	r2, [r7, #6]
 8009414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2222      	movs	r2, #34	; 0x22
 8009424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800942c:	2b00      	cmp	r3, #0
 800942e:	d02c      	beq.n	800948a <HAL_UART_Receive_DMA+0xbe>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009434:	4a26      	ldr	r2, [pc, #152]	; (80094d0 <HAL_UART_Receive_DMA+0x104>)
 8009436:	62da      	str	r2, [r3, #44]	; 0x2c
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800943c:	4a25      	ldr	r2, [pc, #148]	; (80094d4 <HAL_UART_Receive_DMA+0x108>)
 800943e:	631a      	str	r2, [r3, #48]	; 0x30
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009444:	4a24      	ldr	r2, [pc, #144]	; (80094d8 <HAL_UART_Receive_DMA+0x10c>)
 8009446:	635a      	str	r2, [r3, #52]	; 0x34
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800944c:	2200      	movs	r2, #0
 800944e:	639a      	str	r2, [r3, #56]	; 0x38
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3324      	adds	r3, #36	; 0x24
 800945a:	4619      	mov	r1, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009460:	461a      	mov	r2, r3
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	f7fd f89a 	bl	800659c <HAL_DMA_Start_IT>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00d      	beq.n	800948a <HAL_UART_Receive_DMA+0xbe>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2210      	movs	r2, #16
 8009472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2220      	movs	r2, #32
 8009482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009486:	2301      	movs	r3, #1
 8009488:	e01e      	b.n	80094c8 <HAL_UART_Receive_DMA+0xfc>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f042 0201 	orr.w	r2, r2, #1
 80094b0:	609a      	str	r2, [r3, #8]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689a      	ldr	r2, [r3, #8]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094c0:	609a      	str	r2, [r3, #8]
 80094c2:	2300      	movs	r3, #0
 80094c4:	e000      	b.n	80094c8 <HAL_UART_Receive_DMA+0xfc>
 80094c6:	2302      	movs	r3, #2
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	0800a157 	.word	0x0800a157
 80094d4:	0800a1c1 	.word	0x0800a1c1
 80094d8:	0800a1dd 	.word	0x0800a1dd

080094dc <HAL_UART_IRQHandler>:
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	61fb      	str	r3, [r7, #28]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	61bb      	str	r3, [r7, #24]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8009502:	4013      	ands	r3, r2
 8009504:	613b      	str	r3, [r7, #16]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d118      	bne.n	800953e <HAL_UART_IRQHandler+0x62>
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b00      	cmp	r3, #0
 8009514:	d013      	beq.n	800953e <HAL_UART_IRQHandler+0x62>
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d104      	bne.n	800952a <HAL_UART_IRQHandler+0x4e>
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d009      	beq.n	800953e <HAL_UART_IRQHandler+0x62>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8145 	beq.w	80097be <HAL_UART_IRQHandler+0x2e2>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	4798      	blx	r3
 800953c:	e13f      	b.n	80097be <HAL_UART_IRQHandler+0x2e2>
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80e8 	beq.w	8009716 <HAL_UART_IRQHandler+0x23a>
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	4ba1      	ldr	r3, [pc, #644]	; (80097d0 <HAL_UART_IRQHandler+0x2f4>)
 800954a:	4013      	ands	r3, r2
 800954c:	2b00      	cmp	r3, #0
 800954e:	d105      	bne.n	800955c <HAL_UART_IRQHandler+0x80>
 8009550:	69ba      	ldr	r2, [r7, #24]
 8009552:	4ba0      	ldr	r3, [pc, #640]	; (80097d4 <HAL_UART_IRQHandler+0x2f8>)
 8009554:	4013      	ands	r3, r2
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 80dd 	beq.w	8009716 <HAL_UART_IRQHandler+0x23a>
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b00      	cmp	r3, #0
 8009564:	d010      	beq.n	8009588 <HAL_UART_IRQHandler+0xac>
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <HAL_UART_IRQHandler+0xac>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2201      	movs	r2, #1
 8009576:	621a      	str	r2, [r3, #32]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800957e:	f043 0201 	orr.w	r2, r3, #1
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d010      	beq.n	80095b4 <HAL_UART_IRQHandler+0xd8>
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00b      	beq.n	80095b4 <HAL_UART_IRQHandler+0xd8>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2202      	movs	r2, #2
 80095a2:	621a      	str	r2, [r3, #32]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095aa:	f043 0204 	orr.w	r2, r3, #4
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	f003 0304 	and.w	r3, r3, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d010      	beq.n	80095e0 <HAL_UART_IRQHandler+0x104>
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00b      	beq.n	80095e0 <HAL_UART_IRQHandler+0x104>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2204      	movs	r2, #4
 80095ce:	621a      	str	r2, [r3, #32]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d6:	f043 0202 	orr.w	r2, r3, #2
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d015      	beq.n	8009616 <HAL_UART_IRQHandler+0x13a>
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <HAL_UART_IRQHandler+0x122>
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	4b76      	ldr	r3, [pc, #472]	; (80097d0 <HAL_UART_IRQHandler+0x2f4>)
 80095f8:	4013      	ands	r3, r2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <HAL_UART_IRQHandler+0x13a>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2208      	movs	r2, #8
 8009604:	621a      	str	r2, [r3, #32]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800960c:	f043 0208 	orr.w	r2, r3, #8
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800961c:	2b00      	cmp	r3, #0
 800961e:	d011      	beq.n	8009644 <HAL_UART_IRQHandler+0x168>
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00c      	beq.n	8009644 <HAL_UART_IRQHandler+0x168>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009632:	621a      	str	r2, [r3, #32]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800963a:	f043 0220 	orr.w	r2, r3, #32
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 80b9 	beq.w	80097c2 <HAL_UART_IRQHandler+0x2e6>
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b00      	cmp	r3, #0
 8009658:	d011      	beq.n	800967e <HAL_UART_IRQHandler+0x1a2>
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d104      	bne.n	800966e <HAL_UART_IRQHandler+0x192>
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d007      	beq.n	800967e <HAL_UART_IRQHandler+0x1a2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_UART_IRQHandler+0x1a2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	4798      	blx	r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009690:	2b40      	cmp	r3, #64	; 0x40
 8009692:	d004      	beq.n	800969e <HAL_UART_IRQHandler+0x1c2>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800969a:	2b00      	cmp	r3, #0
 800969c:	d031      	beq.n	8009702 <HAL_UART_IRQHandler+0x226>
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fcfe 	bl	800a0a0 <UART_EndRxTransfer>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ae:	2b40      	cmp	r3, #64	; 0x40
 80096b0:	d123      	bne.n	80096fa <HAL_UART_IRQHandler+0x21e>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689a      	ldr	r2, [r3, #8]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096c0:	609a      	str	r2, [r3, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d013      	beq.n	80096f2 <HAL_UART_IRQHandler+0x216>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ce:	4a42      	ldr	r2, [pc, #264]	; (80097d8 <HAL_UART_IRQHandler+0x2fc>)
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fc ffdb 	bl	8006692 <HAL_DMA_Abort_IT>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d017      	beq.n	8009712 <HAL_UART_IRQHandler+0x236>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80096ec:	4610      	mov	r0, r2
 80096ee:	4798      	blx	r3
 80096f0:	e00f      	b.n	8009712 <HAL_UART_IRQHandler+0x236>
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f89a 	bl	800982c <HAL_UART_ErrorCallback>
 80096f8:	e00b      	b.n	8009712 <HAL_UART_IRQHandler+0x236>
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f896 	bl	800982c <HAL_UART_ErrorCallback>
 8009700:	e007      	b.n	8009712 <HAL_UART_IRQHandler+0x236>
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f892 	bl	800982c <HAL_UART_ErrorCallback>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009710:	e057      	b.n	80097c2 <HAL_UART_IRQHandler+0x2e6>
 8009712:	bf00      	nop
 8009714:	e055      	b.n	80097c2 <HAL_UART_IRQHandler+0x2e6>
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00d      	beq.n	800973c <HAL_UART_IRQHandler+0x260>
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d008      	beq.n	800973c <HAL_UART_IRQHandler+0x260>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009732:	621a      	str	r2, [r3, #32]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fdc1 	bl	800a2bc <HAL_UARTEx_WakeupCallback>
 800973a:	e045      	b.n	80097c8 <HAL_UART_IRQHandler+0x2ec>
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009742:	2b00      	cmp	r3, #0
 8009744:	d012      	beq.n	800976c <HAL_UART_IRQHandler+0x290>
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974c:	2b00      	cmp	r3, #0
 800974e:	d104      	bne.n	800975a <HAL_UART_IRQHandler+0x27e>
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d008      	beq.n	800976c <HAL_UART_IRQHandler+0x290>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975e:	2b00      	cmp	r3, #0
 8009760:	d031      	beq.n	80097c6 <HAL_UART_IRQHandler+0x2ea>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	4798      	blx	r3
 800976a:	e02c      	b.n	80097c6 <HAL_UART_IRQHandler+0x2ea>
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <HAL_UART_IRQHandler+0x2ac>
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <HAL_UART_IRQHandler+0x2ac>
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fd81 	bl	800a288 <UART_EndTransmit_IT>
 8009786:	e01f      	b.n	80097c8 <HAL_UART_IRQHandler+0x2ec>
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d008      	beq.n	80097a4 <HAL_UART_IRQHandler+0x2c8>
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <HAL_UART_IRQHandler+0x2c8>
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fda1 	bl	800a2e4 <HAL_UARTEx_TxFifoEmptyCallback>
 80097a2:	e011      	b.n	80097c8 <HAL_UART_IRQHandler+0x2ec>
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00c      	beq.n	80097c8 <HAL_UART_IRQHandler+0x2ec>
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da09      	bge.n	80097c8 <HAL_UART_IRQHandler+0x2ec>
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fd8b 	bl	800a2d0 <HAL_UARTEx_RxFifoFullCallback>
 80097ba:	bf00      	nop
 80097bc:	e004      	b.n	80097c8 <HAL_UART_IRQHandler+0x2ec>
 80097be:	bf00      	nop
 80097c0:	e002      	b.n	80097c8 <HAL_UART_IRQHandler+0x2ec>
 80097c2:	bf00      	nop
 80097c4:	e000      	b.n	80097c8 <HAL_UART_IRQHandler+0x2ec>
 80097c6:	bf00      	nop
 80097c8:	3720      	adds	r7, #32
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	10000001 	.word	0x10000001
 80097d4:	04000120 	.word	0x04000120
 80097d8:	0800a25d 	.word	0x0800a25d

080097dc <HAL_UART_TxCpltCallback>:
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_UART_TxHalfCpltCallback>:
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_UART_RxCpltCallback>:
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_UART_RxHalfCpltCallback>:
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_UART_ErrorCallback>:
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <UART_SetConfig>:
 8009840:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009844:	b088      	sub	sp, #32
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	2300      	movs	r3, #0
 800984c:	76bb      	strb	r3, [r7, #26]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	431a      	orrs	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	431a      	orrs	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	4313      	orrs	r3, r2
 8009864:	61fb      	str	r3, [r7, #28]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	4313      	orrs	r3, r2
 800986e:	61fb      	str	r3, [r7, #28]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	4bb0      	ldr	r3, [pc, #704]	; (8009b38 <UART_SetConfig+0x2f8>)
 8009878:	4013      	ands	r3, r2
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6812      	ldr	r2, [r2, #0]
 800987e:	69f9      	ldr	r1, [r7, #28]
 8009880:	430b      	orrs	r3, r1
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	430a      	orrs	r2, r1
 8009898:	605a      	str	r2, [r3, #4]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	61fb      	str	r3, [r7, #28]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4aa5      	ldr	r2, [pc, #660]	; (8009b3c <UART_SetConfig+0x2fc>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d004      	beq.n	80098b4 <UART_SetConfig+0x74>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61fb      	str	r3, [r7, #28]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80098be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	6812      	ldr	r2, [r2, #0]
 80098c6:	69f9      	ldr	r1, [r7, #28]
 80098c8:	430b      	orrs	r3, r1
 80098ca:	6093      	str	r3, [r2, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	f023 010f 	bic.w	r1, r3, #15
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a96      	ldr	r2, [pc, #600]	; (8009b40 <UART_SetConfig+0x300>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d121      	bne.n	8009930 <UART_SetConfig+0xf0>
 80098ec:	4b95      	ldr	r3, [pc, #596]	; (8009b44 <UART_SetConfig+0x304>)
 80098ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d816      	bhi.n	8009928 <UART_SetConfig+0xe8>
 80098fa:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <UART_SetConfig+0xc0>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	08009911 	.word	0x08009911
 8009904:	0800991d 	.word	0x0800991d
 8009908:	08009917 	.word	0x08009917
 800990c:	08009923 	.word	0x08009923
 8009910:	2301      	movs	r3, #1
 8009912:	76fb      	strb	r3, [r7, #27]
 8009914:	e0be      	b.n	8009a94 <UART_SetConfig+0x254>
 8009916:	2302      	movs	r3, #2
 8009918:	76fb      	strb	r3, [r7, #27]
 800991a:	e0bb      	b.n	8009a94 <UART_SetConfig+0x254>
 800991c:	2304      	movs	r3, #4
 800991e:	76fb      	strb	r3, [r7, #27]
 8009920:	e0b8      	b.n	8009a94 <UART_SetConfig+0x254>
 8009922:	2308      	movs	r3, #8
 8009924:	76fb      	strb	r3, [r7, #27]
 8009926:	e0b5      	b.n	8009a94 <UART_SetConfig+0x254>
 8009928:	2310      	movs	r3, #16
 800992a:	76fb      	strb	r3, [r7, #27]
 800992c:	bf00      	nop
 800992e:	e0b1      	b.n	8009a94 <UART_SetConfig+0x254>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a84      	ldr	r2, [pc, #528]	; (8009b48 <UART_SetConfig+0x308>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d134      	bne.n	80099a4 <UART_SetConfig+0x164>
 800993a:	4b82      	ldr	r3, [pc, #520]	; (8009b44 <UART_SetConfig+0x304>)
 800993c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009940:	f003 030c 	and.w	r3, r3, #12
 8009944:	2b0c      	cmp	r3, #12
 8009946:	d829      	bhi.n	800999c <UART_SetConfig+0x15c>
 8009948:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <UART_SetConfig+0x110>)
 800994a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994e:	bf00      	nop
 8009950:	08009985 	.word	0x08009985
 8009954:	0800999d 	.word	0x0800999d
 8009958:	0800999d 	.word	0x0800999d
 800995c:	0800999d 	.word	0x0800999d
 8009960:	08009991 	.word	0x08009991
 8009964:	0800999d 	.word	0x0800999d
 8009968:	0800999d 	.word	0x0800999d
 800996c:	0800999d 	.word	0x0800999d
 8009970:	0800998b 	.word	0x0800998b
 8009974:	0800999d 	.word	0x0800999d
 8009978:	0800999d 	.word	0x0800999d
 800997c:	0800999d 	.word	0x0800999d
 8009980:	08009997 	.word	0x08009997
 8009984:	2300      	movs	r3, #0
 8009986:	76fb      	strb	r3, [r7, #27]
 8009988:	e084      	b.n	8009a94 <UART_SetConfig+0x254>
 800998a:	2302      	movs	r3, #2
 800998c:	76fb      	strb	r3, [r7, #27]
 800998e:	e081      	b.n	8009a94 <UART_SetConfig+0x254>
 8009990:	2304      	movs	r3, #4
 8009992:	76fb      	strb	r3, [r7, #27]
 8009994:	e07e      	b.n	8009a94 <UART_SetConfig+0x254>
 8009996:	2308      	movs	r3, #8
 8009998:	76fb      	strb	r3, [r7, #27]
 800999a:	e07b      	b.n	8009a94 <UART_SetConfig+0x254>
 800999c:	2310      	movs	r3, #16
 800999e:	76fb      	strb	r3, [r7, #27]
 80099a0:	bf00      	nop
 80099a2:	e077      	b.n	8009a94 <UART_SetConfig+0x254>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a68      	ldr	r2, [pc, #416]	; (8009b4c <UART_SetConfig+0x30c>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d120      	bne.n	80099f0 <UART_SetConfig+0x1b0>
 80099ae:	4b65      	ldr	r3, [pc, #404]	; (8009b44 <UART_SetConfig+0x304>)
 80099b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099b8:	2b10      	cmp	r3, #16
 80099ba:	d00f      	beq.n	80099dc <UART_SetConfig+0x19c>
 80099bc:	2b10      	cmp	r3, #16
 80099be:	d802      	bhi.n	80099c6 <UART_SetConfig+0x186>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <UART_SetConfig+0x190>
 80099c4:	e010      	b.n	80099e8 <UART_SetConfig+0x1a8>
 80099c6:	2b20      	cmp	r3, #32
 80099c8:	d005      	beq.n	80099d6 <UART_SetConfig+0x196>
 80099ca:	2b30      	cmp	r3, #48	; 0x30
 80099cc:	d009      	beq.n	80099e2 <UART_SetConfig+0x1a2>
 80099ce:	e00b      	b.n	80099e8 <UART_SetConfig+0x1a8>
 80099d0:	2300      	movs	r3, #0
 80099d2:	76fb      	strb	r3, [r7, #27]
 80099d4:	e05e      	b.n	8009a94 <UART_SetConfig+0x254>
 80099d6:	2302      	movs	r3, #2
 80099d8:	76fb      	strb	r3, [r7, #27]
 80099da:	e05b      	b.n	8009a94 <UART_SetConfig+0x254>
 80099dc:	2304      	movs	r3, #4
 80099de:	76fb      	strb	r3, [r7, #27]
 80099e0:	e058      	b.n	8009a94 <UART_SetConfig+0x254>
 80099e2:	2308      	movs	r3, #8
 80099e4:	76fb      	strb	r3, [r7, #27]
 80099e6:	e055      	b.n	8009a94 <UART_SetConfig+0x254>
 80099e8:	2310      	movs	r3, #16
 80099ea:	76fb      	strb	r3, [r7, #27]
 80099ec:	bf00      	nop
 80099ee:	e051      	b.n	8009a94 <UART_SetConfig+0x254>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a56      	ldr	r2, [pc, #344]	; (8009b50 <UART_SetConfig+0x310>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d120      	bne.n	8009a3c <UART_SetConfig+0x1fc>
 80099fa:	4b52      	ldr	r3, [pc, #328]	; (8009b44 <UART_SetConfig+0x304>)
 80099fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a04:	2b40      	cmp	r3, #64	; 0x40
 8009a06:	d00f      	beq.n	8009a28 <UART_SetConfig+0x1e8>
 8009a08:	2b40      	cmp	r3, #64	; 0x40
 8009a0a:	d802      	bhi.n	8009a12 <UART_SetConfig+0x1d2>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <UART_SetConfig+0x1dc>
 8009a10:	e010      	b.n	8009a34 <UART_SetConfig+0x1f4>
 8009a12:	2b80      	cmp	r3, #128	; 0x80
 8009a14:	d005      	beq.n	8009a22 <UART_SetConfig+0x1e2>
 8009a16:	2bc0      	cmp	r3, #192	; 0xc0
 8009a18:	d009      	beq.n	8009a2e <UART_SetConfig+0x1ee>
 8009a1a:	e00b      	b.n	8009a34 <UART_SetConfig+0x1f4>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	76fb      	strb	r3, [r7, #27]
 8009a20:	e038      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a22:	2302      	movs	r3, #2
 8009a24:	76fb      	strb	r3, [r7, #27]
 8009a26:	e035      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	76fb      	strb	r3, [r7, #27]
 8009a2c:	e032      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a2e:	2308      	movs	r3, #8
 8009a30:	76fb      	strb	r3, [r7, #27]
 8009a32:	e02f      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a34:	2310      	movs	r3, #16
 8009a36:	76fb      	strb	r3, [r7, #27]
 8009a38:	bf00      	nop
 8009a3a:	e02b      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a3e      	ldr	r2, [pc, #248]	; (8009b3c <UART_SetConfig+0x2fc>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d124      	bne.n	8009a90 <UART_SetConfig+0x250>
 8009a46:	4b3f      	ldr	r3, [pc, #252]	; (8009b44 <UART_SetConfig+0x304>)
 8009a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a54:	d012      	beq.n	8009a7c <UART_SetConfig+0x23c>
 8009a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a5a:	d802      	bhi.n	8009a62 <UART_SetConfig+0x222>
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d007      	beq.n	8009a70 <UART_SetConfig+0x230>
 8009a60:	e012      	b.n	8009a88 <UART_SetConfig+0x248>
 8009a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a66:	d006      	beq.n	8009a76 <UART_SetConfig+0x236>
 8009a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a6c:	d009      	beq.n	8009a82 <UART_SetConfig+0x242>
 8009a6e:	e00b      	b.n	8009a88 <UART_SetConfig+0x248>
 8009a70:	2300      	movs	r3, #0
 8009a72:	76fb      	strb	r3, [r7, #27]
 8009a74:	e00e      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a76:	2302      	movs	r3, #2
 8009a78:	76fb      	strb	r3, [r7, #27]
 8009a7a:	e00b      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a7c:	2304      	movs	r3, #4
 8009a7e:	76fb      	strb	r3, [r7, #27]
 8009a80:	e008      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a82:	2308      	movs	r3, #8
 8009a84:	76fb      	strb	r3, [r7, #27]
 8009a86:	e005      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	76fb      	strb	r3, [r7, #27]
 8009a8c:	bf00      	nop
 8009a8e:	e001      	b.n	8009a94 <UART_SetConfig+0x254>
 8009a90:	2310      	movs	r3, #16
 8009a92:	76fb      	strb	r3, [r7, #27]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a28      	ldr	r2, [pc, #160]	; (8009b3c <UART_SetConfig+0x2fc>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	f040 80a1 	bne.w	8009be2 <UART_SetConfig+0x3a2>
 8009aa0:	7efb      	ldrb	r3, [r7, #27]
 8009aa2:	2b08      	cmp	r3, #8
 8009aa4:	d823      	bhi.n	8009aee <UART_SetConfig+0x2ae>
 8009aa6:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <UART_SetConfig+0x26c>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009aef 	.word	0x08009aef
 8009ab4:	08009ad9 	.word	0x08009ad9
 8009ab8:	08009aef 	.word	0x08009aef
 8009abc:	08009adf 	.word	0x08009adf
 8009ac0:	08009aef 	.word	0x08009aef
 8009ac4:	08009aef 	.word	0x08009aef
 8009ac8:	08009aef 	.word	0x08009aef
 8009acc:	08009ae7 	.word	0x08009ae7
 8009ad0:	f7fd fed8 	bl	8007884 <HAL_RCC_GetPCLK1Freq>
 8009ad4:	6178      	str	r0, [r7, #20]
 8009ad6:	e00f      	b.n	8009af8 <UART_SetConfig+0x2b8>
 8009ad8:	4b1e      	ldr	r3, [pc, #120]	; (8009b54 <UART_SetConfig+0x314>)
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	e00c      	b.n	8009af8 <UART_SetConfig+0x2b8>
 8009ade:	f7fd fe63 	bl	80077a8 <HAL_RCC_GetSysClockFreq>
 8009ae2:	6178      	str	r0, [r7, #20]
 8009ae4:	e008      	b.n	8009af8 <UART_SetConfig+0x2b8>
 8009ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e004      	b.n	8009af8 <UART_SetConfig+0x2b8>
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	2301      	movs	r3, #1
 8009af4:	76bb      	strb	r3, [r7, #26]
 8009af6:	bf00      	nop
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 8130 	beq.w	8009d60 <UART_SetConfig+0x520>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	4a14      	ldr	r2, [pc, #80]	; (8009b58 <UART_SetConfig+0x318>)
 8009b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b12:	60bb      	str	r3, [r7, #8]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	4413      	add	r3, r2
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d305      	bcc.n	8009b30 <UART_SetConfig+0x2f0>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	031b      	lsls	r3, r3, #12
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d915      	bls.n	8009b5c <UART_SetConfig+0x31c>
 8009b30:	2301      	movs	r3, #1
 8009b32:	76bb      	strb	r3, [r7, #26]
 8009b34:	e114      	b.n	8009d60 <UART_SetConfig+0x520>
 8009b36:	bf00      	nop
 8009b38:	cfff69f3 	.word	0xcfff69f3
 8009b3c:	40008000 	.word	0x40008000
 8009b40:	40013800 	.word	0x40013800
 8009b44:	40021000 	.word	0x40021000
 8009b48:	40004400 	.word	0x40004400
 8009b4c:	40004800 	.word	0x40004800
 8009b50:	40004c00 	.word	0x40004c00
 8009b54:	00f42400 	.word	0x00f42400
 8009b58:	0800ab78 	.word	0x0800ab78
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f04f 0100 	mov.w	r1, #0
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	4a87      	ldr	r2, [pc, #540]	; (8009d88 <UART_SetConfig+0x548>)
 8009b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	f04f 0400 	mov.w	r4, #0
 8009b74:	461a      	mov	r2, r3
 8009b76:	4623      	mov	r3, r4
 8009b78:	f7f6 ff74 	bl	8000a64 <__aeabi_uldivmod>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	4619      	mov	r1, r3
 8009b82:	4622      	mov	r2, r4
 8009b84:	f04f 0300 	mov.w	r3, #0
 8009b88:	f04f 0400 	mov.w	r4, #0
 8009b8c:	0214      	lsls	r4, r2, #8
 8009b8e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009b92:	020b      	lsls	r3, r1, #8
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6852      	ldr	r2, [r2, #4]
 8009b98:	0852      	lsrs	r2, r2, #1
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	f04f 0200 	mov.w	r2, #0
 8009ba0:	eb13 0b01 	adds.w	fp, r3, r1
 8009ba4:	eb44 0c02 	adc.w	ip, r4, r2
 8009ba8:	4658      	mov	r0, fp
 8009baa:	4661      	mov	r1, ip
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f04f 0400 	mov.w	r4, #0
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	f7f6 ff54 	bl	8000a64 <__aeabi_uldivmod>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	613b      	str	r3, [r7, #16]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bc8:	d308      	bcc.n	8009bdc <UART_SetConfig+0x39c>
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bd0:	d204      	bcs.n	8009bdc <UART_SetConfig+0x39c>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	60da      	str	r2, [r3, #12]
 8009bda:	e0c1      	b.n	8009d60 <UART_SetConfig+0x520>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	76bb      	strb	r3, [r7, #26]
 8009be0:	e0be      	b.n	8009d60 <UART_SetConfig+0x520>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bea:	d164      	bne.n	8009cb6 <UART_SetConfig+0x476>
 8009bec:	7efb      	ldrb	r3, [r7, #27]
 8009bee:	2b08      	cmp	r3, #8
 8009bf0:	d827      	bhi.n	8009c42 <UART_SetConfig+0x402>
 8009bf2:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <UART_SetConfig+0x3b8>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c1d 	.word	0x08009c1d
 8009bfc:	08009c25 	.word	0x08009c25
 8009c00:	08009c2d 	.word	0x08009c2d
 8009c04:	08009c43 	.word	0x08009c43
 8009c08:	08009c33 	.word	0x08009c33
 8009c0c:	08009c43 	.word	0x08009c43
 8009c10:	08009c43 	.word	0x08009c43
 8009c14:	08009c43 	.word	0x08009c43
 8009c18:	08009c3b 	.word	0x08009c3b
 8009c1c:	f7fd fe32 	bl	8007884 <HAL_RCC_GetPCLK1Freq>
 8009c20:	6178      	str	r0, [r7, #20]
 8009c22:	e013      	b.n	8009c4c <UART_SetConfig+0x40c>
 8009c24:	f7fd fe44 	bl	80078b0 <HAL_RCC_GetPCLK2Freq>
 8009c28:	6178      	str	r0, [r7, #20]
 8009c2a:	e00f      	b.n	8009c4c <UART_SetConfig+0x40c>
 8009c2c:	4b57      	ldr	r3, [pc, #348]	; (8009d8c <UART_SetConfig+0x54c>)
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	e00c      	b.n	8009c4c <UART_SetConfig+0x40c>
 8009c32:	f7fd fdb9 	bl	80077a8 <HAL_RCC_GetSysClockFreq>
 8009c36:	6178      	str	r0, [r7, #20]
 8009c38:	e008      	b.n	8009c4c <UART_SetConfig+0x40c>
 8009c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	e004      	b.n	8009c4c <UART_SetConfig+0x40c>
 8009c42:	2300      	movs	r3, #0
 8009c44:	617b      	str	r3, [r7, #20]
 8009c46:	2301      	movs	r3, #1
 8009c48:	76bb      	strb	r3, [r7, #26]
 8009c4a:	bf00      	nop
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 8086 	beq.w	8009d60 <UART_SetConfig+0x520>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	4a4b      	ldr	r2, [pc, #300]	; (8009d88 <UART_SetConfig+0x548>)
 8009c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c66:	005a      	lsls	r2, r3, #1
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	085b      	lsrs	r3, r3, #1
 8009c6e:	441a      	add	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	613b      	str	r3, [r7, #16]
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	2b0f      	cmp	r3, #15
 8009c80:	d916      	bls.n	8009cb0 <UART_SetConfig+0x470>
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c88:	d212      	bcs.n	8009cb0 <UART_SetConfig+0x470>
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	f023 030f 	bic.w	r3, r3, #15
 8009c92:	81fb      	strh	r3, [r7, #14]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	085b      	lsrs	r3, r3, #1
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	89fb      	ldrh	r3, [r7, #14]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	81fb      	strh	r3, [r7, #14]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	89fa      	ldrh	r2, [r7, #14]
 8009cac:	60da      	str	r2, [r3, #12]
 8009cae:	e057      	b.n	8009d60 <UART_SetConfig+0x520>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	76bb      	strb	r3, [r7, #26]
 8009cb4:	e054      	b.n	8009d60 <UART_SetConfig+0x520>
 8009cb6:	7efb      	ldrb	r3, [r7, #27]
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d828      	bhi.n	8009d0e <UART_SetConfig+0x4ce>
 8009cbc:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <UART_SetConfig+0x484>)
 8009cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc2:	bf00      	nop
 8009cc4:	08009ce9 	.word	0x08009ce9
 8009cc8:	08009cf1 	.word	0x08009cf1
 8009ccc:	08009cf9 	.word	0x08009cf9
 8009cd0:	08009d0f 	.word	0x08009d0f
 8009cd4:	08009cff 	.word	0x08009cff
 8009cd8:	08009d0f 	.word	0x08009d0f
 8009cdc:	08009d0f 	.word	0x08009d0f
 8009ce0:	08009d0f 	.word	0x08009d0f
 8009ce4:	08009d07 	.word	0x08009d07
 8009ce8:	f7fd fdcc 	bl	8007884 <HAL_RCC_GetPCLK1Freq>
 8009cec:	6178      	str	r0, [r7, #20]
 8009cee:	e013      	b.n	8009d18 <UART_SetConfig+0x4d8>
 8009cf0:	f7fd fdde 	bl	80078b0 <HAL_RCC_GetPCLK2Freq>
 8009cf4:	6178      	str	r0, [r7, #20]
 8009cf6:	e00f      	b.n	8009d18 <UART_SetConfig+0x4d8>
 8009cf8:	4b24      	ldr	r3, [pc, #144]	; (8009d8c <UART_SetConfig+0x54c>)
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	e00c      	b.n	8009d18 <UART_SetConfig+0x4d8>
 8009cfe:	f7fd fd53 	bl	80077a8 <HAL_RCC_GetSysClockFreq>
 8009d02:	6178      	str	r0, [r7, #20]
 8009d04:	e008      	b.n	8009d18 <UART_SetConfig+0x4d8>
 8009d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	e004      	b.n	8009d18 <UART_SetConfig+0x4d8>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	2301      	movs	r3, #1
 8009d14:	76bb      	strb	r3, [r7, #26]
 8009d16:	bf00      	nop
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d020      	beq.n	8009d60 <UART_SetConfig+0x520>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d22:	4a19      	ldr	r2, [pc, #100]	; (8009d88 <UART_SetConfig+0x548>)
 8009d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	085b      	lsrs	r3, r3, #1
 8009d36:	441a      	add	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	613b      	str	r3, [r7, #16]
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2b0f      	cmp	r3, #15
 8009d48:	d908      	bls.n	8009d5c <UART_SetConfig+0x51c>
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d50:	d204      	bcs.n	8009d5c <UART_SetConfig+0x51c>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	60da      	str	r2, [r3, #12]
 8009d5a:	e001      	b.n	8009d60 <UART_SetConfig+0x520>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	76bb      	strb	r3, [r7, #26]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	671a      	str	r2, [r3, #112]	; 0x70
 8009d7c:	7ebb      	ldrb	r3, [r7, #26]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3720      	adds	r7, #32
 8009d82:	46bd      	mov	sp, r7
 8009d84:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009d88:	0800ab78 	.word	0x0800ab78
 8009d8c:	00f42400 	.word	0x00f42400

08009d90 <UART_AdvFeatureConfig>:
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00a      	beq.n	8009dba <UART_AdvFeatureConfig+0x2a>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	605a      	str	r2, [r3, #4]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <UART_AdvFeatureConfig+0x4c>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	605a      	str	r2, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00a      	beq.n	8009dfe <UART_AdvFeatureConfig+0x6e>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	605a      	str	r2, [r3, #4]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e02:	f003 0308 	and.w	r3, r3, #8
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <UART_AdvFeatureConfig+0x90>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	605a      	str	r2, [r3, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	f003 0310 	and.w	r3, r3, #16
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00a      	beq.n	8009e42 <UART_AdvFeatureConfig+0xb2>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	609a      	str	r2, [r3, #8]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	f003 0320 	and.w	r3, r3, #32
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <UART_AdvFeatureConfig+0xd4>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	609a      	str	r2, [r3, #8]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d01a      	beq.n	8009ea6 <UART_AdvFeatureConfig+0x116>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e8e:	d10a      	bne.n	8009ea6 <UART_AdvFeatureConfig+0x116>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	605a      	str	r2, [r3, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00a      	beq.n	8009ec8 <UART_AdvFeatureConfig+0x138>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	605a      	str	r2, [r3, #4]
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <UART_CheckIdleState>:
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af02      	add	r7, sp, #8
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009ee4:	f7fa fdcc 	bl	8004a80 <HAL_GetTick>
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0308 	and.w	r3, r3, #8
 8009ef4:	2b08      	cmp	r3, #8
 8009ef6:	d10e      	bne.n	8009f16 <UART_CheckIdleState+0x42>
 8009ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f82c 	bl	8009f64 <UART_WaitOnFlagUntilTimeout>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <UART_CheckIdleState+0x42>
 8009f12:	2303      	movs	r3, #3
 8009f14:	e022      	b.n	8009f5c <UART_CheckIdleState+0x88>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d10e      	bne.n	8009f42 <UART_CheckIdleState+0x6e>
 8009f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f816 	bl	8009f64 <UART_WaitOnFlagUntilTimeout>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <UART_CheckIdleState+0x6e>
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e00c      	b.n	8009f5c <UART_CheckIdleState+0x88>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <UART_WaitOnFlagUntilTimeout>:
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	603b      	str	r3, [r7, #0]
 8009f70:	4613      	mov	r3, r2
 8009f72:	71fb      	strb	r3, [r7, #7]
 8009f74:	e062      	b.n	800a03c <UART_WaitOnFlagUntilTimeout+0xd8>
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f7c:	d05e      	beq.n	800a03c <UART_WaitOnFlagUntilTimeout+0xd8>
 8009f7e:	f7fa fd7f 	bl	8004a80 <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d302      	bcc.n	8009f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d11d      	bne.n	8009fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 0201 	bic.w	r2, r2, #1
 8009fb2:	609a      	str	r2, [r3, #8]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e045      	b.n	800a05c <UART_WaitOnFlagUntilTimeout+0xf8>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0304 	and.w	r3, r3, #4
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d02e      	beq.n	800a03c <UART_WaitOnFlagUntilTimeout+0xd8>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fec:	d126      	bne.n	800a03c <UART_WaitOnFlagUntilTimeout+0xd8>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ff6:	621a      	str	r2, [r3, #32]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	689a      	ldr	r2, [r3, #8]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f022 0201 	bic.w	r2, r2, #1
 800a016:	609a      	str	r2, [r3, #8]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2220      	movs	r2, #32
 800a024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2220      	movs	r2, #32
 800a02c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800a038:	2303      	movs	r3, #3
 800a03a:	e00f      	b.n	800a05c <UART_WaitOnFlagUntilTimeout+0xf8>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	69da      	ldr	r2, [r3, #28]
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	4013      	ands	r3, r2
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	429a      	cmp	r2, r3
 800a04a:	bf0c      	ite	eq
 800a04c:	2301      	moveq	r3, #1
 800a04e:	2300      	movne	r3, #0
 800a050:	b2db      	uxtb	r3, r3
 800a052:	461a      	mov	r2, r3
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	429a      	cmp	r2, r3
 800a058:	d08d      	beq.n	8009f76 <UART_WaitOnFlagUntilTimeout+0x12>
 800a05a:	2300      	movs	r3, #0
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <UART_EndTxTransfer>:
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a08a:	609a      	str	r2, [r3, #8]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2220      	movs	r2, #32
 800a090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <UART_EndRxTransfer>:
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	6812      	ldr	r2, [r2, #0]
 800a0c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0c6:	f023 0301 	bic.w	r3, r3, #1
 800a0ca:	6093      	str	r3, [r2, #8]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	66da      	str	r2, [r3, #108]	; 0x6c
 800a0da:	bf00      	nop
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <UART_DMATransmitCplt>:
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0320 	and.w	r3, r3, #32
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d114      	bne.n	800a12c <UART_DMATransmitCplt+0x46>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a118:	609a      	str	r2, [r3, #8]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	e002      	b.n	800a132 <UART_DMATransmitCplt+0x4c>
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f7ff fb55 	bl	80097dc <HAL_UART_TxCpltCallback>
 800a132:	bf00      	nop
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <UART_DMATxHalfCplt>:
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f7ff fb51 	bl	80097f0 <HAL_UART_TxHalfCpltCallback>
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <UART_DMAReceiveCplt>:
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	60fb      	str	r3, [r7, #12]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0320 	and.w	r3, r3, #32
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d11f      	bne.n	800a1b2 <UART_DMAReceiveCplt+0x5c>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0201 	bic.w	r2, r2, #1
 800a198:	609a      	str	r2, [r3, #8]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	689a      	ldr	r2, [r3, #8]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1a8:	609a      	str	r2, [r3, #8]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2220      	movs	r2, #32
 800a1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7ff fb26 	bl	8009804 <HAL_UART_RxCpltCallback>
 800a1b8:	bf00      	nop
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <UART_DMARxHalfCplt>:
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1cc:	60fb      	str	r3, [r7, #12]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fb22 	bl	8009818 <HAL_UART_RxHalfCpltCallback>
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <UART_DMAError>:
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1f0:	613b      	str	r3, [r7, #16]
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a204:	2b80      	cmp	r3, #128	; 0x80
 800a206:	d109      	bne.n	800a21c <UART_DMAError+0x40>
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2b21      	cmp	r3, #33	; 0x21
 800a20c:	d106      	bne.n	800a21c <UART_DMAError+0x40>
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2200      	movs	r2, #0
 800a212:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800a216:	6978      	ldr	r0, [r7, #20]
 800a218:	f7ff ff24 	bl	800a064 <UART_EndTxTransfer>
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a226:	2b40      	cmp	r3, #64	; 0x40
 800a228:	d109      	bne.n	800a23e <UART_DMAError+0x62>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b22      	cmp	r3, #34	; 0x22
 800a22e:	d106      	bne.n	800a23e <UART_DMAError+0x62>
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	2200      	movs	r2, #0
 800a234:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800a238:	6978      	ldr	r0, [r7, #20]
 800a23a:	f7ff ff31 	bl	800a0a0 <UART_EndRxTransfer>
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a244:	f043 0210 	orr.w	r2, r3, #16
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a24e:	6978      	ldr	r0, [r7, #20]
 800a250:	f7ff faec 	bl	800982c <HAL_UART_ErrorCallback>
 800a254:	bf00      	nop
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <UART_DMAAbortOnError>:
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f7ff fad6 	bl	800982c <HAL_UART_ErrorCallback>
 800a280:	bf00      	nop
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <UART_EndTransmit_IT>:
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2220      	movs	r2, #32
 800a2a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	671a      	str	r2, [r3, #112]	; 0x70
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff fa94 	bl	80097dc <HAL_UART_TxCpltCallback>
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <HAL_UARTEx_WakeupCallback>:
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_UARTEx_RxFifoFullCallback>:
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_UARTEx_TxFifoEmptyCallback>:
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_UARTEx_DisableFifoMode>:
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <HAL_UARTEx_DisableFifoMode+0x16>
 800a30a:	2302      	movs	r3, #2
 800a30c:	e027      	b.n	800a35e <HAL_UARTEx_DisableFifoMode+0x66>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2224      	movs	r2, #36	; 0x24
 800a31a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f022 0201 	bic.w	r2, r2, #1
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	665a      	str	r2, [r3, #100]	; 0x64
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2220      	movs	r2, #32
 800a350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800a35c:	2300      	movs	r3, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <HAL_UARTEx_SetTxFifoThreshold>:
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d101      	bne.n	800a382 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a37e:	2302      	movs	r3, #2
 800a380:	e02d      	b.n	800a3de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2224      	movs	r2, #36	; 0x24
 800a38e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f022 0201 	bic.w	r2, r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	609a      	str	r2, [r3, #8]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f850 	bl	800a464 <UARTEx_SetNbDataToProcess>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <HAL_UARTEx_SetRxFifoThreshold>:
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6039      	str	r1, [r7, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d101      	bne.n	800a3fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	e02d      	b.n	800a45a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2224      	movs	r2, #36	; 0x24
 800a40a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	60fb      	str	r3, [r7, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f022 0201 	bic.w	r2, r2, #1
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	609a      	str	r2, [r3, #8]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f812 	bl	800a464 <UARTEx_SetNbDataToProcess>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800a458:	2300      	movs	r3, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <UARTEx_SetNbDataToProcess>:
 800a464:	b480      	push	{r7}
 800a466:	b089      	sub	sp, #36	; 0x24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	4a2f      	ldr	r2, [pc, #188]	; (800a52c <UARTEx_SetNbDataToProcess+0xc8>)
 800a46e:	f107 0314 	add.w	r3, r7, #20
 800a472:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a476:	e883 0003 	stmia.w	r3, {r0, r1}
 800a47a:	4a2d      	ldr	r2, [pc, #180]	; (800a530 <UARTEx_SetNbDataToProcess+0xcc>)
 800a47c:	f107 030c 	add.w	r3, r7, #12
 800a480:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a484:	e883 0003 	stmia.w	r3, {r0, r1}
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d108      	bne.n	800a4a2 <UARTEx_SetNbDataToProcess+0x3e>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a4a0:	e03d      	b.n	800a51e <UARTEx_SetNbDataToProcess+0xba>
 800a4a2:	2308      	movs	r3, #8
 800a4a4:	77fb      	strb	r3, [r7, #31]
 800a4a6:	2308      	movs	r3, #8
 800a4a8:	77bb      	strb	r3, [r7, #30]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	0e5b      	lsrs	r3, r3, #25
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 0307 	and.w	r3, r3, #7
 800a4b8:	777b      	strb	r3, [r7, #29]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	0f5b      	lsrs	r3, r3, #29
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f003 0307 	and.w	r3, r3, #7
 800a4c8:	773b      	strb	r3, [r7, #28]
 800a4ca:	7fbb      	ldrb	r3, [r7, #30]
 800a4cc:	7f3a      	ldrb	r2, [r7, #28]
 800a4ce:	f107 0120 	add.w	r1, r7, #32
 800a4d2:	440a      	add	r2, r1
 800a4d4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a4d8:	fb02 f303 	mul.w	r3, r2, r3
 800a4dc:	7f3a      	ldrb	r2, [r7, #28]
 800a4de:	f107 0120 	add.w	r1, r7, #32
 800a4e2:	440a      	add	r2, r1
 800a4e4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a4e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a4f4:	7ffb      	ldrb	r3, [r7, #31]
 800a4f6:	7f7a      	ldrb	r2, [r7, #29]
 800a4f8:	f107 0120 	add.w	r1, r7, #32
 800a4fc:	440a      	add	r2, r1
 800a4fe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a502:	fb02 f303 	mul.w	r3, r2, r3
 800a506:	7f7a      	ldrb	r2, [r7, #29]
 800a508:	f107 0120 	add.w	r1, r7, #32
 800a50c:	440a      	add	r2, r1
 800a50e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a512:	fb93 f3f2 	sdiv	r3, r3, r2
 800a516:	b29a      	uxth	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a51e:	bf00      	nop
 800a520:	3724      	adds	r7, #36	; 0x24
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	0800aa1c 	.word	0x0800aa1c
 800a530:	0800aa24 	.word	0x0800aa24

0800a534 <__cxa_pure_virtual>:
 800a534:	b508      	push	{r3, lr}
 800a536:	f000 f80d 	bl	800a554 <_ZSt9terminatev>

0800a53a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a53a:	b508      	push	{r3, lr}
 800a53c:	4780      	blx	r0
 800a53e:	f000 f80e 	bl	800a55e <abort>
	...

0800a544 <_ZSt13get_terminatev>:
 800a544:	4b02      	ldr	r3, [pc, #8]	; (800a550 <_ZSt13get_terminatev+0xc>)
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	f3bf 8f5b 	dmb	ish
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	2000000c 	.word	0x2000000c

0800a554 <_ZSt9terminatev>:
 800a554:	b508      	push	{r3, lr}
 800a556:	f7ff fff5 	bl	800a544 <_ZSt13get_terminatev>
 800a55a:	f7ff ffee 	bl	800a53a <_ZN10__cxxabiv111__terminateEPFvvE>

0800a55e <abort>:
 800a55e:	b508      	push	{r3, lr}
 800a560:	2006      	movs	r0, #6
 800a562:	f000 f871 	bl	800a648 <raise>
 800a566:	2001      	movs	r0, #1
 800a568:	f7fa f97a 	bl	8004860 <_exit>

0800a56c <__errno>:
 800a56c:	4b01      	ldr	r3, [pc, #4]	; (800a574 <__errno+0x8>)
 800a56e:	6818      	ldr	r0, [r3, #0]
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20000010 	.word	0x20000010

0800a578 <__libc_init_array>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4e0d      	ldr	r6, [pc, #52]	; (800a5b0 <__libc_init_array+0x38>)
 800a57c:	4c0d      	ldr	r4, [pc, #52]	; (800a5b4 <__libc_init_array+0x3c>)
 800a57e:	1ba4      	subs	r4, r4, r6
 800a580:	10a4      	asrs	r4, r4, #2
 800a582:	2500      	movs	r5, #0
 800a584:	42a5      	cmp	r5, r4
 800a586:	d109      	bne.n	800a59c <__libc_init_array+0x24>
 800a588:	4e0b      	ldr	r6, [pc, #44]	; (800a5b8 <__libc_init_array+0x40>)
 800a58a:	4c0c      	ldr	r4, [pc, #48]	; (800a5bc <__libc_init_array+0x44>)
 800a58c:	f000 f960 	bl	800a850 <_init>
 800a590:	1ba4      	subs	r4, r4, r6
 800a592:	10a4      	asrs	r4, r4, #2
 800a594:	2500      	movs	r5, #0
 800a596:	42a5      	cmp	r5, r4
 800a598:	d105      	bne.n	800a5a6 <__libc_init_array+0x2e>
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5a0:	4798      	blx	r3
 800a5a2:	3501      	adds	r5, #1
 800a5a4:	e7ee      	b.n	800a584 <__libc_init_array+0xc>
 800a5a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5aa:	4798      	blx	r3
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	e7f2      	b.n	800a596 <__libc_init_array+0x1e>
 800a5b0:	0800ab98 	.word	0x0800ab98
 800a5b4:	0800ab98 	.word	0x0800ab98
 800a5b8:	0800ab98 	.word	0x0800ab98
 800a5bc:	0800aba0 	.word	0x0800aba0

0800a5c0 <memcpy>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	1e43      	subs	r3, r0, #1
 800a5c4:	440a      	add	r2, r1
 800a5c6:	4291      	cmp	r1, r2
 800a5c8:	d100      	bne.n	800a5cc <memcpy+0xc>
 800a5ca:	bd10      	pop	{r4, pc}
 800a5cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5d4:	e7f7      	b.n	800a5c6 <memcpy+0x6>

0800a5d6 <memset>:
 800a5d6:	4402      	add	r2, r0
 800a5d8:	4603      	mov	r3, r0
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d100      	bne.n	800a5e0 <memset+0xa>
 800a5de:	4770      	bx	lr
 800a5e0:	f803 1b01 	strb.w	r1, [r3], #1
 800a5e4:	e7f9      	b.n	800a5da <memset+0x4>
	...

0800a5e8 <realloc>:
 800a5e8:	4b02      	ldr	r3, [pc, #8]	; (800a5f4 <realloc+0xc>)
 800a5ea:	460a      	mov	r2, r1
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	f000 b8a0 	b.w	800a734 <_realloc_r>
 800a5f4:	20000010 	.word	0x20000010

0800a5f8 <_raise_r>:
 800a5f8:	291f      	cmp	r1, #31
 800a5fa:	b538      	push	{r3, r4, r5, lr}
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	460d      	mov	r5, r1
 800a600:	d904      	bls.n	800a60c <_raise_r+0x14>
 800a602:	2316      	movs	r3, #22
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a60e:	b112      	cbz	r2, 800a616 <_raise_r+0x1e>
 800a610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a614:	b94b      	cbnz	r3, 800a62a <_raise_r+0x32>
 800a616:	4620      	mov	r0, r4
 800a618:	f000 f830 	bl	800a67c <_getpid_r>
 800a61c:	462a      	mov	r2, r5
 800a61e:	4601      	mov	r1, r0
 800a620:	4620      	mov	r0, r4
 800a622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a626:	f000 b817 	b.w	800a658 <_kill_r>
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d00a      	beq.n	800a644 <_raise_r+0x4c>
 800a62e:	1c59      	adds	r1, r3, #1
 800a630:	d103      	bne.n	800a63a <_raise_r+0x42>
 800a632:	2316      	movs	r3, #22
 800a634:	6003      	str	r3, [r0, #0]
 800a636:	2001      	movs	r0, #1
 800a638:	e7e7      	b.n	800a60a <_raise_r+0x12>
 800a63a:	2400      	movs	r4, #0
 800a63c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a640:	4628      	mov	r0, r5
 800a642:	4798      	blx	r3
 800a644:	2000      	movs	r0, #0
 800a646:	e7e0      	b.n	800a60a <_raise_r+0x12>

0800a648 <raise>:
 800a648:	4b02      	ldr	r3, [pc, #8]	; (800a654 <raise+0xc>)
 800a64a:	4601      	mov	r1, r0
 800a64c:	6818      	ldr	r0, [r3, #0]
 800a64e:	f7ff bfd3 	b.w	800a5f8 <_raise_r>
 800a652:	bf00      	nop
 800a654:	20000010 	.word	0x20000010

0800a658 <_kill_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4c07      	ldr	r4, [pc, #28]	; (800a678 <_kill_r+0x20>)
 800a65c:	2300      	movs	r3, #0
 800a65e:	4605      	mov	r5, r0
 800a660:	4608      	mov	r0, r1
 800a662:	4611      	mov	r1, r2
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	f7fa f8eb 	bl	8004840 <_kill>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	d102      	bne.n	800a674 <_kill_r+0x1c>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	b103      	cbz	r3, 800a674 <_kill_r+0x1c>
 800a672:	602b      	str	r3, [r5, #0]
 800a674:	bd38      	pop	{r3, r4, r5, pc}
 800a676:	bf00      	nop
 800a678:	20000e40 	.word	0x20000e40

0800a67c <_getpid_r>:
 800a67c:	f7fa b8d8 	b.w	8004830 <_getpid>

0800a680 <_malloc_r>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	1ccd      	adds	r5, r1, #3
 800a684:	f025 0503 	bic.w	r5, r5, #3
 800a688:	3508      	adds	r5, #8
 800a68a:	2d0c      	cmp	r5, #12
 800a68c:	bf38      	it	cc
 800a68e:	250c      	movcc	r5, #12
 800a690:	2d00      	cmp	r5, #0
 800a692:	4606      	mov	r6, r0
 800a694:	db01      	blt.n	800a69a <_malloc_r+0x1a>
 800a696:	42a9      	cmp	r1, r5
 800a698:	d903      	bls.n	800a6a2 <_malloc_r+0x22>
 800a69a:	230c      	movs	r3, #12
 800a69c:	6033      	str	r3, [r6, #0]
 800a69e:	2000      	movs	r0, #0
 800a6a0:	bd70      	pop	{r4, r5, r6, pc}
 800a6a2:	f000 f87d 	bl	800a7a0 <__malloc_lock>
 800a6a6:	4a21      	ldr	r2, [pc, #132]	; (800a72c <_malloc_r+0xac>)
 800a6a8:	6814      	ldr	r4, [r2, #0]
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	b991      	cbnz	r1, 800a6d4 <_malloc_r+0x54>
 800a6ae:	4c20      	ldr	r4, [pc, #128]	; (800a730 <_malloc_r+0xb0>)
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	b91b      	cbnz	r3, 800a6bc <_malloc_r+0x3c>
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f000 f863 	bl	800a780 <_sbrk_r>
 800a6ba:	6020      	str	r0, [r4, #0]
 800a6bc:	4629      	mov	r1, r5
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f000 f85e 	bl	800a780 <_sbrk_r>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d124      	bne.n	800a712 <_malloc_r+0x92>
 800a6c8:	230c      	movs	r3, #12
 800a6ca:	6033      	str	r3, [r6, #0]
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f000 f868 	bl	800a7a2 <__malloc_unlock>
 800a6d2:	e7e4      	b.n	800a69e <_malloc_r+0x1e>
 800a6d4:	680b      	ldr	r3, [r1, #0]
 800a6d6:	1b5b      	subs	r3, r3, r5
 800a6d8:	d418      	bmi.n	800a70c <_malloc_r+0x8c>
 800a6da:	2b0b      	cmp	r3, #11
 800a6dc:	d90f      	bls.n	800a6fe <_malloc_r+0x7e>
 800a6de:	600b      	str	r3, [r1, #0]
 800a6e0:	50cd      	str	r5, [r1, r3]
 800a6e2:	18cc      	adds	r4, r1, r3
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f000 f85c 	bl	800a7a2 <__malloc_unlock>
 800a6ea:	f104 000b 	add.w	r0, r4, #11
 800a6ee:	1d23      	adds	r3, r4, #4
 800a6f0:	f020 0007 	bic.w	r0, r0, #7
 800a6f4:	1ac3      	subs	r3, r0, r3
 800a6f6:	d0d3      	beq.n	800a6a0 <_malloc_r+0x20>
 800a6f8:	425a      	negs	r2, r3
 800a6fa:	50e2      	str	r2, [r4, r3]
 800a6fc:	e7d0      	b.n	800a6a0 <_malloc_r+0x20>
 800a6fe:	428c      	cmp	r4, r1
 800a700:	684b      	ldr	r3, [r1, #4]
 800a702:	bf16      	itet	ne
 800a704:	6063      	strne	r3, [r4, #4]
 800a706:	6013      	streq	r3, [r2, #0]
 800a708:	460c      	movne	r4, r1
 800a70a:	e7eb      	b.n	800a6e4 <_malloc_r+0x64>
 800a70c:	460c      	mov	r4, r1
 800a70e:	6849      	ldr	r1, [r1, #4]
 800a710:	e7cc      	b.n	800a6ac <_malloc_r+0x2c>
 800a712:	1cc4      	adds	r4, r0, #3
 800a714:	f024 0403 	bic.w	r4, r4, #3
 800a718:	42a0      	cmp	r0, r4
 800a71a:	d005      	beq.n	800a728 <_malloc_r+0xa8>
 800a71c:	1a21      	subs	r1, r4, r0
 800a71e:	4630      	mov	r0, r6
 800a720:	f000 f82e 	bl	800a780 <_sbrk_r>
 800a724:	3001      	adds	r0, #1
 800a726:	d0cf      	beq.n	800a6c8 <_malloc_r+0x48>
 800a728:	6025      	str	r5, [r4, #0]
 800a72a:	e7db      	b.n	800a6e4 <_malloc_r+0x64>
 800a72c:	20000ac0 	.word	0x20000ac0
 800a730:	20000ac4 	.word	0x20000ac4

0800a734 <_realloc_r>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	4607      	mov	r7, r0
 800a738:	4614      	mov	r4, r2
 800a73a:	460e      	mov	r6, r1
 800a73c:	b921      	cbnz	r1, 800a748 <_realloc_r+0x14>
 800a73e:	4611      	mov	r1, r2
 800a740:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a744:	f7ff bf9c 	b.w	800a680 <_malloc_r>
 800a748:	b922      	cbnz	r2, 800a754 <_realloc_r+0x20>
 800a74a:	f000 f82b 	bl	800a7a4 <_free_r>
 800a74e:	4625      	mov	r5, r4
 800a750:	4628      	mov	r0, r5
 800a752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a754:	f000 f874 	bl	800a840 <_malloc_usable_size_r>
 800a758:	42a0      	cmp	r0, r4
 800a75a:	d20f      	bcs.n	800a77c <_realloc_r+0x48>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4638      	mov	r0, r7
 800a760:	f7ff ff8e 	bl	800a680 <_malloc_r>
 800a764:	4605      	mov	r5, r0
 800a766:	2800      	cmp	r0, #0
 800a768:	d0f2      	beq.n	800a750 <_realloc_r+0x1c>
 800a76a:	4631      	mov	r1, r6
 800a76c:	4622      	mov	r2, r4
 800a76e:	f7ff ff27 	bl	800a5c0 <memcpy>
 800a772:	4631      	mov	r1, r6
 800a774:	4638      	mov	r0, r7
 800a776:	f000 f815 	bl	800a7a4 <_free_r>
 800a77a:	e7e9      	b.n	800a750 <_realloc_r+0x1c>
 800a77c:	4635      	mov	r5, r6
 800a77e:	e7e7      	b.n	800a750 <_realloc_r+0x1c>

0800a780 <_sbrk_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4c06      	ldr	r4, [pc, #24]	; (800a79c <_sbrk_r+0x1c>)
 800a784:	2300      	movs	r3, #0
 800a786:	4605      	mov	r5, r0
 800a788:	4608      	mov	r0, r1
 800a78a:	6023      	str	r3, [r4, #0]
 800a78c:	f7fa f872 	bl	8004874 <_sbrk>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_sbrk_r+0x1a>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	b103      	cbz	r3, 800a79a <_sbrk_r+0x1a>
 800a798:	602b      	str	r3, [r5, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20000e40 	.word	0x20000e40

0800a7a0 <__malloc_lock>:
 800a7a0:	4770      	bx	lr

0800a7a2 <__malloc_unlock>:
 800a7a2:	4770      	bx	lr

0800a7a4 <_free_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	2900      	cmp	r1, #0
 800a7aa:	d045      	beq.n	800a838 <_free_r+0x94>
 800a7ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7b0:	1f0c      	subs	r4, r1, #4
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	bfb8      	it	lt
 800a7b6:	18e4      	addlt	r4, r4, r3
 800a7b8:	f7ff fff2 	bl	800a7a0 <__malloc_lock>
 800a7bc:	4a1f      	ldr	r2, [pc, #124]	; (800a83c <_free_r+0x98>)
 800a7be:	6813      	ldr	r3, [r2, #0]
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	b933      	cbnz	r3, 800a7d2 <_free_r+0x2e>
 800a7c4:	6063      	str	r3, [r4, #4]
 800a7c6:	6014      	str	r4, [r2, #0]
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ce:	f7ff bfe8 	b.w	800a7a2 <__malloc_unlock>
 800a7d2:	42a3      	cmp	r3, r4
 800a7d4:	d90c      	bls.n	800a7f0 <_free_r+0x4c>
 800a7d6:	6821      	ldr	r1, [r4, #0]
 800a7d8:	1862      	adds	r2, r4, r1
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	bf04      	itt	eq
 800a7de:	681a      	ldreq	r2, [r3, #0]
 800a7e0:	685b      	ldreq	r3, [r3, #4]
 800a7e2:	6063      	str	r3, [r4, #4]
 800a7e4:	bf04      	itt	eq
 800a7e6:	1852      	addeq	r2, r2, r1
 800a7e8:	6022      	streq	r2, [r4, #0]
 800a7ea:	6004      	str	r4, [r0, #0]
 800a7ec:	e7ec      	b.n	800a7c8 <_free_r+0x24>
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	685a      	ldr	r2, [r3, #4]
 800a7f2:	b10a      	cbz	r2, 800a7f8 <_free_r+0x54>
 800a7f4:	42a2      	cmp	r2, r4
 800a7f6:	d9fa      	bls.n	800a7ee <_free_r+0x4a>
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	1858      	adds	r0, r3, r1
 800a7fc:	42a0      	cmp	r0, r4
 800a7fe:	d10b      	bne.n	800a818 <_free_r+0x74>
 800a800:	6820      	ldr	r0, [r4, #0]
 800a802:	4401      	add	r1, r0
 800a804:	1858      	adds	r0, r3, r1
 800a806:	4282      	cmp	r2, r0
 800a808:	6019      	str	r1, [r3, #0]
 800a80a:	d1dd      	bne.n	800a7c8 <_free_r+0x24>
 800a80c:	6810      	ldr	r0, [r2, #0]
 800a80e:	6852      	ldr	r2, [r2, #4]
 800a810:	605a      	str	r2, [r3, #4]
 800a812:	4401      	add	r1, r0
 800a814:	6019      	str	r1, [r3, #0]
 800a816:	e7d7      	b.n	800a7c8 <_free_r+0x24>
 800a818:	d902      	bls.n	800a820 <_free_r+0x7c>
 800a81a:	230c      	movs	r3, #12
 800a81c:	602b      	str	r3, [r5, #0]
 800a81e:	e7d3      	b.n	800a7c8 <_free_r+0x24>
 800a820:	6820      	ldr	r0, [r4, #0]
 800a822:	1821      	adds	r1, r4, r0
 800a824:	428a      	cmp	r2, r1
 800a826:	bf04      	itt	eq
 800a828:	6811      	ldreq	r1, [r2, #0]
 800a82a:	6852      	ldreq	r2, [r2, #4]
 800a82c:	6062      	str	r2, [r4, #4]
 800a82e:	bf04      	itt	eq
 800a830:	1809      	addeq	r1, r1, r0
 800a832:	6021      	streq	r1, [r4, #0]
 800a834:	605c      	str	r4, [r3, #4]
 800a836:	e7c7      	b.n	800a7c8 <_free_r+0x24>
 800a838:	bd38      	pop	{r3, r4, r5, pc}
 800a83a:	bf00      	nop
 800a83c:	20000ac0 	.word	0x20000ac0

0800a840 <_malloc_usable_size_r>:
 800a840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a844:	1f18      	subs	r0, r3, #4
 800a846:	2b00      	cmp	r3, #0
 800a848:	bfbc      	itt	lt
 800a84a:	580b      	ldrlt	r3, [r1, r0]
 800a84c:	18c0      	addlt	r0, r0, r3
 800a84e:	4770      	bx	lr

0800a850 <_init>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	bf00      	nop
 800a854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a856:	bc08      	pop	{r3}
 800a858:	469e      	mov	lr, r3
 800a85a:	4770      	bx	lr

0800a85c <_fini>:
 800a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85e:	bf00      	nop
 800a860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a862:	bc08      	pop	{r3}
 800a864:	469e      	mov	lr, r3
 800a866:	4770      	bx	lr
