
COORSA_rosserial_interface-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a938  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800ab10  0800ab10  0001ab10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae38  0800ae38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae38  0800ae38  0001ae38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae40  0800ae40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ae40  0800ae40  0001ae40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae48  0800ae48  0001ae48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ae4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ddc  20000074  0800aec0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e50  0800aec0  00020e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000242b2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ed8  00000000  00000000  00044356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00048230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  00049b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233ba  00000000  00000000  0004b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a37f  00000000  00000000  0006e6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e54aa  00000000  00000000  00088a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016df23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000722c  00000000  00000000  0016df78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aaf8 	.word	0x0800aaf8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	0800aaf8 	.word	0x0800aaf8

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a78:	f000 b96e 	b.w	8000d58 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9d08      	ldr	r5, [sp, #32]
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	468c      	mov	ip, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 8083 	bne.w	8000baa <__udivmoddi4+0x116>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4617      	mov	r7, r2
 8000aa8:	d947      	bls.n	8000b3a <__udivmoddi4+0xa6>
 8000aaa:	fab2 f282 	clz	r2, r2
 8000aae:	b142      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	f1c2 0020 	rsb	r0, r2, #32
 8000ab4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	4097      	lsls	r7, r2
 8000abc:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ac6:	0c23      	lsrs	r3, r4, #16
 8000ac8:	fbbc f6f8 	udiv	r6, ip, r8
 8000acc:	fa1f fe87 	uxth.w	lr, r7
 8000ad0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ad4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad8:	fb06 f10e 	mul.w	r1, r6, lr
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x60>
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae6:	f080 8119 	bcs.w	8000d1c <__udivmoddi4+0x288>
 8000aea:	4299      	cmp	r1, r3
 8000aec:	f240 8116 	bls.w	8000d1c <__udivmoddi4+0x288>
 8000af0:	3e02      	subs	r6, #2
 8000af2:	443b      	add	r3, r7
 8000af4:	1a5b      	subs	r3, r3, r1
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000afc:	fb08 3310 	mls	r3, r8, r0, r3
 8000b00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b08:	45a6      	cmp	lr, r4
 8000b0a:	d909      	bls.n	8000b20 <__udivmoddi4+0x8c>
 8000b0c:	193c      	adds	r4, r7, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b12:	f080 8105 	bcs.w	8000d20 <__udivmoddi4+0x28c>
 8000b16:	45a6      	cmp	lr, r4
 8000b18:	f240 8102 	bls.w	8000d20 <__udivmoddi4+0x28c>
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	443c      	add	r4, r7
 8000b20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b24:	eba4 040e 	sub.w	r4, r4, lr
 8000b28:	2600      	movs	r6, #0
 8000b2a:	b11d      	cbz	r5, 8000b34 <__udivmoddi4+0xa0>
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e9c5 4300 	strd	r4, r3, [r5]
 8000b34:	4631      	mov	r1, r6
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	b902      	cbnz	r2, 8000b3e <__udivmoddi4+0xaa>
 8000b3c:	deff      	udf	#255	; 0xff
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d150      	bne.n	8000be8 <__udivmoddi4+0x154>
 8000b46:	1bcb      	subs	r3, r1, r7
 8000b48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4c:	fa1f f887 	uxth.w	r8, r7
 8000b50:	2601      	movs	r6, #1
 8000b52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b56:	0c21      	lsrs	r1, r4, #16
 8000b58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b60:	fb08 f30c 	mul.w	r3, r8, ip
 8000b64:	428b      	cmp	r3, r1
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0xe4>
 8000b68:	1879      	adds	r1, r7, r1
 8000b6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0xe2>
 8000b70:	428b      	cmp	r3, r1
 8000b72:	f200 80e9 	bhi.w	8000d48 <__udivmoddi4+0x2b4>
 8000b76:	4684      	mov	ip, r0
 8000b78:	1ac9      	subs	r1, r1, r3
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b88:	fb08 f800 	mul.w	r8, r8, r0
 8000b8c:	45a0      	cmp	r8, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x10c>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x10a>
 8000b98:	45a0      	cmp	r8, r4
 8000b9a:	f200 80d9 	bhi.w	8000d50 <__udivmoddi4+0x2bc>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 0408 	sub.w	r4, r4, r8
 8000ba4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba8:	e7bf      	b.n	8000b2a <__udivmoddi4+0x96>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x12e>
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	f000 80b1 	beq.w	8000d16 <__udivmoddi4+0x282>
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bba:	4630      	mov	r0, r6
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	fab3 f683 	clz	r6, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d14a      	bne.n	8000c60 <__udivmoddi4+0x1cc>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d302      	bcc.n	8000bd4 <__udivmoddi4+0x140>
 8000bce:	4282      	cmp	r2, r0
 8000bd0:	f200 80b8 	bhi.w	8000d44 <__udivmoddi4+0x2b0>
 8000bd4:	1a84      	subs	r4, r0, r2
 8000bd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bda:	2001      	movs	r0, #1
 8000bdc:	468c      	mov	ip, r1
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d0a8      	beq.n	8000b34 <__udivmoddi4+0xa0>
 8000be2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf0:	4097      	lsls	r7, r2
 8000bf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfa:	40d9      	lsrs	r1, r3
 8000bfc:	4330      	orrs	r0, r6
 8000bfe:	0c03      	lsrs	r3, r0, #16
 8000c00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c10:	fb06 f108 	mul.w	r1, r6, r8
 8000c14:	4299      	cmp	r1, r3
 8000c16:	fa04 f402 	lsl.w	r4, r4, r2
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x19c>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c22:	f080 808d 	bcs.w	8000d40 <__udivmoddi4+0x2ac>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 808a 	bls.w	8000d40 <__udivmoddi4+0x2ac>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b281      	uxth	r1, r0
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb00 f308 	mul.w	r3, r0, r8
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x1c4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c4e:	d273      	bcs.n	8000d38 <__udivmoddi4+0x2a4>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d971      	bls.n	8000d38 <__udivmoddi4+0x2a4>
 8000c54:	3802      	subs	r0, #2
 8000c56:	4439      	add	r1, r7
 8000c58:	1acb      	subs	r3, r1, r3
 8000c5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c5e:	e778      	b.n	8000b52 <__udivmoddi4+0xbe>
 8000c60:	f1c6 0c20 	rsb	ip, r6, #32
 8000c64:	fa03 f406 	lsl.w	r4, r3, r6
 8000c68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c6c:	431c      	orrs	r4, r3
 8000c6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c72:	fa01 f306 	lsl.w	r3, r1, r6
 8000c76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c7e:	431f      	orrs	r7, r3
 8000c80:	0c3b      	lsrs	r3, r7, #16
 8000c82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c86:	fa1f f884 	uxth.w	r8, r4
 8000c8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c92:	fb09 fa08 	mul.w	sl, r9, r8
 8000c96:	458a      	cmp	sl, r1
 8000c98:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x220>
 8000ca2:	1861      	adds	r1, r4, r1
 8000ca4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca8:	d248      	bcs.n	8000d3c <__udivmoddi4+0x2a8>
 8000caa:	458a      	cmp	sl, r1
 8000cac:	d946      	bls.n	8000d3c <__udivmoddi4+0x2a8>
 8000cae:	f1a9 0902 	sub.w	r9, r9, #2
 8000cb2:	4421      	add	r1, r4
 8000cb4:	eba1 010a 	sub.w	r1, r1, sl
 8000cb8:	b2bf      	uxth	r7, r7
 8000cba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cc6:	fb00 f808 	mul.w	r8, r0, r8
 8000cca:	45b8      	cmp	r8, r7
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x24a>
 8000cce:	19e7      	adds	r7, r4, r7
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cd4:	d22e      	bcs.n	8000d34 <__udivmoddi4+0x2a0>
 8000cd6:	45b8      	cmp	r8, r7
 8000cd8:	d92c      	bls.n	8000d34 <__udivmoddi4+0x2a0>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4427      	add	r7, r4
 8000cde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ce2:	eba7 0708 	sub.w	r7, r7, r8
 8000ce6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cea:	454f      	cmp	r7, r9
 8000cec:	46c6      	mov	lr, r8
 8000cee:	4649      	mov	r1, r9
 8000cf0:	d31a      	bcc.n	8000d28 <__udivmoddi4+0x294>
 8000cf2:	d017      	beq.n	8000d24 <__udivmoddi4+0x290>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x27a>
 8000cf6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000cfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d02:	40f2      	lsrs	r2, r6
 8000d04:	ea4c 0202 	orr.w	r2, ip, r2
 8000d08:	40f7      	lsrs	r7, r6
 8000d0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e70b      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e9      	b.n	8000af4 <__udivmoddi4+0x60>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6fd      	b.n	8000b20 <__udivmoddi4+0x8c>
 8000d24:	4543      	cmp	r3, r8
 8000d26:	d2e5      	bcs.n	8000cf4 <__udivmoddi4+0x260>
 8000d28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7df      	b.n	8000cf4 <__udivmoddi4+0x260>
 8000d34:	4608      	mov	r0, r1
 8000d36:	e7d2      	b.n	8000cde <__udivmoddi4+0x24a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e78d      	b.n	8000c58 <__udivmoddi4+0x1c4>
 8000d3c:	4681      	mov	r9, r0
 8000d3e:	e7b9      	b.n	8000cb4 <__udivmoddi4+0x220>
 8000d40:	4666      	mov	r6, ip
 8000d42:	e775      	b.n	8000c30 <__udivmoddi4+0x19c>
 8000d44:	4630      	mov	r0, r6
 8000d46:	e74a      	b.n	8000bde <__udivmoddi4+0x14a>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	4439      	add	r1, r7
 8000d4e:	e713      	b.n	8000b78 <__udivmoddi4+0xe4>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	e724      	b.n	8000ba0 <__udivmoddi4+0x10c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <Control_Panel>:
float UP_LIM;
t_PI_Struct Pos_PI;



void Control_Panel(int down_lim, int mid_lim, int up_lim, float Adc_Pot, t_Control_Panel_Struct *params){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6178      	str	r0, [r7, #20]
 8000d64:	6139      	str	r1, [r7, #16]
 8000d66:	60fa      	str	r2, [r7, #12]
 8000d68:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d6c:	607b      	str	r3, [r7, #4]

	  ///////////////////////////////////////
	 ///   CONTROLLO ATTUATORE LINEARE   ///
	///////////////////////////////////////

	params->down_lim = down_lim;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	edc3 7a00 	vstr	s15, [r3]
	params->mid_lim = mid_lim;
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	edc3 7a01 	vstr	s15, [r3, #4]
	params->up_lim = up_lim;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	edc3 7a02 	vstr	s15, [r3, #8]
	DOWN_LIM = params->DOWN_LIM;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	4a93      	ldr	r2, [pc, #588]	; (8000ff0 <Control_Panel+0x294>)
 8000da4:	6013      	str	r3, [r2, #0]
	MID_LIM_UP = params->MID_LIM_UP;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a92      	ldr	r2, [pc, #584]	; (8000ff4 <Control_Panel+0x298>)
 8000dac:	6013      	str	r3, [r2, #0]
	MID_LIM_DOWN = params->MID_LIM_DOWN;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a91      	ldr	r2, [pc, #580]	; (8000ff8 <Control_Panel+0x29c>)
 8000db4:	6013      	str	r3, [r2, #0]
	UP_LIM = params->UP_LIM;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a90      	ldr	r2, [pc, #576]	; (8000ffc <Control_Panel+0x2a0>)
 8000dbc:	6013      	str	r3, [r2, #0]

	if(down_lim == 1 && WaitingForResult){		//POSIZIONE 0
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10b      	bne.n	8000ddc <Control_Panel+0x80>
 8000dc4:	4b8e      	ldr	r3, [pc, #568]	; (8001000 <Control_Panel+0x2a4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <Control_Panel+0x80>
		Pos_ref = DOWN_LIM;
 8000dcc:	4b88      	ldr	r3, [pc, #544]	; (8000ff0 <Control_Panel+0x294>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a8c      	ldr	r2, [pc, #560]	; (8001004 <Control_Panel+0x2a8>)
 8000dd2:	6013      	str	r3, [r2, #0]
		down_f = 1;
 8000dd4:	4b8c      	ldr	r3, [pc, #560]	; (8001008 <Control_Panel+0x2ac>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e031      	b.n	8000e40 <Control_Panel+0xe4>
	}
	else if(mid_lim == 2 && WaitingForResult && down_f == 1){	//POSIZIONE 1
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d10c      	bne.n	8000dfc <Control_Panel+0xa0>
 8000de2:	4b87      	ldr	r3, [pc, #540]	; (8001000 <Control_Panel+0x2a4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <Control_Panel+0xa0>
 8000dea:	4b87      	ldr	r3, [pc, #540]	; (8001008 <Control_Panel+0x2ac>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d104      	bne.n	8000dfc <Control_Panel+0xa0>
		Pos_ref = MID_LIM_DOWN;
 8000df2:	4b81      	ldr	r3, [pc, #516]	; (8000ff8 <Control_Panel+0x29c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a83      	ldr	r2, [pc, #524]	; (8001004 <Control_Panel+0x2a8>)
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e021      	b.n	8000e40 <Control_Panel+0xe4>
	}
	else if(mid_lim == 2 && WaitingForResult && up_f == 1){	//POSIZIONE 1
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d10c      	bne.n	8000e1c <Control_Panel+0xc0>
 8000e02:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <Control_Panel+0x2a4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d008      	beq.n	8000e1c <Control_Panel+0xc0>
 8000e0a:	4b80      	ldr	r3, [pc, #512]	; (800100c <Control_Panel+0x2b0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d104      	bne.n	8000e1c <Control_Panel+0xc0>
		Pos_ref = MID_LIM_UP;
 8000e12:	4b78      	ldr	r3, [pc, #480]	; (8000ff4 <Control_Panel+0x298>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a7b      	ldr	r2, [pc, #492]	; (8001004 <Control_Panel+0x2a8>)
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e011      	b.n	8000e40 <Control_Panel+0xe4>
	}
	else if(up_lim == 4 && WaitingForResult){	//POSIZIONE 2
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d10b      	bne.n	8000e3a <Control_Panel+0xde>
 8000e22:	4b77      	ldr	r3, [pc, #476]	; (8001000 <Control_Panel+0x2a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d007      	beq.n	8000e3a <Control_Panel+0xde>
		Pos_ref = UP_LIM;
 8000e2a:	4b74      	ldr	r3, [pc, #464]	; (8000ffc <Control_Panel+0x2a0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a75      	ldr	r2, [pc, #468]	; (8001004 <Control_Panel+0x2a8>)
 8000e30:	6013      	str	r3, [r2, #0]
		up_f = 1;
 8000e32:	4b76      	ldr	r3, [pc, #472]	; (800100c <Control_Panel+0x2b0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e002      	b.n	8000e40 <Control_Panel+0xe4>
	}
	else{					//MANTIENI POSIZIONE
		Pos_ref = Adc_Pot;
 8000e3a:	4a72      	ldr	r2, [pc, #456]	; (8001004 <Control_Panel+0x2a8>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	6013      	str	r3, [r2, #0]
	}

	Pos_error = Pos_ref - Adc_Pot;
 8000e40:	4b70      	ldr	r3, [pc, #448]	; (8001004 <Control_Panel+0x2a8>)
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4e:	4b70      	ldr	r3, [pc, #448]	; (8001010 <Control_Panel+0x2b4>)
 8000e50:	edc3 7a00 	vstr	s15, [r3]
	I_star = PIDfloat(Pos_error, &Pos_PI);
 8000e54:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <Control_Panel+0x2b4>)
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	486e      	ldr	r0, [pc, #440]	; (8001014 <Control_Panel+0x2b8>)
 8000e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e60:	f000 fa4d 	bl	80012fe <PIDfloat>
 8000e64:	eef0 7a40 	vmov.f32	s15, s0
 8000e68:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <Control_Panel+0x2bc>)
 8000e6a:	edc3 7a00 	vstr	s15, [r3]


	if(I_star >= CURRENT_MAX_UP){  //SATURAZIONE [-I_MAX,+I_MAX]
 8000e6e:	4b6a      	ldr	r3, [pc, #424]	; (8001018 <Control_Panel+0x2bc>)
 8000e70:	edd3 7a00 	vldr	s15, [r3]
 8000e74:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800101c <Control_Panel+0x2c0>
 8000e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	db03      	blt.n	8000e8a <Control_Panel+0x12e>
		I_star = CURRENT_MAX_UP;
 8000e82:	4b65      	ldr	r3, [pc, #404]	; (8001018 <Control_Panel+0x2bc>)
 8000e84:	4a66      	ldr	r2, [pc, #408]	; (8001020 <Control_Panel+0x2c4>)
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e00c      	b.n	8000ea4 <Control_Panel+0x148>
	}
	else if(I_star <= -CURRENT_MAX_DOWN){
 8000e8a:	4b63      	ldr	r3, [pc, #396]	; (8001018 <Control_Panel+0x2bc>)
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8000e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	d802      	bhi.n	8000ea4 <Control_Panel+0x148>
		I_star = -CURRENT_MAX_DOWN;
 8000e9e:	4b5e      	ldr	r3, [pc, #376]	; (8001018 <Control_Panel+0x2bc>)
 8000ea0:	4a60      	ldr	r2, [pc, #384]	; (8001024 <Control_Panel+0x2c8>)
 8000ea2:	601a      	str	r2, [r3, #0]
	}


	if(Adc_Pot >= Pos_ref - 0.005f && Adc_Pot <= Pos_ref + 0.005f){ //RAGGIUNGIMENTO SET-POINT ISTERESI ADC POTENZIOMETRO
 8000ea4:	4b57      	ldr	r3, [pc, #348]	; (8001004 <Control_Panel+0x2a8>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001028 <Control_Panel+0x2cc>
 8000eae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebe:	db72      	blt.n	8000fa6 <Control_Panel+0x24a>
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <Control_Panel+0x2a8>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001028 <Control_Panel+0x2cc>
 8000eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ece:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eda:	d864      	bhi.n	8000fa6 <Control_Panel+0x24a>

		if(Pos_ref == DOWN_LIM && WaitingForResult){
 8000edc:	4b49      	ldr	r3, [pc, #292]	; (8001004 <Control_Panel+0x2a8>)
 8000ede:	ed93 7a00 	vldr	s14, [r3]
 8000ee2:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <Control_Panel+0x294>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	eeb4 7a67 	vcmp.f32	s14, s15
 8000eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef0:	d10c      	bne.n	8000f0c <Control_Panel+0x1b0>
 8000ef2:	4b43      	ldr	r3, [pc, #268]	; (8001000 <Control_Panel+0x2a4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d008      	beq.n	8000f0c <Control_Panel+0x1b0>
			WaitingForResult = 0;
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <Control_Panel+0x2a4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
			down_lim = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
			sendMess(8);
 8000f04:	2008      	movs	r0, #8
 8000f06:	f002 f87f 	bl	8003008 <sendMess>
 8000f0a:	e04c      	b.n	8000fa6 <Control_Panel+0x24a>
		}
		else if(Pos_ref == MID_LIM_DOWN && WaitingForResult){
 8000f0c:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <Control_Panel+0x2a8>)
 8000f0e:	ed93 7a00 	vldr	s14, [r3]
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <Control_Panel+0x29c>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	d10f      	bne.n	8000f42 <Control_Panel+0x1e6>
 8000f22:	4b37      	ldr	r3, [pc, #220]	; (8001000 <Control_Panel+0x2a4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <Control_Panel+0x1e6>
			WaitingForResult = 0;
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <Control_Panel+0x2a4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
			mid_lim = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
			down_f = 0;
 8000f34:	4b34      	ldr	r3, [pc, #208]	; (8001008 <Control_Panel+0x2ac>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
			sendMess(16);
 8000f3a:	2010      	movs	r0, #16
 8000f3c:	f002 f864 	bl	8003008 <sendMess>
 8000f40:	e031      	b.n	8000fa6 <Control_Panel+0x24a>
			//INVIO MESSAGGIO POSIZIONE 1 RAGGIUNTA
		}
		else if(Pos_ref == MID_LIM_UP && WaitingForResult){
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <Control_Panel+0x2a8>)
 8000f44:	ed93 7a00 	vldr	s14, [r3]
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <Control_Panel+0x298>)
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f56:	d10f      	bne.n	8000f78 <Control_Panel+0x21c>
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <Control_Panel+0x2a4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00b      	beq.n	8000f78 <Control_Panel+0x21c>
			WaitingForResult = 0;
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <Control_Panel+0x2a4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
			mid_lim = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
			up_f = 0;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <Control_Panel+0x2b0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
			sendMess(16);
 8000f70:	2010      	movs	r0, #16
 8000f72:	f002 f849 	bl	8003008 <sendMess>
 8000f76:	e016      	b.n	8000fa6 <Control_Panel+0x24a>
			//INVIO MESSAGGIO POSIZIONE 1 RAGGIUNTA
		}
		else if(Pos_ref == UP_LIM && WaitingForResult){
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <Control_Panel+0x2a8>)
 8000f7a:	ed93 7a00 	vldr	s14, [r3]
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <Control_Panel+0x2a0>)
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8c:	d10b      	bne.n	8000fa6 <Control_Panel+0x24a>
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <Control_Panel+0x2a4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <Control_Panel+0x24a>
			WaitingForResult = 0;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <Control_Panel+0x2a4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
			up_lim = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
			sendMess(32);
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	f002 f831 	bl	8003008 <sendMess>
			//INVIO MESSAGGIO POSIZIONE 2 RAGGIUNTA
		}
	}

	Current_Ramp(&I_star, &I_ref);
 8000fa6:	4921      	ldr	r1, [pc, #132]	; (800102c <Control_Panel+0x2d0>)
 8000fa8:	481b      	ldr	r0, [pc, #108]	; (8001018 <Control_Panel+0x2bc>)
 8000faa:	f000 f86f 	bl	800108c <Current_Ramp>

	params->I_ref=I_ref;
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <Control_Panel+0x2d0>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
	params->down_lim = down_lim;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
	params->mid_lim = mid_lim;
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	edc3 7a01 	vstr	s15, [r3, #4]
	params->up_lim = up_lim;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000ac8 	.word	0x20000ac8
 8000ff4:	20000afc 	.word	0x20000afc
 8000ff8:	20000af8 	.word	0x20000af8
 8000ffc:	20000b00 	.word	0x20000b00
 8001000:	200000ac 	.word	0x200000ac
 8001004:	20000090 	.word	0x20000090
 8001008:	200000a0 	.word	0x200000a0
 800100c:	2000009c 	.word	0x2000009c
 8001010:	20000094 	.word	0x20000094
 8001014:	20000acc 	.word	0x20000acc
 8001018:	20000098 	.word	0x20000098
 800101c:	3f333333 	.word	0x3f333333
 8001020:	3f333333 	.word	0x3f333333
 8001024:	be800000 	.word	0xbe800000
 8001028:	3ba3d70a 	.word	0x3ba3d70a
 800102c:	20000a84 	.word	0x20000a84

08001030 <Control_Panel_Struct_init>:

void Control_Panel_Struct_init(t_Control_Panel_Struct *params){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	params->down_lim = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
	params->mid_lim = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
	params->up_lim = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
	params->I_ref=0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
	params->DOWN_LIM=0.05f;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <Control_Panel_Struct_init+0x50>)
 800105c:	611a      	str	r2, [r3, #16]
	params->MID_LIM_UP=0.40f;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a08      	ldr	r2, [pc, #32]	; (8001084 <Control_Panel_Struct_init+0x54>)
 8001062:	615a      	str	r2, [r3, #20]
	params->MID_LIM_DOWN=0.55f;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <Control_Panel_Struct_init+0x58>)
 8001068:	619a      	str	r2, [r3, #24]
	params->UP_LIM=1.5f;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001070:	61da      	str	r2, [r3, #28]

}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	3d4ccccd 	.word	0x3d4ccccd
 8001084:	3ecccccd 	.word	0x3ecccccd
 8001088:	3f0ccccd 	.word	0x3f0ccccd

0800108c <Current_Ramp>:


void Current_Ramp(float *I_star, float *I_ref){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]

	 if(*I_star >= *I_ref){
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed93 7a00 	vldr	s14, [r3]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	db09      	blt.n	80010c0 <Current_Ramp+0x34>
			*I_ref += 0.00005f;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80010f8 <Current_Ramp+0x6c>
 80010b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	edc3 7a00 	vstr	s15, [r3]
		}
	 if(*I_star < *I_ref){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d400      	bmi.n	80010d8 <Current_Ramp+0x4c>
			*I_ref -= 0.00005f;
		}
}
 80010d6:	e009      	b.n	80010ec <Current_Ramp+0x60>
			*I_ref -= 0.00005f;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010f8 <Current_Ramp+0x6c>
 80010e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	edc3 7a00 	vstr	s15, [r3]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	3851b717 	.word	0x3851b717
 80010fc:	00000000 	.word	0x00000000

08001100 <init_filter>:

#include "LowPassFilter.h"

//funzione di inizializzazione della struttura del filtro passa basso
void init_filter(float T_s, float f_t, t_lpfilterStruct *f)
{
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	ed87 0a03 	vstr	s0, [r7, #12]
 800110c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001110:	6078      	str	r0, [r7, #4]
	f->I_a = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
	f->I_p = 0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
	f->U_a = 0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
	f->U_p = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	60da      	str	r2, [r3, #12]

	f->T_s = T_s;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	601a      	str	r2, [r3, #0]
	f->f_t = f_t;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	605a      	str	r2, [r3, #4]

	f->A0 = (2*_filt_PI*f_t)*T_s/(2+(2*_filt_PI*f_t)*T_s);
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f7ff f9d6 	bl	80004f0 <__aeabi_f2d>
 8001144:	a34e      	add	r3, pc, #312	; (adr r3, 8001280 <init_filter+0x180>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff fa29 	bl	80005a0 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4614      	mov	r4, r2
 8001154:	461d      	mov	r5, r3
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff f9ca 	bl	80004f0 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff fa1c 	bl	80005a0 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4614      	mov	r4, r2
 800116e:	461d      	mov	r5, r3
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	f7ff f9bd 	bl	80004f0 <__aeabi_f2d>
 8001176:	a342      	add	r3, pc, #264	; (adr r3, 8001280 <init_filter+0x180>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa10 	bl	80005a0 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4690      	mov	r8, r2
 8001186:	4699      	mov	r9, r3
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff f9b1 	bl	80004f0 <__aeabi_f2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4640      	mov	r0, r8
 8001194:	4649      	mov	r1, r9
 8001196:	f7ff fa03 	bl	80005a0 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011aa:	f7ff f843 	bl	8000234 <__adddf3>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff fb1d 	bl	80007f4 <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fbff 	bl	80009c4 <__aeabi_d2f>
 80011c6:	4602      	mov	r2, r0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
	f->A1 = f->A0;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	61da      	str	r2, [r3, #28]
	f->B0 = (2-(2*_filt_PI*f_t)*T_s)/(2+(2*_filt_PI*f_t)*T_s);
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f7ff f98b 	bl	80004f0 <__aeabi_f2d>
 80011da:	a329      	add	r3, pc, #164	; (adr r3, 8001280 <init_filter+0x180>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff f9de 	bl	80005a0 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	461d      	mov	r5, r3
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff f97f 	bl	80004f0 <__aeabi_f2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f9d1 	bl	80005a0 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	f04f 0000 	mov.w	r0, #0
 8001206:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800120a:	f7ff f811 	bl	8000230 <__aeabi_dsub>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4614      	mov	r4, r2
 8001214:	461d      	mov	r5, r3
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff f96a 	bl	80004f0 <__aeabi_f2d>
 800121c:	a318      	add	r3, pc, #96	; (adr r3, 8001280 <init_filter+0x180>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f9bd 	bl	80005a0 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4690      	mov	r8, r2
 800122c:	4699      	mov	r9, r3
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff f95e 	bl	80004f0 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4640      	mov	r0, r8
 800123a:	4649      	mov	r1, r9
 800123c:	f7ff f9b0 	bl	80005a0 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001250:	f7fe fff0 	bl	8000234 <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7ff faca 	bl	80007f4 <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fbac 	bl	80009c4 <__aeabi_d2f>
 800126c:	4602      	mov	r2, r0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	621a      	str	r2, [r3, #32]
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800127c:	f3af 8000 	nop.w
 8001280:	5443d6f4 	.word	0x5443d6f4
 8001284:	401921fb 	.word	0x401921fb

08001288 <filter_run>:

//funzione di calcolo uscita del filtro
float filter_run(float I_a, t_lpfilterStruct *f)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001292:	6038      	str	r0, [r7, #0]
	f->I_a = I_a;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]

	f->U_a = f->A1*f->I_a + f->A0*f->I_p + f->B0*f->U_p;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	ed93 7a07 	vldr	s14, [r3, #28]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	edd3 6a06 	vldr	s13, [r3, #24]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	edd3 6a08 	vldr	s13, [r3, #32]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80012ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	edc3 7a05 	vstr	s15, [r3, #20]

	//update
	f->I_p = f->I_a;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	609a      	str	r2, [r3, #8]
	f->U_p = f->U_a;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	60da      	str	r2, [r3, #12]

	return f->U_a;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	ee07 3a90 	vmov	s15, r3
}
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PIDfloat>:
#include "PID_float.h"
 
float PIDfloat(float xk, t_PI_Struct * params)
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	ed87 0a01 	vstr	s0, [r7, #4]
 8001308:	6038      	str	r0, [r7, #0]
	float tmp;
	params->IntegralMemory+=params->Ki*(xk+params->ek_old)*params->Ts*0.5f;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	edd3 6a03 	vldr	s13, [r3, #12]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	ed93 6a00 	vldr	s12, [r3]
 800131c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001320:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001324:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800132e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001332:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001336:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800133a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	edc3 7a05 	vstr	s15, [r3, #20]
	if (params->IntegralMemory>params->IntSatH) params->IntegralMemory=params->IntSatH;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	ed93 7a05 	vldr	s14, [r3, #20]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	dd03      	ble.n	8001362 <PIDfloat+0x64>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	615a      	str	r2, [r3, #20]
	if (params->IntegralMemory<params->IntSatL) params->IntegralMemory=params->IntSatL;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	ed93 7a05 	vldr	s14, [r3, #20]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800136e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	d503      	bpl.n	8001380 <PIDfloat+0x82>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	615a      	str	r2, [r3, #20]
	tmp=params->Kp*xk+params->IntegralMemory;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	ed93 7a02 	vldr	s14, [r3, #8]
 8001386:	edd7 7a01 	vldr	s15, [r7, #4]
 800138a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	edd3 7a05 	vldr	s15, [r3, #20]
 8001394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001398:	edc7 7a03 	vstr	s15, [r7, #12]

	if (tmp>params->OutSatH) tmp=params->OutSatH;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	edd3 7a06 	vldr	s15, [r3, #24]
 80013a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	dd02      	ble.n	80013b6 <PIDfloat+0xb8>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	60fb      	str	r3, [r7, #12]
	if (tmp<params->OutSatL) tmp=params->OutSatL;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80013bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d502      	bpl.n	80013d0 <PIDfloat+0xd2>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	60fb      	str	r3, [r7, #12]

	params->ek_old=xk;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
	return tmp;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	ee07 3a90 	vmov	s15, r3
}
 80013dc:	eeb0 0a67 	vmov.f32	s0, s15
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <InitPI_BC>:


void InitPI_BC(t_PI_Struct * params)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
    params->ek_old = 0;            // Previous sample
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
    params->duk = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
    params->Kp = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
    params->Ki = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
    params->IntegralMemory = 0;    // The integral memory
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
    params->OutSatH = 0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
    params->OutSatL = 0;           // Output saturations
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
    params->Ts = 0;                // Sampling time
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <read_ADC>:
int Reg_1;		//Variabile temporanea in cui memorizzo il valore del registro DR per ADC1
float Adc_1;		//ADC1
int Reg_2;		//Variabile temporanea in cui memorizzo il valore del registro DR per ADC2
float Adc_2;		//ADC2

void read_ADC(t_AdcStruct *params){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]


	if(ADC1->ISR &= ADC_ISR_EOC){    	//Andiamo a vedere se EOC è settato, se lo è leggo il registro DR.
 8001448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8088 	beq.w	800156e <read_ADC+0x12e>

		Reg_1 = ADC1->DR;		//Viene allocata sulla variabile Reg_1 il valore del registri DR
 800145e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	461a      	mov	r2, r3
 8001466:	4b45      	ldr	r3, [pc, #276]	; (800157c <read_ADC+0x13c>)
 8001468:	601a      	str	r2, [r3, #0]
		Reg_2 = ADC2->DR;		//Avendo letto DR vado a resettare EOC e la conversione può ripartire.
 800146a:	4b45      	ldr	r3, [pc, #276]	; (8001580 <read_ADC+0x140>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	461a      	mov	r2, r3
 8001470:	4b44      	ldr	r3, [pc, #272]	; (8001584 <read_ADC+0x144>)
 8001472:	601a      	str	r2, [r3, #0]

		Adc_1 = (Reg_1*V_REF)/(RIS_ADC-1);	//Viene calcolato il Valore letto in ADC1
 8001474:	4b41      	ldr	r3, [pc, #260]	; (800157c <read_ADC+0x13c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001480:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001588 <read_ADC+0x148>
 8001484:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001488:	eddf 6a40 	vldr	s13, [pc, #256]	; 800158c <read_ADC+0x14c>
 800148c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001490:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <read_ADC+0x150>)
 8001492:	edc3 7a00 	vstr	s15, [r3]
		Adc_2 = (Reg_2*V_REF)/(RIS_ADC-1);	//Viene calcolato il Valore letto in ADC2
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <read_ADC+0x144>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001588 <read_ADC+0x148>
 80014a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800158c <read_ADC+0x14c>
 80014ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b2:	4b38      	ldr	r3, [pc, #224]	; (8001594 <read_ADC+0x154>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]

		if(Adc_2 < V_REF/2)
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <read_ADC+0x154>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001598 <read_ADC+0x158>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	d516      	bpl.n	80014fa <read_ADC+0xba>
			Adc_2 = -CURRENT_FS*(((V_REF/2)-Adc_2)/(V_REF/2)) + OFFSET;
 80014cc:	4b31      	ldr	r3, [pc, #196]	; (8001594 <read_ADC+0x154>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001598 <read_ADC+0x158>
 80014d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014da:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001598 <read_ADC+0x158>
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80014e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ea:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800159c <read_ADC+0x15c>
 80014ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <read_ADC+0x154>)
 80014f4:	edc3 7a00 	vstr	s15, [r3]
 80014f8:	e015      	b.n	8001526 <read_ADC+0xe6>
		else
			Adc_2 = CURRENT_FS*(((Adc_2)-(V_REF/2))/(V_REF/2)) + OFFSET;
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <read_ADC+0x154>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001598 <read_ADC+0x158>
 8001504:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001508:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001598 <read_ADC+0x158>
 800150c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001510:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001518:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800159c <read_ADC+0x15c>
 800151c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <read_ADC+0x154>)
 8001522:	edc3 7a00 	vstr	s15, [r3]


		ADC1->CR |= ADC_CR_ADEN;
 8001526:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADEN;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <read_ADC+0x140>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <read_ADC+0x140>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6093      	str	r3, [r2, #8]
		ADC1->CR |= ADC_CR_ADSTART;	 //Settando ADSTART è possibile iniziare una nuova conversione, poichè setta nuovamente EOC.
 8001542:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADSTART;	 //Settando ADSTART è possibile iniziare una nuova conversione, poichè setta nuovamente EOC.
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <read_ADC+0x140>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <read_ADC+0x140>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6093      	str	r3, [r2, #8]


		params->Adc_1 = Adc_1;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <read_ADC+0x150>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	601a      	str	r2, [r3, #0]
		params->Adc_2 = Adc_2;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <read_ADC+0x154>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	605a      	str	r2, [r3, #4]
	}
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000b04 	.word	0x20000b04
 8001580:	50000100 	.word	0x50000100
 8001584:	20000b0c 	.word	0x20000b0c
 8001588:	40533333 	.word	0x40533333
 800158c:	447fc000 	.word	0x447fc000
 8001590:	20000b08 	.word	0x20000b08
 8001594:	20000b10 	.word	0x20000b10
 8001598:	3fd33333 	.word	0x3fd33333
 800159c:	3e4ccccd 	.word	0x3e4ccccd

080015a0 <AdcStruct_init>:

void AdcStruct_init(t_AdcStruct *params){
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
		params->Adc_1 = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
		params->Adc_2 = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float pwm_flag = 0;
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d0:	f003 fa2d 	bl	8004a2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d4:	f000 f878 	bl	80016c8 <SystemClock_Config>
  */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d8:	f000 fb7c 	bl	8001cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80015dc:	f000 fb48 	bl	8001c70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015e0:	f000 fafa 	bl	8001bd8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015e4:	f000 f8da 	bl	800179c <MX_ADC1_Init>
  MX_ADC2_Init();
 80015e8:	f000 f954 	bl	8001894 <MX_ADC2_Init>
  MX_TIM1_Init();
 80015ec:	f000 f9f8 	bl	80019e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015f0:	f000 fa8a 	bl	8001b08 <MX_TIM2_Init>
  MX_DAC1_Init();
 80015f4:	f000 f9ae 	bl	8001954 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80015f8:	f001 fce0 	bl	8002fbc <setup>

  HAL_TIM_PWM_Init(&htim1);	//Inizializzazione PWM H-Bridge Attuatore Lineare
 80015fc:	482d      	ldr	r0, [pc, #180]	; (80016b4 <main+0xf0>)
 80015fe:	f006 fc63 	bl	8007ec8 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2); //Inizializzazione PWM Servo Motors
 8001602:	482d      	ldr	r0, [pc, #180]	; (80016b8 <main+0xf4>)
 8001604:	f006 fc60 	bl	8007ec8 <HAL_TIM_PWM_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);			//Start PWM + PWM_N H-Bridge Attuatore Lineare
 8001608:	2100      	movs	r1, #0
 800160a:	482a      	ldr	r0, [pc, #168]	; (80016b4 <main+0xf0>)
 800160c:	f006 fcb4 	bl	8007f78 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001610:	2100      	movs	r1, #0
 8001612:	4828      	ldr	r0, [pc, #160]	; (80016b4 <main+0xf0>)
 8001614:	f007 fcb4 	bl	8008f80 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);			//Start PWM Servo Motors
 8001618:	2104      	movs	r1, #4
 800161a:	4827      	ldr	r0, [pc, #156]	; (80016b8 <main+0xf4>)
 800161c:	f006 fcac 	bl	8007f78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001620:	2108      	movs	r1, #8
 8001622:	4825      	ldr	r0, [pc, #148]	; (80016b8 <main+0xf4>)
 8001624:	f006 fca8 	bl	8007f78 <HAL_TIM_PWM_Start>

  HAL_ADC_Start(&hadc1);	//Start ADC
 8001628:	4824      	ldr	r0, [pc, #144]	; (80016bc <main+0xf8>)
 800162a:	f003 fe27 	bl	800527c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800162e:	4824      	ldr	r0, [pc, #144]	; (80016c0 <main+0xfc>)
 8001630:	f003 fe24 	bl	800527c <HAL_ADC_Start>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);						//Start DAC
 8001634:	2100      	movs	r1, #0
 8001636:	4823      	ldr	r0, [pc, #140]	; (80016c4 <main+0x100>)
 8001638:	f004 fd1d 	bl	8006076 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800163c:	2110      	movs	r1, #16
 800163e:	4821      	ldr	r0, [pc, #132]	; (80016c4 <main+0x100>)
 8001640:	f004 fd19 	bl	8006076 <HAL_DAC_Start>

  InitSystem();		//Inizializzazione Variabili di controllo e abilitazione modulazione PWM H-Bridge Attuatore Lineare
 8001644:	f003 f890 	bl	8004768 <InitSystem>

  HAL_TIM_Base_Start_IT(&htim1);	//Start Update Interrupt TIM1
 8001648:	481a      	ldr	r0, [pc, #104]	; (80016b4 <main+0xf0>)
 800164a:	f006 fbd3 	bl	8007df4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 800164e:	f001 fcab 	bl	8002fa8 <loop>
    /* USER CODE END WHILE */
    if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_15))
 8001652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165a:	f005 fb91 	bl	8006d80 <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d012      	beq.n	800168a <main+0xc6>
    {
    	if(pwm_flag == 0){
 8001664:	edd7 7a01 	vldr	s15, [r7, #4]
 8001668:	eef5 7a40 	vcmp.f32	s15, #0.0
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	d1ed      	bne.n	800164e <main+0x8a>
			pwm_flag = 1;
 8001672:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001676:	607b      	str	r3, [r7, #4]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);			//Stop PWM + PWM_N H-Bridge Attuatore Lineare
 8001678:	2100      	movs	r1, #0
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <main+0xf0>)
 800167c:	f006 fd7c 	bl	8008178 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001680:	2100      	movs	r1, #0
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <main+0xf0>)
 8001684:	f007 fd30 	bl	80090e8 <HAL_TIMEx_PWMN_Stop>
 8001688:	e7e1      	b.n	800164e <main+0x8a>
    	}
    }
    else
    {
    	if(pwm_flag == 1){
 800168a:	edd7 7a01 	vldr	s15, [r7, #4]
 800168e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001692:	eef4 7a47 	vcmp.f32	s15, s14
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	d1d8      	bne.n	800164e <main+0x8a>
    		pwm_flag = 0;
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
    		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);			//Start PWM + PWM_N H-Bridge Attuatore Lineare
 80016a2:	2100      	movs	r1, #0
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <main+0xf0>)
 80016a6:	f006 fc67 	bl	8007f78 <HAL_TIM_PWM_Start>
    		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80016aa:	2100      	movs	r1, #0
 80016ac:	4801      	ldr	r0, [pc, #4]	; (80016b4 <main+0xf0>)
 80016ae:	f007 fc67 	bl	8008f80 <HAL_TIMEx_PWMN_Start>
	loop();
 80016b2:	e7cc      	b.n	800164e <main+0x8a>
 80016b4:	20000cc0 	.word	0x20000cc0
 80016b8:	20000d0c 	.word	0x20000d0c
 80016bc:	20000bf4 	.word	0x20000bf4
 80016c0:	20000b88 	.word	0x20000b88
 80016c4:	20000b74 	.word	0x20000b74

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0a4      	sub	sp, #144	; 0x90
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016d2:	2238      	movs	r2, #56	; 0x38
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f009 f8c4 	bl	800a864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2244      	movs	r2, #68	; 0x44
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f009 f8b6 	bl	800a864 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f005 fba3 	bl	8006e44 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016fe:	2302      	movs	r3, #2
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001706:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170c:	2302      	movs	r3, #2
 800170e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001710:	2302      	movs	r3, #2
 8001712:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001714:	2304      	movs	r3, #4
 8001716:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001718:	2355      	movs	r3, #85	; 0x55
 800171a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001724:	2302      	movs	r3, #2
 8001726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001734:	4618      	mov	r0, r3
 8001736:	f005 fc39 	bl	8006fac <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001740:	f000 fb44 	bl	8001dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001748:	2303      	movs	r3, #3
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001750:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001754:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001756:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800175a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800175c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001760:	2104      	movs	r1, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f005 ff3a 	bl	80075dc <HAL_RCC_ClockConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800176e:	f000 fb2d 	bl	8001dcc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001772:	f248 0302 	movw	r3, #32770	; 0x8002
 8001776:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001778:	2304      	movs	r3, #4
 800177a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800177c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001780:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4618      	mov	r0, r3
 8001786:	f006 f945 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001790:	f000 fb1c 	bl	8001dcc <Error_Handler>
  }
}
 8001794:	bf00      	nop
 8001796:	3790      	adds	r7, #144	; 0x90
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2220      	movs	r2, #32
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f009 f855 	bl	800a864 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <MX_ADC1_Init+0xf0>)
 80017bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <MX_ADC1_Init+0xf0>)
 80017c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80017ca:	4b30      	ldr	r3, [pc, #192]	; (800188c <MX_ADC1_Init+0xf0>)
 80017cc:	2208      	movs	r2, #8
 80017ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <MX_ADC1_Init+0xf0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <MX_ADC1_Init+0xf0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <MX_ADC1_Init+0xf0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <MX_ADC1_Init+0xf0>)
 80017e4:	2204      	movs	r2, #4
 80017e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <MX_ADC1_Init+0xf0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <MX_ADC1_Init+0xf0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <MX_ADC1_Init+0xf0>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <MX_ADC1_Init+0xf0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <MX_ADC1_Init+0xf0>)
 8001804:	2200      	movs	r2, #0
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <MX_ADC1_Init+0xf0>)
 800180a:	2200      	movs	r2, #0
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <MX_ADC1_Init+0xf0>)
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_ADC1_Init+0xf0>)
 8001818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_ADC1_Init+0xf0>)
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001826:	4819      	ldr	r0, [pc, #100]	; (800188c <MX_ADC1_Init+0xf0>)
 8001828:	f003 fba0 	bl	8004f6c <HAL_ADC_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001832:	f000 facb 	bl	8001dcc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001836:	2306      	movs	r3, #6
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	4810      	ldr	r0, [pc, #64]	; (800188c <MX_ADC1_Init+0xf0>)
 800184a:	f004 fa43 	bl	8005cd4 <HAL_ADCEx_MultiModeConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001854:	f000 faba 	bl	8001dcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <MX_ADC1_Init+0xf4>)
 800185a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800185c:	2306      	movs	r3, #6
 800185e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001864:	237f      	movs	r3, #127	; 0x7f
 8001866:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001868:	2304      	movs	r3, #4
 800186a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_ADC1_Init+0xf0>)
 8001876:	f003 fdbd 	bl	80053f4 <HAL_ADC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001880:	f000 faa4 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3730      	adds	r7, #48	; 0x30
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000bf4 	.word	0x20000bf4
 8001890:	1d500080 	.word	0x1d500080

08001894 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2220      	movs	r2, #32
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f008 ffdf 	bl	800a864 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018a8:	4a28      	ldr	r2, [pc, #160]	; (800194c <MX_ADC2_Init+0xb8>)
 80018aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018b6:	2208      	movs	r2, #8
 80018b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018ce:	2204      	movs	r2, #4
 80018d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_ADC2_Init+0xb4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001904:	4810      	ldr	r0, [pc, #64]	; (8001948 <MX_ADC2_Init+0xb4>)
 8001906:	f003 fb31 	bl	8004f6c <HAL_ADC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8001910:	f000 fa5c 	bl	8001dcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_ADC2_Init+0xbc>)
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001918:	2306      	movs	r3, #6
 800191a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001920:	237f      	movs	r3, #127	; 0x7f
 8001922:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001924:	2304      	movs	r3, #4
 8001926:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_ADC2_Init+0xb4>)
 8001932:	f003 fd5f 	bl	80053f4 <HAL_ADC_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800193c:	f000 fa46 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000b88 	.word	0x20000b88
 800194c:	50000100 	.word	0x50000100
 8001950:	08600004 	.word	0x08600004

08001954 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800195a:	463b      	mov	r3, r7
 800195c:	2230      	movs	r2, #48	; 0x30
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f008 ff7f 	bl	800a864 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <MX_DAC1_Init+0x84>)
 8001968:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <MX_DAC1_Init+0x88>)
 800196a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800196c:	481a      	ldr	r0, [pc, #104]	; (80019d8 <MX_DAC1_Init+0x84>)
 800196e:	f004 fb60 	bl	8006032 <HAL_DAC_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001978:	f000 fa28 	bl	8001dcc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800197c:	2302      	movs	r3, #2
 800197e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	4619      	mov	r1, r3
 80019a6:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_DAC1_Init+0x84>)
 80019a8:	f004 fbe0 	bl	800616c <HAL_DAC_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80019b2:	f000 fa0b 	bl	8001dcc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80019ba:	463b      	mov	r3, r7
 80019bc:	2210      	movs	r2, #16
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_DAC1_Init+0x84>)
 80019c2:	f004 fbd3 	bl	800616c <HAL_DAC_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 80019cc:	f000 f9fe 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	3730      	adds	r7, #48	; 0x30
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000b74 	.word	0x20000b74
 80019dc:	50000800 	.word	0x50000800

080019e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b098      	sub	sp, #96	; 0x60
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	615a      	str	r2, [r3, #20]
 8001a04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2234      	movs	r2, #52	; 0x34
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f008 ff29 	bl	800a864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a14:	4a3b      	ldr	r2, [pc, #236]	; (8001b04 <MX_TIM1_Init+0x124>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a18:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a26:	f242 1233 	movw	r2, #8499	; 0x2133
 8001a2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2c:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a3e:	4830      	ldr	r0, [pc, #192]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a40:	f006 fa42 	bl	8007ec8 <HAL_TIM_PWM_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a4a:	f000 f9bf 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4827      	ldr	r0, [pc, #156]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a62:	f007 fb9f 	bl	80091a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a6c:	f000 f9ae 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a70:	2360      	movs	r3, #96	; 0x60
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	481a      	ldr	r0, [pc, #104]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001a96:	f006 fd85 	bl	80085a4 <HAL_TIM_PWM_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001aa0:	f000 f994 	bl	8001dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8001ab0:	2332      	movs	r3, #50	; 0x32
 8001ab2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001abc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001aca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4807      	ldr	r0, [pc, #28]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001ae2:	f007 fbe1 	bl	80092a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001aec:	f000 f96e 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001af0:	4803      	ldr	r0, [pc, #12]	; (8001b00 <MX_TIM1_Init+0x120>)
 8001af2:	f002 fad1 	bl	8004098 <HAL_TIM_MspPostInit>

}
 8001af6:	bf00      	nop
 8001af8:	3760      	adds	r7, #96	; 0x60
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000cc0 	.word	0x20000cc0
 8001b04:	40012c00 	.word	0x40012c00

08001b08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001b36:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b56:	481f      	ldr	r0, [pc, #124]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001b58:	f006 f9b6 	bl	8007ec8 <HAL_TIM_PWM_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001b62:	f000 f933 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001b76:	f007 fb15 	bl	80091a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001b80:	f000 f924 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b84:	2360      	movs	r3, #96	; 0x60
 8001b86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	2204      	movs	r2, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001b9c:	f006 fd02 	bl	80085a4 <HAL_TIM_PWM_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001ba6:	f000 f911 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001bb6:	f006 fcf5 	bl	80085a4 <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001bc0:	f000 f904 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM2_Init+0xcc>)
 8001bc6:	f002 fa67 	bl	8004098 <HAL_TIM_MspPostInit>

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000d0c 	.word	0x20000d0c

08001bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bde:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <MX_USART2_UART_Init+0x94>)
 8001be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c22:	f007 fc4c 	bl	80094be <HAL_UART_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c2c:	f000 f8ce 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c30:	2100      	movs	r1, #0
 8001c32:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c34:	f008 fcdd 	bl	800a5f2 <HAL_UARTEx_SetTxFifoThreshold>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c3e:	f000 f8c5 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4808      	ldr	r0, [pc, #32]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c46:	f008 fd12 	bl	800a66e <HAL_UARTEx_SetRxFifoThreshold>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c50:	f000 f8bc 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_USART2_UART_Init+0x90>)
 8001c56:	f008 fc93 	bl	800a580 <HAL_UARTEx_DisableFifoMode>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c60:	f000 f8b4 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000d58 	.word	0x20000d58
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <MX_DMA_Init+0x60>)
 8001c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7a:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <MX_DMA_Init+0x60>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6493      	str	r3, [r2, #72]	; 0x48
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <MX_DMA_Init+0x60>)
 8001c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_DMA_Init+0x60>)
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <MX_DMA_Init+0x60>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6493      	str	r3, [r2, #72]	; 0x48
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <MX_DMA_Init+0x60>)
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	200b      	movs	r0, #11
 8001cac:	f004 f98d 	bl	8005fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cb0:	200b      	movs	r0, #11
 8001cb2:	f004 f9a4 	bl	8005ffe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	200c      	movs	r0, #12
 8001cbc:	f004 f985 	bl	8005fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001cc0:	200c      	movs	r0, #12
 8001cc2:	f004 f99c 	bl	8005ffe <HAL_NVIC_EnableIRQ>

}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <MX_GPIO_Init+0xc4>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <MX_GPIO_Init+0xc4>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <MX_GPIO_Init+0xc4>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <MX_GPIO_Init+0xc4>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <MX_GPIO_Init+0xc4>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <MX_GPIO_Init+0xc4>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <MX_GPIO_Init+0xc4>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <MX_GPIO_Init+0xc4>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <MX_GPIO_Init+0xc4>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_B_Pin|EN_A_Pin, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2111      	movs	r1, #17
 8001d36:	4819      	ldr	r0, [pc, #100]	; (8001d9c <MX_GPIO_Init+0xc8>)
 8001d38:	f005 f83a 	bl	8006db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_GPIO_Init+0xcc>)
 8001d44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4814      	ldr	r0, [pc, #80]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d52:	f004 fe93 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_B_Pin EN_A_Pin */
  GPIO_InitStruct.Pin = EN_B_Pin|EN_A_Pin;
 8001d56:	2311      	movs	r3, #17
 8001d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	480b      	ldr	r0, [pc, #44]	; (8001d9c <MX_GPIO_Init+0xc8>)
 8001d6e:	f004 fe85 	bl	8006a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8a:	f004 fe77 	bl	8006a7c <HAL_GPIO_Init>

}
 8001d8e:	bf00      	nop
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	48000400 	.word	0x48000400
 8001da0:	10110000 	.word	0x10110000
 8001da4:	48000800 	.word	0x48000800

08001da8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db8:	d104      	bne.n	8001dc4 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    /* Toggle LED2 */
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001dba:	2120      	movs	r1, #32
 8001dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc0:	f005 f80e 	bl	8006de0 <HAL_GPIO_TogglePin>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <_ZN3ros3MsgC1Ev+0x1c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	0800adf8 	.word	0x0800adf8

08001e1c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
      data()
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ffe8 	bl	8001dfc <_ZN3ros3MsgC1Ev>
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ffcf 	bl	8001dda <_ZN3ros4TimeC1Ev>
    {
    }
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	0800ade0 	.word	0x0800ade0

08001e4c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	b2ca      	uxtb	r2, r1
 8001e66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0a19      	lsrs	r1, r3, #8
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3301      	adds	r3, #1
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	b2ca      	uxtb	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0c19      	lsrs	r1, r3, #16
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3302      	adds	r3, #2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0e19      	lsrs	r1, r3, #24
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3303      	adds	r3, #3
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	b2ca      	uxtb	r2, r1
 8001eb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0a19      	lsrs	r1, r3, #8
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	0c19      	lsrs	r1, r3, #16
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3302      	adds	r3, #2
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0e19      	lsrs	r1, r3, #24
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3303      	adds	r3, #3
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3304      	adds	r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
      return offset;
 8001eee:	68fb      	ldr	r3, [r7, #12]
    }
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	440b      	add	r3, r1
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3302      	adds	r3, #2
 8001f36:	6839      	ldr	r1, [r7, #0]
 8001f38:	440b      	add	r3, r1
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3303      	adds	r3, #3
 8001f4c:	6839      	ldr	r1, [r7, #0]
 8001f4e:	440b      	add	r3, r1
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	061b      	lsls	r3, r3, #24
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3301      	adds	r3, #1
 8001f76:	6839      	ldr	r1, [r7, #0]
 8001f78:	440b      	add	r3, r1
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	440b      	add	r3, r1
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3303      	adds	r3, #3
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	440b      	add	r3, r1
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	60fb      	str	r3, [r7, #12]
     return offset;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
    }
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	0800ab10 	.word	0x0800ab10

08001fe0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	0800ab20 	.word	0x0800ab20

08001ffc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fef8 	bl	8001dfc <_ZN3ros3MsgC1Ev>
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	809a      	strh	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002028:	611a      	str	r2, [r3, #16]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
    {
    }
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	0800adc8 	.word	0x0800adc8
 8002040:	0800ab44 	.word	0x0800ab44

08002044 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	8899      	ldrh	r1, [r3, #4]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4413      	add	r3, r2
 800205c:	b2ca      	uxtb	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	889b      	ldrh	r3, [r3, #4]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	b299      	uxth	r1, r3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	4413      	add	r3, r2
 8002070:	b2ca      	uxtb	r2, r1
 8002072:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	3302      	adds	r3, #2
 8002078:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe f8ca 	bl	8000218 <strlen>
 8002084:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	69b9      	ldr	r1, [r7, #24]
 800208e:	4618      	mov	r0, r3
 8002090:	f001 f82a 	bl	80030e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3304      	adds	r3, #4
 8002098:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	18d0      	adds	r0, r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4619      	mov	r1, r3
 80020a8:	f008 fbce 	bl	800a848 <memcpy>
      offset += length_topic_name;
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe f8ad 	bl	8000218 <strlen>
 80020be:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	6979      	ldr	r1, [r7, #20]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 f80d 	bl	80030e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	18d0      	adds	r0, r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f008 fbb1 	bl	800a848 <memcpy>
      offset += length_message_type;
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4413      	add	r3, r2
 80020ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f890 	bl	8000218 <strlen>
 80020f8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	6939      	ldr	r1, [r7, #16]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fff0 	bl	80030e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3304      	adds	r3, #4
 800210c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	18d0      	adds	r0, r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4619      	mov	r1, r3
 800211c:	f008 fb94 	bl	800a848 <memcpy>
      offset += length_md5sum;
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800212e:	68f9      	ldr	r1, [r7, #12]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	4413      	add	r3, r2
 8002136:	b2ca      	uxtb	r2, r1
 8002138:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	0a19      	lsrs	r1, r3, #8
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	b2ca      	uxtb	r2, r1
 8002148:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	0c19      	lsrs	r1, r3, #16
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3302      	adds	r3, #2
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	b2ca      	uxtb	r2, r1
 8002158:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	0e19      	lsrs	r1, r3, #24
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3303      	adds	r3, #3
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	4413      	add	r3, r2
 8002166:	b2ca      	uxtb	r2, r1
 8002168:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002170:	69fb      	ldr	r3, [r7, #28]
    }
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800217a:	b580      	push	{r7, lr}
 800217c:	b08a      	sub	sp, #40	; 0x28
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4413      	add	r3, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	889b      	ldrh	r3, [r3, #4]
 800219a:	b21a      	sxth	r2, r3
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	3301      	adds	r3, #1
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	440b      	add	r3, r1
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	3302      	adds	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	441a      	add	r2, r3
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 ffac 	bl	8003124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	3304      	adds	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	4413      	add	r3, r2
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	429a      	cmp	r2, r3
 80021e0:	d20c      	bcs.n	80021fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	441a      	add	r2, r3
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	440b      	add	r3, r1
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	3301      	adds	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e7ec      	b.n	80021d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4413      	add	r3, r2
 8002202:	3b01      	subs	r3, #1
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	4413      	add	r3, r2
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	3b01      	subs	r3, #1
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	441a      	add	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4413      	add	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	441a      	add	r2, r3
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 ff79 	bl	8003124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3304      	adds	r3, #4
 8002236:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	6a3a      	ldr	r2, [r7, #32]
 8002244:	429a      	cmp	r2, r3
 8002246:	d20c      	bcs.n	8002262 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	441a      	add	r2, r3
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	3b01      	subs	r3, #1
 8002252:	6839      	ldr	r1, [r7, #0]
 8002254:	440b      	add	r3, r1
 8002256:	7812      	ldrb	r2, [r2, #0]
 8002258:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	3301      	adds	r3, #1
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	e7ec      	b.n	800223c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	3b01      	subs	r3, #1
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	4413      	add	r3, r2
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	3b01      	subs	r3, #1
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	441a      	add	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	441a      	add	r2, r3
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f000 ff46 	bl	8003124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	3304      	adds	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d20c      	bcs.n	80022c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	441a      	add	r2, r3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6839      	ldr	r1, [r7, #0]
 80022ba:	440b      	add	r3, r1
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3301      	adds	r3, #1
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e7ec      	b.n	80022a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4413      	add	r3, r2
 80022ce:	3b01      	subs	r3, #1
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	3b01      	subs	r3, #1
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	441a      	add	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4413      	add	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	440a      	add	r2, r1
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	3301      	adds	r3, #1
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	440b      	add	r3, r1
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4313      	orrs	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	3302      	adds	r3, #2
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	440b      	add	r3, r1
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	4313      	orrs	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	3303      	adds	r3, #3
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	440b      	add	r3, r1
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	061b      	lsls	r3, r3, #24
 8002330:	4313      	orrs	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	3304      	adds	r3, #4
 800233e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002340:	69bb      	ldr	r3, [r7, #24]
    }
 8002342:	4618      	mov	r0, r3
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	0800ab48 	.word	0x0800ab48

08002368 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	0800ab64 	.word	0x0800ab64

08002384 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fd34 	bl	8001dfc <_ZN3ros3MsgC1Ev>
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	711a      	strb	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80023a4:	609a      	str	r2, [r3, #8]
    {
    }
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	0800adb0 	.word	0x0800adb0
 80023b4:	0800ab44 	.word	0x0800ab44

080023b8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	7912      	ldrb	r2, [r2, #4]
 80023d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fd ff1b 	bl	8000218 <strlen>
 80023e2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fe7b 	bl	80030e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3304      	adds	r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	18d0      	adds	r0, r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	4619      	mov	r1, r3
 8002406:	f008 fa1f 	bl	800a848 <memcpy>
      offset += length_msg;
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
      return offset;
 8002412:	68fb      	ldr	r3, [r7, #12]
    }
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	4413      	add	r3, r2
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	3301      	adds	r3, #1
 800243a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	441a      	add	r2, r3
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fe6b 	bl	8003124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	3304      	adds	r3, #4
 8002452:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	d20c      	bcs.n	800247e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	441a      	add	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3b01      	subs	r3, #1
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	440b      	add	r3, r1
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	3301      	adds	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e7ec      	b.n	8002458 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	3b01      	subs	r3, #1
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	4413      	add	r3, r2
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	3b01      	subs	r3, #1
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
     return offset;
 80024a2:	693b      	ldr	r3, [r7, #16]
    }
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	0800ab88 	.word	0x0800ab88

080024c8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	0800ab9c 	.word	0x0800ab9c

080024e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fc84 	bl	8001dfc <_ZN3ros3MsgC1Ev>
 80024f4:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	619a      	str	r2, [r3, #24]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	61da      	str	r2, [r3, #28]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	0800ad98 	.word	0x0800ad98

0800252c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	0a19      	lsrs	r1, r3, #8
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	3301      	adds	r3, #1
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4413      	add	r3, r2
 8002556:	b2ca      	uxtb	r2, r1
 8002558:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0c19      	lsrs	r1, r3, #16
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	3302      	adds	r3, #2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	b2ca      	uxtb	r2, r1
 800256a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	0e19      	lsrs	r1, r3, #24
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	3303      	adds	r3, #3
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	b2ca      	uxtb	r2, r1
 800257c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	3304      	adds	r3, #4
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	429a      	cmp	r2, r3
 8002590:	d22b      	bcs.n	80025ea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80025a0:	6939      	ldr	r1, [r7, #16]
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	b2ca      	uxtb	r2, r1
 80025aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	0a19      	lsrs	r1, r3, #8
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	3301      	adds	r3, #1
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	b2ca      	uxtb	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	0c19      	lsrs	r1, r3, #16
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	3302      	adds	r3, #2
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	b2ca      	uxtb	r2, r1
 80025ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	0e19      	lsrs	r1, r3, #24
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	3303      	adds	r3, #3
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	b2ca      	uxtb	r2, r1
 80025da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	3304      	adds	r3, #4
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	3301      	adds	r3, #1
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	e7ce      	b.n	8002588 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6919      	ldr	r1, [r3, #16]
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	b2ca      	uxtb	r2, r1
 80025f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	0a19      	lsrs	r1, r3, #8
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	3301      	adds	r3, #1
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	4413      	add	r3, r2
 8002606:	b2ca      	uxtb	r2, r1
 8002608:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	0c19      	lsrs	r1, r3, #16
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	3302      	adds	r3, #2
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	4413      	add	r3, r2
 8002618:	b2ca      	uxtb	r2, r1
 800261a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	0e19      	lsrs	r1, r3, #24
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	3303      	adds	r3, #3
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4413      	add	r3, r2
 800262a:	b2ca      	uxtb	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	3304      	adds	r3, #4
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	429a      	cmp	r2, r3
 8002640:	d22b      	bcs.n	800269a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	4413      	add	r3, r2
 8002658:	b2ca      	uxtb	r2, r1
 800265a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	0a19      	lsrs	r1, r3, #8
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	3301      	adds	r3, #1
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4413      	add	r3, r2
 8002668:	b2ca      	uxtb	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	0c19      	lsrs	r1, r3, #16
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	3302      	adds	r3, #2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	4413      	add	r3, r2
 8002678:	b2ca      	uxtb	r2, r1
 800267a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	0e19      	lsrs	r1, r3, #24
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	3303      	adds	r3, #3
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	4413      	add	r3, r2
 8002688:	b2ca      	uxtb	r2, r1
 800268a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3304      	adds	r3, #4
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e7ce      	b.n	8002638 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69d9      	ldr	r1, [r3, #28]
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	b2ca      	uxtb	r2, r1
 80026a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	0a19      	lsrs	r1, r3, #8
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	3301      	adds	r3, #1
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	4413      	add	r3, r2
 80026b6:	b2ca      	uxtb	r2, r1
 80026b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	0c19      	lsrs	r1, r3, #16
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	3302      	adds	r3, #2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	b2ca      	uxtb	r2, r1
 80026ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	0e19      	lsrs	r1, r3, #24
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	3303      	adds	r3, #3
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	b2ca      	uxtb	r2, r1
 80026dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	3304      	adds	r3, #4
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d228      	bcs.n	8002744 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd fd8a 	bl	8000218 <strlen>
 8002704:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	4413      	add	r3, r2
 800270c:	6979      	ldr	r1, [r7, #20]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fcea 	bl	80030e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	3304      	adds	r3, #4
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	18d0      	adds	r0, r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4619      	mov	r1, r3
 8002730:	f008 f88a 	bl	800a848 <memcpy>
      offset += length_stringsi;
 8002734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	4413      	add	r3, r2
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	3301      	adds	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e7d1      	b.n	80026e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002746:	4618      	mov	r0, r3
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800274e:	b580      	push	{r7, lr}
 8002750:	b08e      	sub	sp, #56	; 0x38
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	4413      	add	r3, r2
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	3301      	adds	r3, #1
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	4413      	add	r3, r2
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	6a3a      	ldr	r2, [r7, #32]
 8002774:	4313      	orrs	r3, r2
 8002776:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	3302      	adds	r3, #2
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4413      	add	r3, r2
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	041b      	lsls	r3, r3, #16
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	4313      	orrs	r3, r2
 8002788:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800278a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278c:	3303      	adds	r3, #3
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4413      	add	r3, r2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	6a3a      	ldr	r2, [r7, #32]
 8002798:	4313      	orrs	r3, r2
 800279a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	3304      	adds	r3, #4
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	6a3a      	ldr	r2, [r7, #32]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d90a      	bls.n	80027c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f008 f85c 	bl	800a874 <realloc>
 80027bc:	4602      	mov	r2, r0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a3a      	ldr	r2, [r7, #32]
 80027c6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80027c8:	2300      	movs	r3, #0
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d236      	bcs.n	8002844 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027de:	6839      	ldr	r1, [r7, #0]
 80027e0:	440a      	add	r2, r1
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	3301      	adds	r3, #1
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	440b      	add	r3, r1
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fe:	3302      	adds	r3, #2
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	440b      	add	r3, r1
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	3303      	adds	r3, #3
 8002812:	6839      	ldr	r1, [r7, #0]
 8002814:	440b      	add	r3, r1
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	3304      	adds	r3, #4
 8002828:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	3301      	adds	r3, #1
 8002840:	633b      	str	r3, [r7, #48]	; 0x30
 8002842:	e7c3      	b.n	80027cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	3301      	adds	r3, #1
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	4413      	add	r3, r2
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	4313      	orrs	r3, r2
 800285e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	3302      	adds	r3, #2
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	4413      	add	r3, r2
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	4313      	orrs	r3, r2
 8002870:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002874:	3303      	adds	r3, #3
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	4313      	orrs	r3, r2
 8002882:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002886:	3304      	adds	r3, #4
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	429a      	cmp	r2, r3
 8002892:	d90a      	bls.n	80028aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f007 ffe8 	bl	800a874 <realloc>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d236      	bcs.n	800292c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c6:	6839      	ldr	r1, [r7, #0]
 80028c8:	440a      	add	r2, r1
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	3301      	adds	r3, #1
 80028d6:	6839      	ldr	r1, [r7, #0]
 80028d8:	440b      	add	r3, r1
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	3302      	adds	r3, #2
 80028e8:	6839      	ldr	r1, [r7, #0]
 80028ea:	440b      	add	r3, r1
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f8:	3303      	adds	r3, #3
 80028fa:	6839      	ldr	r1, [r7, #0]
 80028fc:	440b      	add	r3, r1
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290e:	3304      	adds	r3, #4
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	3214      	adds	r2, #20
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	3301      	adds	r3, #1
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292a:	e7c3      	b.n	80028b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002938:	3301      	adds	r3, #1
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	4413      	add	r3, r2
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294a:	3302      	adds	r3, #2
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	041b      	lsls	r3, r3, #16
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	3303      	adds	r3, #3
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	4413      	add	r3, r2
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800296c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296e:	3304      	adds	r3, #4
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	429a      	cmp	r2, r3
 800297a:	d90a      	bls.n	8002992 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f007 ff74 	bl	800a874 <realloc>
 800298c:	4602      	mov	r2, r0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002998:	2300      	movs	r3, #0
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d23f      	bcs.n	8002a26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	441a      	add	r2, r3
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fbb6 	bl	8003124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	3304      	adds	r3, #4
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20c      	bcs.n	80029e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	441a      	add	r2, r3
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6839      	ldr	r1, [r7, #0]
 80029da:	440b      	add	r3, r1
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	3301      	adds	r3, #1
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	e7ec      	b.n	80029c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80029e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	3b01      	subs	r3, #1
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80029f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fa:	3b01      	subs	r3, #1
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	441a      	add	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4413      	add	r3, r2
 8002a0a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	3220      	adds	r2, #32
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	3301      	adds	r3, #1
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a24:	e7ba      	b.n	800299c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3738      	adds	r7, #56	; 0x38
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	0800acd4 	.word	0x0800acd4

08002a4c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	0800abc0 	.word	0x0800abc0

08002a68 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	611a      	str	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68d8      	ldr	r0, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6891      	ldr	r1, [r2, #8]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	4798      	blx	r3
 8002ab4:	4603      	mov	r3, r0
  };
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
  }
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <_ZN13STM32HardwareC1Ev+0x34>)
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	20000d58 	.word	0x20000d58

08002b34 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f804 	bl	8002b4a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f006 fd7e 	bl	8009660 <HAL_UART_Receive_DMA>
    }
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ZN13STM32Hardware4readEv>:

    int read(){
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b78:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ffa8 	bl	8002ad6 <_ZN13STM32Hardware10getRdmaIndEv>
 8002b86:	4603      	mov	r3, r0
 8002b88:	429c      	cmp	r4, r3
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d012      	beq.n	8002bbc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b9c:	1c59      	adds	r1, r3, #1
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	791b      	ldrb	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    }
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd90      	pop	{r4, r7, pc}
	...

08002bc8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d108      	bne.n	8002bee <_ZN13STM32Hardware5flushEv+0x26>
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f083 0301 	eor.w	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <_ZN13STM32Hardware5flushEv+0x26>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <_ZN13STM32Hardware5flushEv+0x28>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03f      	beq.n	8002c74 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d031      	beq.n	8002c6e <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d20a      	bcs.n	8002c30 <_ZN13STM32Hardware5flushEv+0x68>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	e006      	b.n	8002c3e <_ZN13STM32Hardware5flushEv+0x76>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	89fa      	ldrh	r2, [r7, #14]
 8002c54:	4619      	mov	r1, r3
 8002c56:	f006 fc83 	bl	8009560 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002c60:	89fb      	ldrh	r3, [r7, #14]
 8002c62:	4413      	add	r3, r2
 8002c64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002c6e:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
      }
    }
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200000a4 	.word	0x200000a4

08002c80 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
      int n = length;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c96:	bfa8      	it	ge
 8002c98:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002c9c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ca4:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	4293      	cmp	r3, r2
 8002cac:	bf28      	it	cs
 8002cae:	4613      	movcs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002cb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f007 fdbf 	bl	800a848 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d00b      	beq.n	8002cfe <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	18d1      	adds	r1, r2, r3
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f007 fda5 	bl	800a848 <memcpy>
      }

      flush();
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7ff ff62 	bl	8002bc8 <_ZN13STM32Hardware5flushEv>
    }
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	f001 fef0 	bl	8004af8 <HAL_GetTick>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
      data(0)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff f864 	bl	8001dfc <_ZN3ros3MsgC1Ev>
 8002d34:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	809a      	strh	r2, [r3, #4]
    {
    }
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	0800ad54 	.word	0x0800ad54

08002d50 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d64:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002d66:	8939      	ldrh	r1, [r7, #8]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	b2ca      	uxtb	r2, r1
 8002d70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002d72:	893b      	ldrh	r3, [r7, #8]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	b299      	uxth	r1, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	b2ca      	uxtb	r2, r1
 8002d82:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3302      	adds	r3, #2
 8002d88:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
    }
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002daa:	893a      	ldrh	r2, [r7, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6839      	ldr	r1, [r7, #0]
 8002db0:	440b      	add	r3, r1
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	4313      	orrs	r3, r2
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dbc:	893b      	ldrh	r3, [r7, #8]
 8002dbe:	b21a      	sxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	440b      	add	r3, r1
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	b21b      	sxth	r3, r3
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002dd6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3302      	adds	r3, #2
 8002de2:	60fb      	str	r3, [r7, #12]
     return offset;
 8002de4:	68fb      	ldr	r3, [r7, #12]
    }
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <_ZN8std_msgs5Int167getTypeEv>:

    const char * getType(){ return "std_msgs/Int16"; };
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	0800abe4 	.word	0x0800abe4

08002e10 <_ZN8std_msgs5Int166getMD5Ev>:
    const char * getMD5(){ return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	0800abf4 	.word	0x0800abf4

08002e2c <_ZN11coorsa_rfsm14SetpointUpdateC1Ev>:
      typedef int8_t _LIM_type;
      _LIM_type LIM;
      typedef float _value_type;
      _value_type value;

    SetpointUpdate():
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
      LIM(0),
      value(0)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe ffe0 	bl	8001dfc <_ZN3ros3MsgC1Ev>
 8002e3c:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <_ZN11coorsa_rfsm14SetpointUpdateC1Ev+0x30>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	711a      	strb	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
    {
    }
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	0800ad3c 	.word	0x0800ad3c

08002e60 <_ZNK11coorsa_rfsm14SetpointUpdate9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_LIM;
      u_LIM.real = this->LIM;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002e74:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_LIM.base >> (8 * 0)) & 0xFF;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	7c3a      	ldrb	r2, [r7, #16]
 8002e7e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->LIM);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3301      	adds	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_value;
      u_value.real = this->value;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_value.base >> (8 * 0)) & 0xFF;
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	b2ca      	uxtb	r2, r1
 8002e96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_value.base >> (8 * 1)) & 0xFF;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	0a19      	lsrs	r1, r3, #8
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b2ca      	uxtb	r2, r1
 8002ea6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_value.base >> (8 * 2)) & 0xFF;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	0c19      	lsrs	r1, r3, #16
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3302      	adds	r3, #2
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	b2ca      	uxtb	r2, r1
 8002eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_value.base >> (8 * 3)) & 0xFF;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	0e19      	lsrs	r1, r3, #24
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3303      	adds	r3, #3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b2ca      	uxtb	r2, r1
 8002ec6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->value);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	617b      	str	r3, [r7, #20]
      return offset;
 8002ece:	697b      	ldr	r3, [r7, #20]
    }
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	371c      	adds	r7, #28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_ZN11coorsa_rfsm14SetpointUpdate11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_LIM;
      u_LIM.base = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	743b      	strb	r3, [r7, #16]
      u_LIM.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eee:	7c3a      	ldrb	r2, [r7, #16]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6839      	ldr	r1, [r7, #0]
 8002ef4:	440b      	add	r3, r1
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	743b      	strb	r3, [r7, #16]
      this->LIM = u_LIM.real;
 8002efe:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->LIM);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_value;
      u_value.base = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	6839      	ldr	r1, [r7, #0]
 8002f16:	440a      	add	r2, r1
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3301      	adds	r3, #1
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	440b      	add	r3, r1
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3302      	adds	r3, #2
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	440b      	add	r3, r1
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3303      	adds	r3, #3
 8002f48:	6839      	ldr	r1, [r7, #0]
 8002f4a:	440b      	add	r3, r1
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	061b      	lsls	r3, r3, #24
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
      this->value = u_value.real;
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->value);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	617b      	str	r3, [r7, #20]
     return offset;
 8002f60:	697b      	ldr	r3, [r7, #20]
    }
 8002f62:	4618      	mov	r0, r3
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <_ZN11coorsa_rfsm14SetpointUpdate7getTypeEv>:

    const char * getType(){ return "coorsa_rfsm/SetpointUpdate"; };
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <_ZN11coorsa_rfsm14SetpointUpdate7getTypeEv+0x18>)
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	0800ac18 	.word	0x0800ac18

08002f8c <_ZN11coorsa_rfsm14SetpointUpdate6getMD5Ev>:
    const char * getMD5(){ return "a5435513701bc6bab9ada8288fb59da4"; };
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <_ZN11coorsa_rfsm14SetpointUpdate6getMD5Ev+0x18>)
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	0800ac34 	.word	0x0800ac34

08002fa8 <loop>:

int i,state;


void loop(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <loop+0x10>)
 8002fae:	f000 f9c7 	bl	8003340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	//HAL_Delay(500);				//Aspetto 0.5s
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200000d0 	.word	0x200000d0

08002fbc <setup>:

void setup(void){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	WaitingForResult = 0;
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <setup+0x34>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
	state = 0;
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <setup+0x38>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
	nh.initNode();			//Inizializzo il nodo
 8002fcc:	480a      	ldr	r0, [pc, #40]	; (8002ff8 <setup+0x3c>)
 8002fce:	f000 fb90 	bl	80036f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);	//Pubblico su chatter
 8002fd2:	490a      	ldr	r1, [pc, #40]	; (8002ffc <setup+0x40>)
 8002fd4:	4808      	ldr	r0, [pc, #32]	; (8002ff8 <setup+0x3c>)
 8002fd6:	f000 fba9 	bl	800372c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(sub);		//Sottoscrivo a command
 8002fda:	4909      	ldr	r1, [pc, #36]	; (8003000 <setup+0x44>)
 8002fdc:	4806      	ldr	r0, [pc, #24]	; (8002ff8 <setup+0x3c>)
 8002fde:	f000 fbd5 	bl	800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>
	nh.subscribe(subsp);
 8002fe2:	4908      	ldr	r1, [pc, #32]	; (8003004 <setup+0x48>)
 8002fe4:	4804      	ldr	r0, [pc, #16]	; (8002ff8 <setup+0x3c>)
 8002fe6:	f000 fbfc 	bl	80037e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_>
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200000ac 	.word	0x200000ac
 8002ff4:	20000a6c 	.word	0x20000a6c
 8002ff8:	200000d0 	.word	0x200000d0
 8002ffc:	20000a14 	.word	0x20000a14
 8003000:	20000a28 	.word	0x20000a28
 8003004:	20000a44 	.word	0x20000a44

08003008 <sendMess>:


void sendMess(int mess){
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	RosMess.data = mess;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	b21a      	sxth	r2, r3
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <sendMess+0x28>)
 8003016:	809a      	strh	r2, [r3, #4]

	chatter.publish(&RosMess);				//Lo pubblico sul chatter
 8003018:	4905      	ldr	r1, [pc, #20]	; (8003030 <sendMess+0x28>)
 800301a:	4806      	ldr	r0, [pc, #24]	; (8003034 <sendMess+0x2c>)
 800301c:	f7ff fd3b 	bl	8002a96 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8003020:	4805      	ldr	r0, [pc, #20]	; (8003038 <sendMess+0x30>)
 8003022:	f000 f98d 	bl	8003340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000a64 	.word	0x20000a64
 8003034:	20000a14 	.word	0x20000a14
 8003038:	200000d0 	.word	0x200000d0

0800303c <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE>:

void SetpointUpdateHandler(const coorsa_rfsm::SetpointUpdate& msg){
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

	if(msg.value > 2.5f || msg.value < 0.1f) return;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	edd3 7a02 	vldr	s15, [r3, #8]
 800304a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800304e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	dc25      	bgt.n	80030a4 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x68>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	edd3 7a02 	vldr	s15, [r3, #8]
 800305e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80030b0 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x74>
 8003062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306a:	d41b      	bmi.n	80030a4 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x68>

	if(msg.LIM == 0){
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d103      	bne.n	800307e <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x42>
		ControlPanel.MID_LIM_DOWN = msg.value;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x78>)
 800307c:	6193      	str	r3, [r2, #24]
	}
	if(msg.LIM == 1){
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d103      	bne.n	8003090 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x54>
		ControlPanel.MID_LIM_UP = msg.value;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x78>)
 800308e:	6153      	str	r3, [r2, #20]
	}
	if(msg.LIM == 2){
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d105      	bne.n	80030a6 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x6a>
		ControlPanel.UP_LIM = msg.value;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x78>)
 80030a0:	61d3      	str	r3, [r2, #28]
 80030a2:	e000      	b.n	80030a6 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x6a>
	if(msg.value > 2.5f || msg.value < 0.1f) return;
 80030a4:	bf00      	nop
	}
}
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	3dcccccd 	.word	0x3dcccccd
 80030b4:	200000b0 	.word	0x200000b0

080030b8 <_Z11cmdCallbackRKN8std_msgs5Int16E>:

void cmdCallback(const std_msgs::Int16& msg){	//Callback del subscriber
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

	WaitingForResult = 1;
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <_Z11cmdCallbackRKN8std_msgs5Int16E+0x28>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
	Mess = msg.data;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <_Z11cmdCallbackRKN8std_msgs5Int16E+0x2c>)
 80030d0:	601a      	str	r2, [r3, #0]
	//sendMess(msg.data);	//Giro il messaggio al chatter
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	200000ac 	.word	0x200000ac
 80030e4:	200000a8 	.word	0x200000a8

080030e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d80d      	bhi.n	8003118 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	fa22 f103 	lsr.w	r1, r2, r3
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	b2ca      	uxtb	r2, r1
 800310e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3301      	adds	r3, #1
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e7ee      	b.n	80030f6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d811      	bhi.n	8003162 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6839      	ldr	r1, [r7, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	440a      	add	r2, r1
 8003148:	7812      	ldrb	r2, [r2, #0]
 800314a:	4611      	mov	r1, r2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	00d2      	lsls	r2, r2, #3
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e7ea      	b.n	8003138 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	0800ad84 	.word	0x0800ad84

08003190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ffe8 	bl	8003170 <_ZN3ros15NodeHandleBase_C1Ev>
 80031a0:	4a3a      	ldr	r2, [pc, #232]	; (800328c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fca6 	bl	8002afc <_ZN13STM32HardwareC1Ev>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f990 	bl	80024e4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b18      	cmp	r3, #24
 80031cc:	d80b      	bhi.n	80031e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	e7f0      	b.n	80031c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b18      	cmp	r3, #24
 80031ee:	d80a      	bhi.n	8003206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031f8:	2100      	movs	r1, #0
 80031fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	3301      	adds	r3, #1
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e7f1      	b.n	80031ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003210:	d20a      	bcs.n	8003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e7f0      	b.n	800320a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003232:	d20a      	bcs.n	800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4413      	add	r3, r2
 800323a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3301      	adds	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	e7f0      	b.n	800322c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	0800ad28 	.word	0x0800ad28

08003290 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	0800ad6c 	.word	0x0800ad6c

080032b0 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ffe5 	bl	8003290 <_ZN3ros11Subscriber_C1Ev>
 80032c6:	4a0b      	ldr	r2, [pc, #44]	; (80032f4 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei+0x44>)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	330c      	adds	r3, #12
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fd27 	bl	8002d24 <_ZN8std_msgs5Int16C1Ev>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	615a      	str	r2, [r3, #20]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	609a      	str	r2, [r3, #8]
  };
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	0800ad10 	.word	0x0800ad10

080032f8 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ffc1 	bl	8003290 <_ZN3ros11Subscriber_C1Ev>
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	330c      	adds	r3, #12
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fd87 	bl	8002e2c <_ZN11coorsa_rfsm14SetpointUpdateC1Ev>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	619a      	str	r2, [r3, #24]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	61da      	str	r2, [r3, #28]
    topic_ = topic_name;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]
  };
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	0800acf8 	.word	0x0800acf8

08003340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fcdd 	bl	8002d0c <_ZN13STM32Hardware4timeEv>
 8003352:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003362:	4293      	cmp	r3, r2
 8003364:	d903      	bls.n	800336e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	429a      	cmp	r2, r3
 8003382:	d903      	bls.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003392:	2b00      	cmp	r3, #0
 8003394:	d014      	beq.n	80033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fcb6 	bl	8002d0c <_ZN13STM32Hardware4timeEv>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad2      	subs	r2, r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80033ac:	429a      	cmp	r2, r3
 80033ae:	bf8c      	ite	hi
 80033b0:	2301      	movhi	r3, #1
 80033b2:	2300      	movls	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 80033ba:	f06f 0301 	mvn.w	r3, #1
 80033be:	e194      	b.n	80036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      int data = hardware_.read();
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fbd1 	bl	8002b6c <_ZN13STM32Hardware4readEv>
 80033ca:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f2c0 8174 	blt.w	80036bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
        break;
      checksum_ += data;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	441a      	add	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033ea:	2b07      	cmp	r3, #7
 80033ec:	d11e      	bne.n	800342c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80033f4:	1c59      	adds	r1, r3, #1
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	b2d1      	uxtb	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	460a      	mov	r2, r1
 8003406:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003410:	1e5a      	subs	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1b4      	bne.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2208      	movs	r2, #8
 8003426:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800342a:	e7af      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003432:	2b00      	cmp	r3, #0
 8003434:	d128      	bne.n	8003488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2bff      	cmp	r3, #255	; 0xff
 800343a:	d10d      	bne.n	8003458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f103 0214 	add.w	r2, r3, #20
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003456:	e799      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fc55 	bl	8002d0c <_ZN13STM32Hardware4timeEv>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	bf8c      	ite	hi
 8003470:	2301      	movhi	r3, #1
 8003472:	2300      	movls	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d088      	beq.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003482:	f06f 0301 	mvn.w	r3, #1
 8003486:	e130      	b.n	80036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800348e:	2b01      	cmp	r3, #1
 8003490:	d118      	bne.n	80034c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2bfe      	cmp	r3, #254	; 0xfe
 8003496:	d107      	bne.n	80034a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80034a6:	e771      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f47f af68 	bne.w	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f9bb 	bl	8003838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80034c2:	e763      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d113      	bne.n	80034f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80034f4:	e74a      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d110      	bne.n	8003522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003520:	e734      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003528:	2b04      	cmp	r3, #4
 800352a:	d116      	bne.n	800355a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003532:	425a      	negs	r2, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	bf58      	it	pl
 800353a:	4253      	negpl	r3, r2
 800353c:	2bff      	cmp	r3, #255	; 0xff
 800353e:	d107      	bne.n	8003550 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800354e:	e71d      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003558:	e718      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003560:	2b05      	cmp	r3, #5
 8003562:	d10f      	bne.n	8003584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003582:	e703      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800358a:	2b06      	cmp	r3, #6
 800358c:	d117      	bne.n	80035be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	441a      	add	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2207      	movs	r2, #7
 80035a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f47f aeec 	bne.w	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2208      	movs	r2, #8
 80035b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035bc:	e6e6      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	f47f aee1 	bne.w	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80035d8:	425a      	negs	r2, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	bf58      	it	pl
 80035e0:	4253      	negpl	r3, r2
 80035e2:	2bff      	cmp	r3, #255	; 0xff
 80035e4:	f47f aed2 	bne.w	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d110      	bne.n	8003614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f920 	bl	8003838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f93b 	bl	8003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800360e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003612:	e06a      	b.n	80036ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800361a:	2b0a      	cmp	r3, #10
 800361c:	d107      	bne.n	800362e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
          {
            syncTime(message_in);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa04 	bl	8003a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800362c:	e6ae      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003634:	2b06      	cmp	r3, #6
 8003636:	d10e      	bne.n	8003656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
          {
            req_param_resp.deserialize(message_in);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f7ff f881 	bl	800274e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003654:	e69a      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800365c:	2b0b      	cmp	r3, #11
 800365e:	d104      	bne.n	800366a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
          {
            configured_ = false;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003668:	e690      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003670:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f202 2222 	addw	r2, r2, #546	; 0x222
 800367a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f43f ae84 	beq.w	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800368a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003694:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800369e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80036a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80036b6:	4611      	mov	r1, r2
 80036b8:	4798      	blx	r3
    while (true)
 80036ba:	e667      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80036bc:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00f      	beq.n	80036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d906      	bls.n	80036e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
    {
      requestSyncTime();
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8ac 	bl	8003838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 80036e8:	2300      	movs	r3, #0
  }
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
    hardware_.init();
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fa18 	bl	8002b34 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b18      	cmp	r3, #24
 800373e:	dc1e      	bgt.n	800377e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d111      	bne.n	8003776 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	60da      	str	r2, [r3, #12]
        return true;
 8003772:	2301      	movs	r3, #1
 8003774:	e004      	b.n	8003780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3301      	adds	r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e7dd      	b.n	800373a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800377e:	2300      	movs	r3, #0
  }
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b18      	cmp	r3, #24
 800379e:	dc19      	bgt.n	80037d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10d      	bne.n	80037cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	605a      	str	r2, [r3, #4]
        return true;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e004      	b.n	80037d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3301      	adds	r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e7e2      	b.n	800379a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0xe>
      }
    }
    return false;
 80037d4:	2300      	movs	r3, #0
  }
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b18      	cmp	r3, #24
 80037f4:	dc19      	bgt.n	800382a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10d      	bne.n	8003822 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003806:	6839      	ldr	r1, [r7, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	605a      	str	r2, [r3, #4]
        return true;
 800381e:	2301      	movs	r3, #1
 8003820:	e004      	b.n	800382c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3301      	adds	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e7e2      	b.n	80037f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0xe>
    return false;
 800382a:	2300      	movs	r3, #0
  }
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe fae9 	bl	8001e1c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f107 020c 	add.w	r2, r7, #12
 8003854:	210a      	movs	r1, #10
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
    rt_time = hardware_.time();
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fa54 	bl	8002d0c <_ZN13STM32Hardware4timeEv>
 8003864:	4602      	mov	r2, r0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800386c:	bf00      	nop
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b08b      	sub	sp, #44	; 0x2c
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800387c:	f107 030c 	add.w	r3, r7, #12
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fbbb 	bl	8001ffc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	2b18      	cmp	r3, #24
 800388e:	dc63      	bgt.n	8003958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d056      	beq.n	8003950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3308      	adds	r3, #8
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4608      	mov	r0, r1
 80038f0:	4798      	blx	r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4608      	mov	r0, r1
 800391e:	4798      	blx	r3
 8003920:	4603      	mov	r3, r0
 8003922:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003928:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681c      	ldr	r4, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff f8bd 	bl	8002abe <_ZN3ros9Publisher15getEndpointTypeEv>
 8003944:	4601      	mov	r1, r0
 8003946:	f107 030c 	add.w	r3, r7, #12
 800394a:	461a      	mov	r2, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	3301      	adds	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	e798      	b.n	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003958:	2300      	movs	r3, #0
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	2b18      	cmp	r3, #24
 8003960:	dc5f      	bgt.n	8003a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003966:	f202 2222 	addw	r2, r2, #546	; 0x222
 800396a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d053      	beq.n	8003a1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	f202 2222 	addw	r2, r2, #546	; 0x222
 800397a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	b29b      	uxth	r3, r3
 8003982:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003988:	f202 2222 	addw	r2, r2, #546	; 0x222
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003998:	f202 2222 	addw	r2, r2, #546	; 0x222
 800399c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3308      	adds	r3, #8
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4608      	mov	r0, r1
 80039b4:	4798      	blx	r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4608      	mov	r0, r1
 80039da:	4798      	blx	r3
 80039dc:	4603      	mov	r3, r0
 80039de:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80039e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e4:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681c      	ldr	r4, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3304      	adds	r3, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4608      	mov	r0, r1
 8003a0c:	4798      	blx	r3
 8003a0e:	4601      	mov	r1, r0
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	461a      	mov	r2, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a20:	e79c      	b.n	800395c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003a2a:	bf00      	nop
 8003a2c:	372c      	adds	r7, #44	; 0x2c
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd90      	pop	{r4, r7, pc}
	...

08003a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe f9ea 	bl	8001e1c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff f95d 	bl	8002d0c <_ZN13STM32Hardware4timeEv>
 8003a52:	4602      	mov	r2, r0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003a5e:	f107 0308 	add.w	r3, r7, #8
 8003a62:	6839      	ldr	r1, [r7, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe fa49 	bl	8001efc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4915      	ldr	r1, [pc, #84]	; (8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a70:	fba1 1303 	umull	r1, r3, r1, r3
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	4413      	add	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003a7a:	6939      	ldr	r1, [r7, #16]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a80:	fba3 0302 	umull	r0, r3, r3, r2
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a8a:	fb00 f303 	mul.w	r3, r0, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	440b      	add	r3, r1
 8003a98:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8a4 	bl	8003bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff f92d 	bl	8002d0c <_ZN13STM32Hardware4timeEv>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	10624dd3 	.word	0x10624dd3
 8003ac8:	000f4240 	.word	0x000f4240

08003acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b63      	cmp	r3, #99	; 0x63
 8003adc:	dd09      	ble.n	8003af2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003ae4:	f083 0301 	eor.w	r3, r3, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e077      	b.n	8003be2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003afe:	3207      	adds	r2, #7
 8003b00:	4611      	mov	r1, r2
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
 8003b06:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	22fe      	movs	r2, #254	; 0xfe
 8003b14:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	121b      	asrs	r3, r3, #8
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003b3c:	4413      	add	r3, r2
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	b21b      	sxth	r3, r3
 8003b58:	121b      	asrs	r3, r3, #8
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b66:	2305      	movs	r3, #5
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3306      	adds	r3, #6
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	dc0d      	bgt.n	8003b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	e7ec      	b.n	8003b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3307      	adds	r3, #7
 8003b94:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	425a      	negs	r2, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	bf58      	it	pl
 8003ba0:	4253      	negpl	r3, r2
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	6179      	str	r1, [r7, #20]
 8003baa:	43d2      	mvns	r2, r2
 8003bac:	b2d1      	uxtb	r1, r2
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bbe:	dc0a      	bgt.n	8003bd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1d18      	adds	r0, r3, #4
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	f7ff f857 	bl	8002c80 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	e005      	b.n	8003be2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003bd6:	4905      	ldr	r1, [pc, #20]	; (8003bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f849 	bl	8003c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	0800ac58 	.word	0x0800ac58

08003bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f884 	bl	8002d0c <_ZN13STM32Hardware4timeEv>
 8003c04:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4915      	ldr	r1, [pc, #84]	; (8003c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c0e:	fba1 1303 	umull	r1, r3, r1, r3
 8003c12:	099b      	lsrs	r3, r3, #6
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	1e5a      	subs	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c26:	fba3 0302 	umull	r0, r3, r3, r2
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c30:	fb00 f303 	mul.w	r3, r0, r3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	1aca      	subs	r2, r1, r3
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003c40:	4413      	add	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 fe94 	bl	8004984 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	10624dd3 	.word	0x10624dd3
 8003c68:	000f4240 	.word	0x000f4240
 8003c6c:	3b9aca00 	.word	0x3b9aca00

08003c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	2103      	movs	r1, #3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f804 	bl	8003c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	460b      	mov	r3, r1
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fb70 	bl	8002384 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003ca4:	7afb      	ldrb	r3, [r7, #11]
 8003ca6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f107 0214 	add.w	r2, r7, #20
 8003cb6:	2107      	movs	r1, #7
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	4798      	blx	r3
  }
 8003cbc:	bf00      	nop
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_Z41__static_initialization_and_destruction_0ii>:
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d11f      	bne.n	8003d14 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d11a      	bne.n	8003d14 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;								//Handler del nodo ros
 8003cde:	480f      	ldr	r0, [pc, #60]	; (8003d1c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003ce0:	f7ff fa56 	bl	8003190 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 str_msg;								//Messaggio che viene pubblicato dal /chatter
 8003ce4:	480e      	ldr	r0, [pc, #56]	; (8003d20 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003ce6:	f7ff f81d 	bl	8002d24 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher chatter("Pantograph_res", &str_msg);		//Definisco il chatter
 8003cea:	2300      	movs	r3, #0
 8003cec:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cee:	490d      	ldr	r1, [pc, #52]	; (8003d24 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003cf0:	480d      	ldr	r0, [pc, #52]	; (8003d28 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003cf2:	f7fe feb9 	bl	8002a68 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int16> sub("Pantograph_cmd",cmdCallback);	//Definisco il command (la Subscriber è un template sul tipo di messaggio)
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003cfa:	490d      	ldr	r1, [pc, #52]	; (8003d30 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003cfc:	480d      	ldr	r0, [pc, #52]	; (8003d34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003cfe:	f7ff fad7 	bl	80032b0 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<coorsa_rfsm::SetpointUpdate> subsp("Setpoint_update",SetpointUpdateHandler);
 8003d02:	2301      	movs	r3, #1
 8003d04:	4a0c      	ldr	r2, [pc, #48]	; (8003d38 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003d06:	490d      	ldr	r1, [pc, #52]	; (8003d3c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003d08:	480d      	ldr	r0, [pc, #52]	; (8003d40 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003d0a:	f7ff faf5 	bl	80032f8 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEC1EPKcPFvRKS2_Ei>
std_msgs::Int16 RosMess;
 8003d0e:	480d      	ldr	r0, [pc, #52]	; (8003d44 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003d10:	f7ff f808 	bl	8002d24 <_ZN8std_msgs5Int16C1Ev>
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	200000d0 	.word	0x200000d0
 8003d20:	20000a0c 	.word	0x20000a0c
 8003d24:	0800ac94 	.word	0x0800ac94
 8003d28:	20000a14 	.word	0x20000a14
 8003d2c:	080030b9 	.word	0x080030b9
 8003d30:	0800aca4 	.word	0x0800aca4
 8003d34:	20000a28 	.word	0x20000a28
 8003d38:	0800303d 	.word	0x0800303d
 8003d3c:	0800acb4 	.word	0x0800acb4
 8003d40:	20000a44 	.word	0x20000a44
 8003d44:	20000a64 	.word	0x20000a64

08003d48 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	330c      	adds	r3, #12
 8003d56:	6839      	ldr	r1, [r7, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff f8bf 	bl	8002edc <_ZN11coorsa_rfsm14SetpointUpdate11deserializeEPh>
    this->cb_(msg);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	320c      	adds	r2, #12
 8003d66:	4610      	mov	r0, r2
 8003d68:	4798      	blx	r3
  }
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
  }
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	330c      	adds	r3, #12
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff f8ea 	bl	8002f70 <_ZN11coorsa_rfsm14SetpointUpdate7getTypeEv>
 8003d9c:	4603      	mov	r3, r0
  }
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	330c      	adds	r3, #12
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff f8ea 	bl	8002f8c <_ZN11coorsa_rfsm14SetpointUpdate6getMD5Ev>
 8003db8:	4603      	mov	r3, r0
  }
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	6839      	ldr	r1, [r7, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe ffe0 	bl	8002d98 <_ZN8std_msgs5Int1611deserializeEPh>
    this->cb_(msg);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	320c      	adds	r2, #12
 8003de0:	4610      	mov	r0, r2
 8003de2:	4798      	blx	r3
  }
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZN3ros10SubscriberIN8std_msgs5Int16EvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
  }
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe ffef 	bl	8002df4 <_ZN8std_msgs5Int167getTypeEv>
 8003e16:	4603      	mov	r3, r0
  }
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe ffef 	bl	8002e10 <_ZN8std_msgs5Int166getMD5Ev>
 8003e32:	4603      	mov	r3, r0
  }
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <_GLOBAL__sub_I_Mess>:
 8003e56:	b580      	push	{r7, lr}
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f7ff ff30 	bl	8003cc4 <_Z41__static_initialization_and_destruction_0ii>
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_MspInit+0x44>)
 8003e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e72:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <HAL_MspInit+0x44>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6613      	str	r3, [r2, #96]	; 0x60
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_MspInit+0x44>)
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_MspInit+0x44>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	4a08      	ldr	r2, [pc, #32]	; (8003eac <HAL_MspInit+0x44>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6593      	str	r3, [r2, #88]	; 0x58
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_MspInit+0x44>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003e9e:	f003 f875 	bl	8006f8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000

08003eb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	; 0x30
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	f107 031c 	add.w	r3, r7, #28
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed0:	d12d      	bne.n	8003f2e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003ed2:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <HAL_ADC_MspInit+0xec>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	4a30      	ldr	r2, [pc, #192]	; (8003f9c <HAL_ADC_MspInit+0xec>)
 8003eda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003edc:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <HAL_ADC_MspInit+0xec>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d10b      	bne.n	8003efc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003eea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efc:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f00:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f14:	2302      	movs	r3, #2
 8003f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f20:	f107 031c 	add.w	r3, r7, #28
 8003f24:	4619      	mov	r1, r3
 8003f26:	481f      	ldr	r0, [pc, #124]	; (8003fa4 <HAL_ADC_MspInit+0xf4>)
 8003f28:	f002 fda8 	bl	8006a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003f2c:	e032      	b.n	8003f94 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <HAL_ADC_MspInit+0xf8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d12d      	bne.n	8003f94 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_ADC_MspInit+0xec>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <HAL_ADC_MspInit+0xec>)
 8003f40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <HAL_ADC_MspInit+0xec>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d10b      	bne.n	8003f62 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003f4a:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003f50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <HAL_ADC_MspInit+0xf0>)
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f86:	f107 031c 	add.w	r3, r7, #28
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f90:	f002 fd74 	bl	8006a7c <HAL_GPIO_Init>
}
 8003f94:	bf00      	nop
 8003f96:	3730      	adds	r7, #48	; 0x30
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000a70 	.word	0x20000a70
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	48000800 	.word	0x48000800
 8003fa8:	50000100 	.word	0x50000100

08003fac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a15      	ldr	r2, [pc, #84]	; (8004020 <HAL_DAC_MspInit+0x74>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d124      	bne.n	8004018 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_DAC_MspInit+0x78>)
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	4a14      	ldr	r2, [pc, #80]	; (8004024 <HAL_DAC_MspInit+0x78>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_DAC_MspInit+0x78>)
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <HAL_DAC_MspInit+0x78>)
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	4a0e      	ldr	r2, [pc, #56]	; (8004024 <HAL_DAC_MspInit+0x78>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <HAL_DAC_MspInit+0x78>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ffe:	2330      	movs	r3, #48	; 0x30
 8004000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004002:	2303      	movs	r3, #3
 8004004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	4619      	mov	r1, r3
 8004010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004014:	f002 fd32 	bl	8006a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004018:	bf00      	nop
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	50000800 	.word	0x50000800
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <HAL_TIM_PWM_MspInit+0x68>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d114      	bne.n	8004064 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800403a:	4b16      	ldr	r3, [pc, #88]	; (8004094 <HAL_TIM_PWM_MspInit+0x6c>)
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	4a15      	ldr	r2, [pc, #84]	; (8004094 <HAL_TIM_PWM_MspInit+0x6c>)
 8004040:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004044:	6613      	str	r3, [r2, #96]	; 0x60
 8004046:	4b13      	ldr	r3, [pc, #76]	; (8004094 <HAL_TIM_PWM_MspInit+0x6c>)
 8004048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004052:	2200      	movs	r2, #0
 8004054:	2100      	movs	r1, #0
 8004056:	2019      	movs	r0, #25
 8004058:	f001 ffb7 	bl	8005fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800405c:	2019      	movs	r0, #25
 800405e:	f001 ffce 	bl	8005ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004062:	e010      	b.n	8004086 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406c:	d10b      	bne.n	8004086 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <HAL_TIM_PWM_MspInit+0x6c>)
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	4a08      	ldr	r2, [pc, #32]	; (8004094 <HAL_TIM_PWM_MspInit+0x6c>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6593      	str	r3, [r2, #88]	; 0x58
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_TIM_PWM_MspInit+0x6c>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40021000 	.word	0x40021000

08004098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a31      	ldr	r2, [pc, #196]	; (800417c <HAL_TIM_MspPostInit+0xe4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d139      	bne.n	800412e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_TIM_MspPostInit+0xe8>)
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	4a30      	ldr	r2, [pc, #192]	; (8004180 <HAL_TIM_MspPostInit+0xe8>)
 80040c0:	f043 0304 	orr.w	r3, r3, #4
 80040c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040c6:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <HAL_TIM_MspPostInit+0xe8>)
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d2:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <HAL_TIM_MspPostInit+0xe8>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	4a2a      	ldr	r2, [pc, #168]	; (8004180 <HAL_TIM_MspPostInit+0xe8>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040de:	4b28      	ldr	r3, [pc, #160]	; (8004180 <HAL_TIM_MspPostInit+0xe8>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040ea:	2301      	movs	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f6:	2300      	movs	r3, #0
 80040f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80040fa:	2302      	movs	r3, #2
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	4619      	mov	r1, r3
 8004104:	481f      	ldr	r0, [pc, #124]	; (8004184 <HAL_TIM_MspPostInit+0xec>)
 8004106:	f002 fcb9 	bl	8006a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800410a:	2380      	movs	r3, #128	; 0x80
 800410c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410e:	2302      	movs	r3, #2
 8004110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004116:	2300      	movs	r3, #0
 8004118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800411a:	2306      	movs	r3, #6
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411e:	f107 0314 	add.w	r3, r7, #20
 8004122:	4619      	mov	r1, r3
 8004124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004128:	f002 fca8 	bl	8006a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800412c:	e021      	b.n	8004172 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d11c      	bne.n	8004172 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_TIM_MspPostInit+0xe8>)
 800413a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413c:	4a10      	ldr	r2, [pc, #64]	; (8004180 <HAL_TIM_MspPostInit+0xe8>)
 800413e:	f043 0302 	orr.w	r3, r3, #2
 8004142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_TIM_MspPostInit+0xe8>)
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8004150:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004156:	2302      	movs	r3, #2
 8004158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415e:	2300      	movs	r3, #0
 8004160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004162:	2301      	movs	r3, #1
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	4619      	mov	r1, r3
 800416c:	4806      	ldr	r0, [pc, #24]	; (8004188 <HAL_TIM_MspPostInit+0xf0>)
 800416e:	f002 fc85 	bl	8006a7c <HAL_GPIO_Init>
}
 8004172:	bf00      	nop
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40021000 	.word	0x40021000
 8004184:	48000800 	.word	0x48000800
 8004188:	48000400 	.word	0x48000400

0800418c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a46      	ldr	r2, [pc, #280]	; (80042c4 <HAL_UART_MspInit+0x138>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	f040 8085 	bne.w	80042ba <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041b0:	4b45      	ldr	r3, [pc, #276]	; (80042c8 <HAL_UART_MspInit+0x13c>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	4a44      	ldr	r2, [pc, #272]	; (80042c8 <HAL_UART_MspInit+0x13c>)
 80041b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ba:	6593      	str	r3, [r2, #88]	; 0x58
 80041bc:	4b42      	ldr	r3, [pc, #264]	; (80042c8 <HAL_UART_MspInit+0x13c>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c8:	4b3f      	ldr	r3, [pc, #252]	; (80042c8 <HAL_UART_MspInit+0x13c>)
 80041ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041cc:	4a3e      	ldr	r2, [pc, #248]	; (80042c8 <HAL_UART_MspInit+0x13c>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041d4:	4b3c      	ldr	r3, [pc, #240]	; (80042c8 <HAL_UART_MspInit+0x13c>)
 80041d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80041e0:	230c      	movs	r3, #12
 80041e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e4:	2302      	movs	r3, #2
 80041e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041f0:	2307      	movs	r3, #7
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4619      	mov	r1, r3
 80041fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041fe:	f002 fc3d 	bl	8006a7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004202:	4b32      	ldr	r3, [pc, #200]	; (80042cc <HAL_UART_MspInit+0x140>)
 8004204:	4a32      	ldr	r2, [pc, #200]	; (80042d0 <HAL_UART_MspInit+0x144>)
 8004206:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004208:	4b30      	ldr	r3, [pc, #192]	; (80042cc <HAL_UART_MspInit+0x140>)
 800420a:	221a      	movs	r2, #26
 800420c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800420e:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <HAL_UART_MspInit+0x140>)
 8004210:	2200      	movs	r2, #0
 8004212:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004214:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <HAL_UART_MspInit+0x140>)
 8004216:	2200      	movs	r2, #0
 8004218:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800421a:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <HAL_UART_MspInit+0x140>)
 800421c:	2280      	movs	r2, #128	; 0x80
 800421e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_UART_MspInit+0x140>)
 8004222:	2200      	movs	r2, #0
 8004224:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004226:	4b29      	ldr	r3, [pc, #164]	; (80042cc <HAL_UART_MspInit+0x140>)
 8004228:	2200      	movs	r2, #0
 800422a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800422c:	4b27      	ldr	r3, [pc, #156]	; (80042cc <HAL_UART_MspInit+0x140>)
 800422e:	2220      	movs	r2, #32
 8004230:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <HAL_UART_MspInit+0x140>)
 8004234:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004238:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800423a:	4824      	ldr	r0, [pc, #144]	; (80042cc <HAL_UART_MspInit+0x140>)
 800423c:	f002 f944 	bl	80064c8 <HAL_DMA_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8004246:	f7fd fdc1 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <HAL_UART_MspInit+0x140>)
 800424e:	679a      	str	r2, [r3, #120]	; 0x78
 8004250:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <HAL_UART_MspInit+0x140>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004256:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <HAL_UART_MspInit+0x148>)
 8004258:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <HAL_UART_MspInit+0x14c>)
 800425a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_UART_MspInit+0x148>)
 800425e:	221b      	movs	r2, #27
 8004260:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <HAL_UART_MspInit+0x148>)
 8004264:	2210      	movs	r2, #16
 8004266:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <HAL_UART_MspInit+0x148>)
 800426a:	2200      	movs	r2, #0
 800426c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800426e:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_UART_MspInit+0x148>)
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004274:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <HAL_UART_MspInit+0x148>)
 8004276:	2200      	movs	r2, #0
 8004278:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800427a:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <HAL_UART_MspInit+0x148>)
 800427c:	2200      	movs	r2, #0
 800427e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <HAL_UART_MspInit+0x148>)
 8004282:	2200      	movs	r2, #0
 8004284:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <HAL_UART_MspInit+0x148>)
 8004288:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800428c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800428e:	4811      	ldr	r0, [pc, #68]	; (80042d4 <HAL_UART_MspInit+0x148>)
 8004290:	f002 f91a 	bl	80064c8 <HAL_DMA_Init>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800429a:	f7fd fd97 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <HAL_UART_MspInit+0x148>)
 80042a2:	675a      	str	r2, [r3, #116]	; 0x74
 80042a4:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <HAL_UART_MspInit+0x148>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042aa:	2200      	movs	r2, #0
 80042ac:	2100      	movs	r1, #0
 80042ae:	2026      	movs	r0, #38	; 0x26
 80042b0:	f001 fe8b 	bl	8005fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042b4:	2026      	movs	r0, #38	; 0x26
 80042b6:	f001 fea2 	bl	8005ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042ba:	bf00      	nop
 80042bc:	3728      	adds	r7, #40	; 0x28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40004400 	.word	0x40004400
 80042c8:	40021000 	.word	0x40021000
 80042cc:	20000b14 	.word	0x20000b14
 80042d0:	40020008 	.word	0x40020008
 80042d4:	20000c60 	.word	0x20000c60
 80042d8:	4002001c 	.word	0x4002001c

080042dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ee:	e7fe      	b.n	80042ee <HardFault_Handler+0x4>

080042f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042f4:	e7fe      	b.n	80042f4 <MemManage_Handler+0x4>

080042f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042f6:	b480      	push	{r7}
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042fa:	e7fe      	b.n	80042fa <BusFault_Handler+0x4>

080042fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004300:	e7fe      	b.n	8004300 <UsageFault_Handler+0x4>

08004302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004330:	f000 fbd0 	bl	8004ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004334:	bf00      	nop
 8004336:	bd80      	pop	{r7, pc}

08004338 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800433c:	4802      	ldr	r0, [pc, #8]	; (8004348 <DMA1_Channel1_IRQHandler+0x10>)
 800433e:	f002 fa4d 	bl	80067dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000b14 	.word	0x20000b14

0800434c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004350:	4802      	ldr	r0, [pc, #8]	; (800435c <DMA1_Channel2_IRQHandler+0x10>)
 8004352:	f002 fa43 	bl	80067dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000c60 	.word	0x20000c60

08004360 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */


	down_lim = Mess & (1);
 8004364:	4bb8      	ldr	r3, [pc, #736]	; (8004648 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	4ab7      	ldr	r2, [pc, #732]	; (800464c <TIM1_UP_TIM16_IRQHandler+0x2ec>)
 800436e:	6013      	str	r3, [r2, #0]

	mid_lim = Mess & (2);
 8004370:	4bb5      	ldr	r3, [pc, #724]	; (8004648 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	4ab5      	ldr	r2, [pc, #724]	; (8004650 <TIM1_UP_TIM16_IRQHandler+0x2f0>)
 800437a:	6013      	str	r3, [r2, #0]

	up_lim = Mess & (4);
 800437c:	4bb2      	ldr	r3, [pc, #712]	; (8004648 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	4ab3      	ldr	r2, [pc, #716]	; (8004654 <TIM1_UP_TIM16_IRQHandler+0x2f4>)
 8004386:	6013      	str	r3, [r2, #0]

	read_ADC(&Adc);  //Lettura periferica ADC
 8004388:	48b3      	ldr	r0, [pc, #716]	; (8004658 <TIM1_UP_TIM16_IRQHandler+0x2f8>)
 800438a:	f7fd f859 	bl	8001440 <read_ADC>
	Adc_Pot = Adc.Adc_1;	//Lettura Potenziometro Attuatore Lineare
 800438e:	4bb2      	ldr	r3, [pc, #712]	; (8004658 <TIM1_UP_TIM16_IRQHandler+0x2f8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4ab2      	ldr	r2, [pc, #712]	; (800465c <TIM1_UP_TIM16_IRQHandler+0x2fc>)
 8004394:	6013      	str	r3, [r2, #0]
	I_sense = Adc.Adc_2;	//Lettura sensote di Corrente Attuatore Lineare
 8004396:	4bb0      	ldr	r3, [pc, #704]	; (8004658 <TIM1_UP_TIM16_IRQHandler+0x2f8>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4ab1      	ldr	r2, [pc, #708]	; (8004660 <TIM1_UP_TIM16_IRQHandler+0x300>)
 800439c:	6013      	str	r3, [r2, #0]
	Out_Filter = filter_run(I_sense, &Low_Pass);
 800439e:	4bb0      	ldr	r3, [pc, #704]	; (8004660 <TIM1_UP_TIM16_IRQHandler+0x300>)
 80043a0:	edd3 7a00 	vldr	s15, [r3]
 80043a4:	48af      	ldr	r0, [pc, #700]	; (8004664 <TIM1_UP_TIM16_IRQHandler+0x304>)
 80043a6:	eeb0 0a67 	vmov.f32	s0, s15
 80043aa:	f7fc ff6d 	bl	8001288 <filter_run>
 80043ae:	eef0 7a40 	vmov.f32	s15, s0
 80043b2:	4bad      	ldr	r3, [pc, #692]	; (8004668 <TIM1_UP_TIM16_IRQHandler+0x308>)
 80043b4:	edc3 7a00 	vstr	s15, [r3]


	Control_Panel(down_lim, mid_lim, up_lim, Adc_Pot, &ControlPanel);
 80043b8:	4ba4      	ldr	r3, [pc, #656]	; (800464c <TIM1_UP_TIM16_IRQHandler+0x2ec>)
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	4ba4      	ldr	r3, [pc, #656]	; (8004650 <TIM1_UP_TIM16_IRQHandler+0x2f0>)
 80043be:	6819      	ldr	r1, [r3, #0]
 80043c0:	4ba4      	ldr	r3, [pc, #656]	; (8004654 <TIM1_UP_TIM16_IRQHandler+0x2f4>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4ba5      	ldr	r3, [pc, #660]	; (800465c <TIM1_UP_TIM16_IRQHandler+0x2fc>)
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	4ba8      	ldr	r3, [pc, #672]	; (800466c <TIM1_UP_TIM16_IRQHandler+0x30c>)
 80043cc:	eeb0 0a67 	vmov.f32	s0, s15
 80043d0:	f7fc fcc4 	bl	8000d5c <Control_Panel>

	I_ref = ControlPanel.I_ref;
 80043d4:	4ba5      	ldr	r3, [pc, #660]	; (800466c <TIM1_UP_TIM16_IRQHandler+0x30c>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4aa5      	ldr	r2, [pc, #660]	; (8004670 <TIM1_UP_TIM16_IRQHandler+0x310>)
 80043da:	6013      	str	r3, [r2, #0]
	down_lim = ControlPanel.down_lim;
 80043dc:	4ba3      	ldr	r3, [pc, #652]	; (800466c <TIM1_UP_TIM16_IRQHandler+0x30c>)
 80043de:	edd3 7a00 	vldr	s15, [r3]
 80043e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043e6:	ee17 2a90 	vmov	r2, s15
 80043ea:	4b98      	ldr	r3, [pc, #608]	; (800464c <TIM1_UP_TIM16_IRQHandler+0x2ec>)
 80043ec:	601a      	str	r2, [r3, #0]
	mid_lim = ControlPanel.mid_lim;
 80043ee:	4b9f      	ldr	r3, [pc, #636]	; (800466c <TIM1_UP_TIM16_IRQHandler+0x30c>)
 80043f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80043f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043f8:	ee17 2a90 	vmov	r2, s15
 80043fc:	4b94      	ldr	r3, [pc, #592]	; (8004650 <TIM1_UP_TIM16_IRQHandler+0x2f0>)
 80043fe:	601a      	str	r2, [r3, #0]
	up_lim = ControlPanel.up_lim;
 8004400:	4b9a      	ldr	r3, [pc, #616]	; (800466c <TIM1_UP_TIM16_IRQHandler+0x30c>)
 8004402:	edd3 7a02 	vldr	s15, [r3, #8]
 8004406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800440a:	ee17 2a90 	vmov	r2, s15
 800440e:	4b91      	ldr	r3, [pc, #580]	; (8004654 <TIM1_UP_TIM16_IRQHandler+0x2f4>)
 8004410:	601a      	str	r2, [r3, #0]

	I_error = I_ref-Out_Filter;  //Calcolo errore in ingresso al regolatore PI
 8004412:	4b97      	ldr	r3, [pc, #604]	; (8004670 <TIM1_UP_TIM16_IRQHandler+0x310>)
 8004414:	ed93 7a00 	vldr	s14, [r3]
 8004418:	4b93      	ldr	r3, [pc, #588]	; (8004668 <TIM1_UP_TIM16_IRQHandler+0x308>)
 800441a:	edd3 7a00 	vldr	s15, [r3]
 800441e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004422:	4b94      	ldr	r3, [pc, #592]	; (8004674 <TIM1_UP_TIM16_IRQHandler+0x314>)
 8004424:	edc3 7a00 	vstr	s15, [r3]

	if(I_error <= 0.005f && I_error >= -0.005f){  //Dead-Zone
 8004428:	4b92      	ldr	r3, [pc, #584]	; (8004674 <TIM1_UP_TIM16_IRQHandler+0x314>)
 800442a:	edd3 7a00 	vldr	s15, [r3]
 800442e:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8004678 <TIM1_UP_TIM16_IRQHandler+0x318>
 8004432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	d80d      	bhi.n	8004458 <TIM1_UP_TIM16_IRQHandler+0xf8>
 800443c:	4b8d      	ldr	r3, [pc, #564]	; (8004674 <TIM1_UP_TIM16_IRQHandler+0x314>)
 800443e:	edd3 7a00 	vldr	s15, [r3]
 8004442:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800467c <TIM1_UP_TIM16_IRQHandler+0x31c>
 8004446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444e:	db03      	blt.n	8004458 <TIM1_UP_TIM16_IRQHandler+0xf8>
		I_error = 0.0f;
 8004450:	4b88      	ldr	r3, [pc, #544]	; (8004674 <TIM1_UP_TIM16_IRQHandler+0x314>)
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
	}

	V_star = PIDfloat(I_error, &I_PI);	//Calcolo tensione di uscita regolatore PI
 8004458:	4b86      	ldr	r3, [pc, #536]	; (8004674 <TIM1_UP_TIM16_IRQHandler+0x314>)
 800445a:	edd3 7a00 	vldr	s15, [r3]
 800445e:	4888      	ldr	r0, [pc, #544]	; (8004680 <TIM1_UP_TIM16_IRQHandler+0x320>)
 8004460:	eeb0 0a67 	vmov.f32	s0, s15
 8004464:	f7fc ff4b 	bl	80012fe <PIDfloat>
 8004468:	eef0 7a40 	vmov.f32	s15, s0
 800446c:	4b85      	ldr	r3, [pc, #532]	; (8004684 <TIM1_UP_TIM16_IRQHandler+0x324>)
 800446e:	edc3 7a00 	vstr	s15, [r3]
	DutyCycle = V_star/2 + 0.5f;	//Calcolo Duty Cycle scalato e traslato (V_star: [-1,1] -> [0,1])
 8004472:	4b84      	ldr	r3, [pc, #528]	; (8004684 <TIM1_UP_TIM16_IRQHandler+0x324>)
 8004474:	ed93 7a00 	vldr	s14, [r3]
 8004478:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800447c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004480:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004488:	4b7f      	ldr	r3, [pc, #508]	; (8004688 <TIM1_UP_TIM16_IRQHandler+0x328>)
 800448a:	edc3 7a00 	vstr	s15, [r3]

	if(DutyCycle >= 0.90f){
 800448e:	4b7e      	ldr	r3, [pc, #504]	; (8004688 <TIM1_UP_TIM16_IRQHandler+0x328>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800468c <TIM1_UP_TIM16_IRQHandler+0x32c>
 8004498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a0:	db02      	blt.n	80044a8 <TIM1_UP_TIM16_IRQHandler+0x148>
		DutyCycle = 0.90f;
 80044a2:	4b79      	ldr	r3, [pc, #484]	; (8004688 <TIM1_UP_TIM16_IRQHandler+0x328>)
 80044a4:	4a7a      	ldr	r2, [pc, #488]	; (8004690 <TIM1_UP_TIM16_IRQHandler+0x330>)
 80044a6:	601a      	str	r2, [r3, #0]
	}

	if(DutyCycle <= 0.1f){
 80044a8:	4b77      	ldr	r3, [pc, #476]	; (8004688 <TIM1_UP_TIM16_IRQHandler+0x328>)
 80044aa:	edd3 7a00 	vldr	s15, [r3]
 80044ae:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004694 <TIM1_UP_TIM16_IRQHandler+0x334>
 80044b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ba:	d802      	bhi.n	80044c2 <TIM1_UP_TIM16_IRQHandler+0x162>
		DutyCycle = 0.1f;
 80044bc:	4b72      	ldr	r3, [pc, #456]	; (8004688 <TIM1_UP_TIM16_IRQHandler+0x328>)
 80044be:	4a76      	ldr	r2, [pc, #472]	; (8004698 <TIM1_UP_TIM16_IRQHandler+0x338>)
 80044c0:	601a      	str	r2, [r3, #0]
	}

	TIM1->CCR1 = DutyCycle*8499; //Impostazione Duty Cycle PWM Attuatore Lineare (DutyCycle*CounterPeriod)
 80044c2:	4b71      	ldr	r3, [pc, #452]	; (8004688 <TIM1_UP_TIM16_IRQHandler+0x328>)
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800469c <TIM1_UP_TIM16_IRQHandler+0x33c>
 80044cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044d0:	4b73      	ldr	r3, [pc, #460]	; (80046a0 <TIM1_UP_TIM16_IRQHandler+0x340>)
 80044d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d6:	ee17 2a90 	vmov	r2, s15
 80044da:	635a      	str	r2, [r3, #52]	; 0x34
	////////////////////////////////////////

	// 0° = k = 25
	// 90° = k = 75
	// 180° = k = 125
	Servo_Angle_1 = Mess & (64);
 80044dc:	4b5a      	ldr	r3, [pc, #360]	; (8004648 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	4a6f      	ldr	r2, [pc, #444]	; (80046a4 <TIM1_UP_TIM16_IRQHandler+0x344>)
 80044e6:	6013      	str	r3, [r2, #0]
	Servo_Angle_2 = Mess & (128);
 80044e8:	4b57      	ldr	r3, [pc, #348]	; (8004648 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	4a6d      	ldr	r2, [pc, #436]	; (80046a8 <TIM1_UP_TIM16_IRQHandler+0x348>)
 80044f2:	6013      	str	r3, [r2, #0]

	if(Servo_Angle_1 == 64 && k>=75){	//POSIZIONE A: 90°
 80044f4:	4b6b      	ldr	r3, [pc, #428]	; (80046a4 <TIM1_UP_TIM16_IRQHandler+0x344>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d12e      	bne.n	800455a <TIM1_UP_TIM16_IRQHandler+0x1fa>
 80044fc:	4b6b      	ldr	r3, [pc, #428]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x34c>)
 80044fe:	edd3 7a00 	vldr	s15, [r3]
 8004502:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80046b0 <TIM1_UP_TIM16_IRQHandler+0x350>
 8004506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	db24      	blt.n	800455a <TIM1_UP_TIM16_IRQHandler+0x1fa>
		k -= 0.005f;
 8004510:	4b66      	ldr	r3, [pc, #408]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x34c>)
 8004512:	edd3 7a00 	vldr	s15, [r3]
 8004516:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004678 <TIM1_UP_TIM16_IRQHandler+0x318>
 800451a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800451e:	4b63      	ldr	r3, [pc, #396]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x34c>)
 8004520:	edc3 7a00 	vstr	s15, [r3]
		j += 0.005f;
 8004524:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <TIM1_UP_TIM16_IRQHandler+0x354>)
 8004526:	edd3 7a00 	vldr	s15, [r3]
 800452a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004678 <TIM1_UP_TIM16_IRQHandler+0x318>
 800452e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004532:	4b60      	ldr	r3, [pc, #384]	; (80046b4 <TIM1_UP_TIM16_IRQHandler+0x354>)
 8004534:	edc3 7a00 	vstr	s15, [r3]
		if(k <= 75 && WaitingForResult){
 8004538:	4b5c      	ldr	r3, [pc, #368]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x34c>)
 800453a:	edd3 7a00 	vldr	s15, [r3]
 800453e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80046b0 <TIM1_UP_TIM16_IRQHandler+0x350>
 8004542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454a:	d806      	bhi.n	800455a <TIM1_UP_TIM16_IRQHandler+0x1fa>
 800454c:	4b5a      	ldr	r3, [pc, #360]	; (80046b8 <TIM1_UP_TIM16_IRQHandler+0x358>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <TIM1_UP_TIM16_IRQHandler+0x1fa>
		down_flag = 1;
 8004554:	4b59      	ldr	r3, [pc, #356]	; (80046bc <TIM1_UP_TIM16_IRQHandler+0x35c>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]
		}
	}

	if(Servo_Angle_2 == 128 && k<=120){	//POSIZIONE B: 180°
 800455a:	4b53      	ldr	r3, [pc, #332]	; (80046a8 <TIM1_UP_TIM16_IRQHandler+0x348>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b80      	cmp	r3, #128	; 0x80
 8004560:	d12e      	bne.n	80045c0 <TIM1_UP_TIM16_IRQHandler+0x260>
 8004562:	4b52      	ldr	r3, [pc, #328]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x34c>)
 8004564:	edd3 7a00 	vldr	s15, [r3]
 8004568:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80046c0 <TIM1_UP_TIM16_IRQHandler+0x360>
 800456c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004574:	d824      	bhi.n	80045c0 <TIM1_UP_TIM16_IRQHandler+0x260>
		k += 0.005f;
 8004576:	4b4d      	ldr	r3, [pc, #308]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x34c>)
 8004578:	edd3 7a00 	vldr	s15, [r3]
 800457c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004678 <TIM1_UP_TIM16_IRQHandler+0x318>
 8004580:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004584:	4b49      	ldr	r3, [pc, #292]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x34c>)
 8004586:	edc3 7a00 	vstr	s15, [r3]
		j -= 0.005f;
 800458a:	4b4a      	ldr	r3, [pc, #296]	; (80046b4 <TIM1_UP_TIM16_IRQHandler+0x354>)
 800458c:	edd3 7a00 	vldr	s15, [r3]
 8004590:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004678 <TIM1_UP_TIM16_IRQHandler+0x318>
 8004594:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004598:	4b46      	ldr	r3, [pc, #280]	; (80046b4 <TIM1_UP_TIM16_IRQHandler+0x354>)
 800459a:	edc3 7a00 	vstr	s15, [r3]
		if(k >= 95 && WaitingForResult){
 800459e:	4b43      	ldr	r3, [pc, #268]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x34c>)
 80045a0:	edd3 7a00 	vldr	s15, [r3]
 80045a4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80046c4 <TIM1_UP_TIM16_IRQHandler+0x364>
 80045a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b0:	db06      	blt.n	80045c0 <TIM1_UP_TIM16_IRQHandler+0x260>
 80045b2:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <TIM1_UP_TIM16_IRQHandler+0x358>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <TIM1_UP_TIM16_IRQHandler+0x260>
		up_flag = 1;
 80045ba:	4b43      	ldr	r3, [pc, #268]	; (80046c8 <TIM1_UP_TIM16_IRQHandler+0x368>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]
		}
	}

	TIM2->CCR2 = j;		//Impostazione Duty Cycle PWM Servomotori
 80045c0:	4b3c      	ldr	r3, [pc, #240]	; (80046b4 <TIM1_UP_TIM16_IRQHandler+0x354>)
 80045c2:	edd3 7a00 	vldr	s15, [r3]
 80045c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	ee17 2a90 	vmov	r2, s15
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = k;
 80045d4:	4b35      	ldr	r3, [pc, #212]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x34c>)
 80045d6:	edd3 7a00 	vldr	s15, [r3]
 80045da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e2:	ee17 2a90 	vmov	r2, s15
 80045e6:	63da      	str	r2, [r3, #60]	; 0x3c

	if(down_flag == 1 && WaitingForResult){
 80045e8:	4b34      	ldr	r3, [pc, #208]	; (80046bc <TIM1_UP_TIM16_IRQHandler+0x35c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10d      	bne.n	800460c <TIM1_UP_TIM16_IRQHandler+0x2ac>
 80045f0:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <TIM1_UP_TIM16_IRQHandler+0x358>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <TIM1_UP_TIM16_IRQHandler+0x2ac>
		WaitingForResult = 0;
 80045f8:	4b2f      	ldr	r3, [pc, #188]	; (80046b8 <TIM1_UP_TIM16_IRQHandler+0x358>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
		down_flag = 0;
 80045fe:	4b2f      	ldr	r3, [pc, #188]	; (80046bc <TIM1_UP_TIM16_IRQHandler+0x35c>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
		sendMess(256);
 8004604:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004608:	f7fe fcfe 	bl	8003008 <sendMess>
	}

	if(up_flag == 1 && WaitingForResult){
 800460c:	4b2e      	ldr	r3, [pc, #184]	; (80046c8 <TIM1_UP_TIM16_IRQHandler+0x368>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d10d      	bne.n	8004630 <TIM1_UP_TIM16_IRQHandler+0x2d0>
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <TIM1_UP_TIM16_IRQHandler+0x358>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <TIM1_UP_TIM16_IRQHandler+0x2d0>
		WaitingForResult = 0;
 800461c:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <TIM1_UP_TIM16_IRQHandler+0x358>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
		up_flag = 0;
 8004622:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <TIM1_UP_TIM16_IRQHandler+0x368>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
		sendMess(512);
 8004628:	f44f 7000 	mov.w	r0, #512	; 0x200
 800462c:	f7fe fcec 	bl	8003008 <sendMess>

	  ///////////////
	 ///   DAC   ///
	///////////////

	DAC_Value_1 = ((4095/2)+(1.0f * I_ref * (4095/2))); //Viene normalizzato il valore che voglio passare al DAC. Risoluzione -> 4096 Posizionamento a metà per vedere valori positivi e negatvi-> 2048
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <TIM1_UP_TIM16_IRQHandler+0x310>)
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80046cc <TIM1_UP_TIM16_IRQHandler+0x36c>
 800463a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800463e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80046cc <TIM1_UP_TIM16_IRQHandler+0x36c>
 8004642:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004646:	e043      	b.n	80046d0 <TIM1_UP_TIM16_IRQHandler+0x370>
 8004648:	200000a8 	.word	0x200000a8
 800464c:	20000a98 	.word	0x20000a98
 8004650:	20000a9c 	.word	0x20000a9c
 8004654:	20000aa0 	.word	0x20000aa0
 8004658:	20000e10 	.word	0x20000e10
 800465c:	20000a78 	.word	0x20000a78
 8004660:	20000a7c 	.word	0x20000a7c
 8004664:	20000e18 	.word	0x20000e18
 8004668:	20000a80 	.word	0x20000a80
 800466c:	200000b0 	.word	0x200000b0
 8004670:	20000a84 	.word	0x20000a84
 8004674:	20000a8c 	.word	0x20000a8c
 8004678:	3ba3d70a 	.word	0x3ba3d70a
 800467c:	bba3d70a 	.word	0xbba3d70a
 8004680:	20000de4 	.word	0x20000de4
 8004684:	20000a88 	.word	0x20000a88
 8004688:	20000a74 	.word	0x20000a74
 800468c:	3f666666 	.word	0x3f666666
 8004690:	3f666666 	.word	0x3f666666
 8004694:	3dcccccd 	.word	0x3dcccccd
 8004698:	3dcccccd 	.word	0x3dcccccd
 800469c:	4604cc00 	.word	0x4604cc00
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	20000aac 	.word	0x20000aac
 80046a8:	20000ab0 	.word	0x20000ab0
 80046ac:	20000aa4 	.word	0x20000aa4
 80046b0:	42960000 	.word	0x42960000
 80046b4:	20000aa8 	.word	0x20000aa8
 80046b8:	200000ac 	.word	0x200000ac
 80046bc:	20000ab8 	.word	0x20000ab8
 80046c0:	42f00000 	.word	0x42f00000
 80046c4:	42be0000 	.word	0x42be0000
 80046c8:	20000ab4 	.word	0x20000ab4
 80046cc:	44ffe000 	.word	0x44ffe000
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <TIM1_UP_TIM16_IRQHandler+0x3cc>)
 80046d2:	edc3 7a00 	vstr	s15, [r3]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Value_1);
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <TIM1_UP_TIM16_IRQHandler+0x3cc>)
 80046d8:	edd3 7a00 	vldr	s15, [r3]
 80046dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e0:	ee17 3a90 	vmov	r3, s15
 80046e4:	2200      	movs	r2, #0
 80046e6:	2100      	movs	r1, #0
 80046e8:	4811      	ldr	r0, [pc, #68]	; (8004730 <TIM1_UP_TIM16_IRQHandler+0x3d0>)
 80046ea:	f001 fd17 	bl	800611c <HAL_DAC_SetValue>

	DAC_Value_2 =((4095/2)+(1.0f * Out_Filter * (4095/2)));
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <TIM1_UP_TIM16_IRQHandler+0x3d4>)
 80046f0:	edd3 7a00 	vldr	s15, [r3]
 80046f4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004738 <TIM1_UP_TIM16_IRQHandler+0x3d8>
 80046f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046fc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004738 <TIM1_UP_TIM16_IRQHandler+0x3d8>
 8004700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004704:	4b0d      	ldr	r3, [pc, #52]	; (800473c <TIM1_UP_TIM16_IRQHandler+0x3dc>)
 8004706:	edc3 7a00 	vstr	s15, [r3]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, DAC_Value_2);
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <TIM1_UP_TIM16_IRQHandler+0x3dc>)
 800470c:	edd3 7a00 	vldr	s15, [r3]
 8004710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004714:	ee17 3a90 	vmov	r3, s15
 8004718:	2200      	movs	r2, #0
 800471a:	2110      	movs	r1, #16
 800471c:	4804      	ldr	r0, [pc, #16]	; (8004730 <TIM1_UP_TIM16_IRQHandler+0x3d0>)
 800471e:	f001 fcfd 	bl	800611c <HAL_DAC_SetValue>



  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004722:	4807      	ldr	r0, [pc, #28]	; (8004740 <TIM1_UP_TIM16_IRQHandler+0x3e0>)
 8004724:	f003 fdbe 	bl	80082a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000a90 	.word	0x20000a90
 8004730:	20000b74 	.word	0x20000b74
 8004734:	20000a80 	.word	0x20000a80
 8004738:	44ffe000 	.word	0x44ffe000
 800473c:	20000a94 	.word	0x20000a94
 8004740:	20000cc0 	.word	0x20000cc0

08004744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004748:	4802      	ldr	r0, [pc, #8]	; (8004754 <USART2_IRQHandler+0x10>)
 800474a:	f005 f811 	bl	8009770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000d58 	.word	0x20000d58

08004758 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800475c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004760:	f002 fb58 	bl	8006e14 <HAL_GPIO_EXTI_IRQHandler>
}
 8004764:	bf00      	nop
 8004766:	bd80      	pop	{r7, pc}

08004768 <InitSystem>:


void InitSystem(void){
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, EN_A_Pin|EN_B_Pin, GPIO_PIN_SET);
 800476c:	2201      	movs	r2, #1
 800476e:	2111      	movs	r1, #17
 8004770:	483e      	ldr	r0, [pc, #248]	; (800486c <InitSystem+0x104>)
 8004772:	f002 fb1d 	bl	8006db0 <HAL_GPIO_WritePin>
	DutyCycle = 0.5f;
 8004776:	4b3e      	ldr	r3, [pc, #248]	; (8004870 <InitSystem+0x108>)
 8004778:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800477c:	601a      	str	r2, [r3, #0]
	k = 75;
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <InitSystem+0x10c>)
 8004780:	4a3d      	ldr	r2, [pc, #244]	; (8004878 <InitSystem+0x110>)
 8004782:	601a      	str	r2, [r3, #0]
	j = 75;
 8004784:	4b3d      	ldr	r3, [pc, #244]	; (800487c <InitSystem+0x114>)
 8004786:	4a3c      	ldr	r2, [pc, #240]	; (8004878 <InitSystem+0x110>)
 8004788:	601a      	str	r2, [r3, #0]
	TIM2->CCR2 = k;
 800478a:	4b3a      	ldr	r3, [pc, #232]	; (8004874 <InitSystem+0x10c>)
 800478c:	edd3 7a00 	vldr	s15, [r3]
 8004790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004798:	ee17 2a90 	vmov	r2, s15
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = j;
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <InitSystem+0x114>)
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ac:	ee17 2a90 	vmov	r2, s15
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c
	AdcStruct_init(&Adc);  //Init struct ADC
 80047b2:	4833      	ldr	r0, [pc, #204]	; (8004880 <InitSystem+0x118>)
 80047b4:	f7fc fef4 	bl	80015a0 <AdcStruct_init>
	init_filter(0.0001f, 0.5f, &Low_Pass);	//Init struct Low_Pass_Filter
 80047b8:	4832      	ldr	r0, [pc, #200]	; (8004884 <InitSystem+0x11c>)
 80047ba:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80047be:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8004888 <InitSystem+0x120>
 80047c2:	f7fc fc9d 	bl	8001100 <init_filter>
	Control_Panel_Struct_init(&ControlPanel);
 80047c6:	4831      	ldr	r0, [pc, #196]	; (800488c <InitSystem+0x124>)
 80047c8:	f7fc fc32 	bl	8001030 <Control_Panel_Struct_init>
	InitPI_BC(&I_PI);
 80047cc:	4830      	ldr	r0, [pc, #192]	; (8004890 <InitSystem+0x128>)
 80047ce:	f7fc fe0c 	bl	80013ea <InitPI_BC>

	I_PI.Kp = 25;	//Impostazione parametri PI anello di corrente
 80047d2:	4b2f      	ldr	r3, [pc, #188]	; (8004890 <InitSystem+0x128>)
 80047d4:	4a2f      	ldr	r2, [pc, #188]	; (8004894 <InitSystem+0x12c>)
 80047d6:	609a      	str	r2, [r3, #8]
	I_PI.Ki = 70;
 80047d8:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <InitSystem+0x128>)
 80047da:	4a2f      	ldr	r2, [pc, #188]	; (8004898 <InitSystem+0x130>)
 80047dc:	60da      	str	r2, [r3, #12]
	I_PI.Ts = 0.0001f;
 80047de:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <InitSystem+0x128>)
 80047e0:	4a2e      	ldr	r2, [pc, #184]	; (800489c <InitSystem+0x134>)
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28
	I_PI.IntegralMemory = 0;
 80047e4:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <InitSystem+0x128>)
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	615a      	str	r2, [r3, #20]
	I_PI.OutSatH = 1;
 80047ec:	4b28      	ldr	r3, [pc, #160]	; (8004890 <InitSystem+0x128>)
 80047ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047f2:	619a      	str	r2, [r3, #24]
	I_PI.OutSatL = -I_PI.OutSatH;
 80047f4:	4b26      	ldr	r3, [pc, #152]	; (8004890 <InitSystem+0x128>)
 80047f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80047fa:	eef1 7a67 	vneg.f32	s15, s15
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <InitSystem+0x128>)
 8004800:	edc3 7a07 	vstr	s15, [r3, #28]
	I_PI.IntSatH = 1;
 8004804:	4b22      	ldr	r3, [pc, #136]	; (8004890 <InitSystem+0x128>)
 8004806:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800480a:	621a      	str	r2, [r3, #32]
	I_PI.IntSatL = -I_PI.IntSatH;
 800480c:	4b20      	ldr	r3, [pc, #128]	; (8004890 <InitSystem+0x128>)
 800480e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004812:	eef1 7a67 	vneg.f32	s15, s15
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <InitSystem+0x128>)
 8004818:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	Pos_PI.Kp = 30;	//Impostazione parametri PI anello di posizione
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <InitSystem+0x138>)
 800481e:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <InitSystem+0x13c>)
 8004820:	609a      	str	r2, [r3, #8]
	Pos_PI.Ki = 0;
 8004822:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <InitSystem+0x138>)
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
	Pos_PI.Ts = 0.0001f;
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <InitSystem+0x138>)
 800482c:	4a1b      	ldr	r2, [pc, #108]	; (800489c <InitSystem+0x134>)
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
	Pos_PI.IntegralMemory = 0;
 8004830:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <InitSystem+0x138>)
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	615a      	str	r2, [r3, #20]
	Pos_PI.OutSatH = 1;
 8004838:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <InitSystem+0x138>)
 800483a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800483e:	619a      	str	r2, [r3, #24]
	Pos_PI.OutSatL = -I_PI.OutSatH;
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <InitSystem+0x128>)
 8004842:	edd3 7a06 	vldr	s15, [r3, #24]
 8004846:	eef1 7a67 	vneg.f32	s15, s15
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <InitSystem+0x138>)
 800484c:	edc3 7a07 	vstr	s15, [r3, #28]
	Pos_PI.IntSatH = 1;
 8004850:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <InitSystem+0x138>)
 8004852:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004856:	621a      	str	r2, [r3, #32]
	Pos_PI.IntSatL = -I_PI.IntSatH;
 8004858:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <InitSystem+0x128>)
 800485a:	edd3 7a08 	vldr	s15, [r3, #32]
 800485e:	eef1 7a67 	vneg.f32	s15, s15
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <InitSystem+0x138>)
 8004864:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

}
 8004868:	bf00      	nop
 800486a:	bd80      	pop	{r7, pc}
 800486c:	48000400 	.word	0x48000400
 8004870:	20000a74 	.word	0x20000a74
 8004874:	20000aa4 	.word	0x20000aa4
 8004878:	42960000 	.word	0x42960000
 800487c:	20000aa8 	.word	0x20000aa8
 8004880:	20000e10 	.word	0x20000e10
 8004884:	20000e18 	.word	0x20000e18
 8004888:	38d1b717 	.word	0x38d1b717
 800488c:	200000b0 	.word	0x200000b0
 8004890:	20000de4 	.word	0x20000de4
 8004894:	41c80000 	.word	0x41c80000
 8004898:	428c0000 	.word	0x428c0000
 800489c:	38d1b717 	.word	0x38d1b717
 80048a0:	20000acc 	.word	0x20000acc
 80048a4:	41f00000 	.word	0x41f00000

080048a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
	return 1;
 80048ac:	2301      	movs	r3, #1
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <_kill>:

int _kill(int pid, int sig)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80048c2:	f005 ff97 	bl	800a7f4 <__errno>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2216      	movs	r2, #22
 80048ca:	601a      	str	r2, [r3, #0]
	return -1;
 80048cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_exit>:

void _exit (int status)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80048e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ffe7 	bl	80048b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80048ea:	e7fe      	b.n	80048ea <_exit+0x12>

080048ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048f4:	4a14      	ldr	r2, [pc, #80]	; (8004948 <_sbrk+0x5c>)
 80048f6:	4b15      	ldr	r3, [pc, #84]	; (800494c <_sbrk+0x60>)
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <_sbrk+0x64>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <_sbrk+0x64>)
 800490a:	4a12      	ldr	r2, [pc, #72]	; (8004954 <_sbrk+0x68>)
 800490c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <_sbrk+0x64>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4413      	add	r3, r2
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	429a      	cmp	r2, r3
 800491a:	d207      	bcs.n	800492c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800491c:	f005 ff6a 	bl	800a7f4 <__errno>
 8004920:	4603      	mov	r3, r0
 8004922:	220c      	movs	r2, #12
 8004924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800492a:	e009      	b.n	8004940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800492c:	4b08      	ldr	r3, [pc, #32]	; (8004950 <_sbrk+0x64>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <_sbrk+0x64>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	4a05      	ldr	r2, [pc, #20]	; (8004950 <_sbrk+0x64>)
 800493c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800493e:	68fb      	ldr	r3, [r7, #12]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20008000 	.word	0x20008000
 800494c:	00000400 	.word	0x00000400
 8004950:	20000abc 	.word	0x20000abc
 8004954:	20000e50 	.word	0x20000e50

08004958 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <SystemInit+0x28>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	4a07      	ldr	r2, [pc, #28]	; (8004980 <SystemInit+0x28>)
 8004964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800496c:	4b04      	ldr	r3, [pc, #16]	; (8004980 <SystemInit+0x28>)
 800496e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004972:	609a      	str	r2, [r3, #8]
#endif
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	0a5a      	lsrs	r2, r3, #9
 8004994:	490f      	ldr	r1, [pc, #60]	; (80049d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004996:	fba1 1202 	umull	r1, r2, r1, r2
 800499a:	09d2      	lsrs	r2, r2, #7
 800499c:	490e      	ldr	r1, [pc, #56]	; (80049d8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800499e:	fb01 f202 	mul.w	r2, r1, r2
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	0a5b      	lsrs	r3, r3, #9
 80049ac:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	09db      	lsrs	r3, r3, #7
 80049b4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	441a      	add	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	601a      	str	r2, [r3, #0]
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	00044b83 	.word	0x00044b83
 80049d8:	3b9aca00 	.word	0x3b9aca00

080049dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049dc:	480d      	ldr	r0, [pc, #52]	; (8004a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049e0:	480d      	ldr	r0, [pc, #52]	; (8004a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80049e2:	490e      	ldr	r1, [pc, #56]	; (8004a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80049e4:	4a0e      	ldr	r2, [pc, #56]	; (8004a20 <LoopForever+0xe>)
  movs r3, #0
 80049e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80049e8:	e002      	b.n	80049f0 <LoopCopyDataInit>

080049ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ee:	3304      	adds	r3, #4

080049f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049f4:	d3f9      	bcc.n	80049ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049f6:	4a0b      	ldr	r2, [pc, #44]	; (8004a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049f8:	4c0b      	ldr	r4, [pc, #44]	; (8004a28 <LoopForever+0x16>)
  movs r3, #0
 80049fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049fc:	e001      	b.n	8004a02 <LoopFillZerobss>

080049fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a00:	3204      	adds	r2, #4

08004a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a04:	d3fb      	bcc.n	80049fe <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a06:	f7ff ffa7 	bl	8004958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a0a:	f005 fef9 	bl	800a800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a0e:	f7fc fdd9 	bl	80015c4 <main>

08004a12 <LoopForever>:

LoopForever:
    b LoopForever
 8004a12:	e7fe      	b.n	8004a12 <LoopForever>
  ldr   r0, =_estack
 8004a14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004a20:	0800ae4c 	.word	0x0800ae4c
  ldr r2, =_sbss
 8004a24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004a28:	20000e50 	.word	0x20000e50

08004a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a2c:	e7fe      	b.n	8004a2c <ADC1_2_IRQHandler>

08004a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a38:	2003      	movs	r0, #3
 8004a3a:	f001 fabb 	bl	8005fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f000 f80e 	bl	8004a60 <HAL_InitTick>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	71fb      	strb	r3, [r7, #7]
 8004a4e:	e001      	b.n	8004a54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a50:	f7ff fa0a 	bl	8003e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a54:	79fb      	ldrb	r3, [r7, #7]

}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <HAL_InitTick+0x68>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d022      	beq.n	8004aba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a74:	4b15      	ldr	r3, [pc, #84]	; (8004acc <HAL_InitTick+0x6c>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <HAL_InitTick+0x68>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fac6 	bl	800601a <HAL_SYSTICK_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10f      	bne.n	8004ab4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d809      	bhi.n	8004aae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aa2:	f001 fa92 	bl	8005fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <HAL_InitTick+0x70>)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	e007      	b.n	8004abe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
 8004ab2:	e004      	b.n	8004abe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	e001      	b.n	8004abe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000008 	.word	0x20000008
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	20000004 	.word	0x20000004

08004ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_IncTick+0x1c>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_IncTick+0x20>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	4a03      	ldr	r2, [pc, #12]	; (8004af0 <HAL_IncTick+0x1c>)
 8004ae4:	6013      	str	r3, [r2, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	20000e3c 	.word	0x20000e3c
 8004af4:	20000008 	.word	0x20000008

08004af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return uwTick;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <HAL_GetTick+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000e3c 	.word	0x20000e3c

08004b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b18:	f7ff ffee 	bl	8004af8 <HAL_GetTick>
 8004b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b28:	d004      	beq.n	8004b34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_Delay+0x40>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b34:	bf00      	nop
 8004b36:	f7ff ffdf 	bl	8004af8 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d8f7      	bhi.n	8004b36 <HAL_Delay+0x26>
  {
  }
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000008 	.word	0x20000008

08004b54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3360      	adds	r3, #96	; 0x60
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <LL_ADC_SetOffset+0x44>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	03fff000 	.word	0x03fff000

08004c04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3360      	adds	r3, #96	; 0x60
 8004c12:	461a      	mov	r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3360      	adds	r3, #96	; 0x60
 8004c40:	461a      	mov	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b087      	sub	sp, #28
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3360      	adds	r3, #96	; 0x60
 8004c76:	461a      	mov	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3360      	adds	r3, #96	; 0x60
 8004cac:	461a      	mov	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	615a      	str	r2, [r3, #20]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3330      	adds	r3, #48	; 0x30
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	4413      	add	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	211f      	movs	r1, #31
 8004d24:	fa01 f303 	lsl.w	r3, r1, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	0e9b      	lsrs	r3, r3, #26
 8004d30:	f003 011f 	and.w	r1, r3, #31
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3314      	adds	r3, #20
 8004d60:	461a      	mov	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	0e5b      	lsrs	r3, r3, #25
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	4413      	add	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	0d1b      	lsrs	r3, r3, #20
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	2107      	movs	r1, #7
 8004d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	401a      	ands	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0d1b      	lsrs	r3, r3, #20
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	fa01 f303 	lsl.w	r3, r1, r3
 8004d94:	431a      	orrs	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0318 	and.w	r3, r3, #24
 8004dca:	4908      	ldr	r1, [pc, #32]	; (8004dec <LL_ADC_SetChannelSingleDiff+0x44>)
 8004dcc:	40d9      	lsrs	r1, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	400b      	ands	r3, r1
 8004dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	0007ffff 	.word	0x0007ffff

08004df0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 031f 	and.w	r3, r3, #31
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004e1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6093      	str	r3, [r2, #8]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e44:	d101      	bne.n	8004e4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e94:	d101      	bne.n	8004e9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004eb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ebc:	f043 0201 	orr.w	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <LL_ADC_IsEnabled+0x18>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e000      	b.n	8004eea <LL_ADC_IsEnabled+0x1a>
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f0a:	f043 0204 	orr.w	r2, r3, #4
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d101      	bne.n	8004f36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d101      	bne.n	8004f5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b089      	sub	sp, #36	; 0x24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e16b      	b.n	800525e <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fe ff8b 	bl	8003eb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff ff3f 	bl	8004e30 <LL_ADC_IsDeepPowerDownEnabled>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff ff25 	bl	8004e0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff ff5a 	bl	8004e80 <LL_ADC_IsInternalRegulatorEnabled>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d113      	bne.n	8004ffa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff ff3e 	bl	8004e58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004fdc:	4ba2      	ldr	r3, [pc, #648]	; (8005268 <HAL_ADC_Init+0x2fc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	099b      	lsrs	r3, r3, #6
 8004fe2:	4aa2      	ldr	r2, [pc, #648]	; (800526c <HAL_ADC_Init+0x300>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004fec:	e002      	b.n	8004ff4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f9      	bne.n	8004fee <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff ff3e 	bl	8004e80 <LL_ADC_IsInternalRegulatorEnabled>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10d      	bne.n	8005026 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500e:	f043 0210 	orr.w	r2, r3, #16
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501a:	f043 0201 	orr.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff ff77 	bl	8004f1e <LL_ADC_REG_IsConversionOngoing>
 8005030:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b00      	cmp	r3, #0
 800503c:	f040 8106 	bne.w	800524c <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f040 8102 	bne.w	800524c <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005050:	f043 0202 	orr.w	r2, r3, #2
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ff37 	bl	8004ed0 <LL_ADC_IsEnabled>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d111      	bne.n	800508c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005068:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800506c:	f7ff ff30 	bl	8004ed0 <LL_ADC_IsEnabled>
 8005070:	4604      	mov	r4, r0
 8005072:	487f      	ldr	r0, [pc, #508]	; (8005270 <HAL_ADC_Init+0x304>)
 8005074:	f7ff ff2c 	bl	8004ed0 <LL_ADC_IsEnabled>
 8005078:	4603      	mov	r3, r0
 800507a:	4323      	orrs	r3, r4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4619      	mov	r1, r3
 8005086:	487b      	ldr	r0, [pc, #492]	; (8005274 <HAL_ADC_Init+0x308>)
 8005088:	f7ff fd64 	bl	8004b54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	7f5b      	ldrb	r3, [r3, #29]
 8005090:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005096:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800509c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80050a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d106      	bne.n	80050c8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	045b      	lsls	r3, r3, #17
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	4b63      	ldr	r3, [pc, #396]	; (8005278 <HAL_ADC_Init+0x30c>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	69b9      	ldr	r1, [r7, #24]
 80050f4:	430b      	orrs	r3, r1
 80050f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff ff03 	bl	8004f1e <LL_ADC_REG_IsConversionOngoing>
 8005118:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff ff10 	bl	8004f44 <LL_ADC_INJ_IsConversionOngoing>
 8005124:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d16d      	bne.n	8005208 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d16a      	bne.n	8005208 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005136:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800513e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800514e:	f023 0302 	bic.w	r3, r3, #2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	69b9      	ldr	r1, [r7, #24]
 8005158:	430b      	orrs	r3, r1
 800515a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d017      	beq.n	8005194 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005172:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800517c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6911      	ldr	r1, [r2, #16]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	430b      	orrs	r3, r1
 800518e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005192:	e013      	b.n	80051bc <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80051b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d118      	bne.n	80051f8 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051d0:	f023 0304 	bic.w	r3, r3, #4
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051dc:	4311      	orrs	r1, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051e2:	4311      	orrs	r1, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051e8:	430a      	orrs	r2, r1
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	611a      	str	r2, [r3, #16]
 80051f6:	e007      	b.n	8005208 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10c      	bne.n	800522a <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f023 010f 	bic.w	r1, r3, #15
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	1e5a      	subs	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
 8005228:	e007      	b.n	800523a <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 020f 	bic.w	r2, r2, #15
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	f043 0201 	orr.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	65da      	str	r2, [r3, #92]	; 0x5c
 800524a:	e007      	b.n	800525c <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005250:	f043 0210 	orr.w	r2, r3, #16
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800525c:	7ffb      	ldrb	r3, [r7, #31]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3724      	adds	r7, #36	; 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd90      	pop	{r4, r7, pc}
 8005266:	bf00      	nop
 8005268:	20000000 	.word	0x20000000
 800526c:	053e2d63 	.word	0x053e2d63
 8005270:	50000100 	.word	0x50000100
 8005274:	50000300 	.word	0x50000300
 8005278:	fff04007 	.word	0xfff04007

0800527c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005284:	4859      	ldr	r0, [pc, #356]	; (80053ec <HAL_ADC_Start+0x170>)
 8005286:	f7ff fdb3 	bl	8004df0 <LL_ADC_GetMultimode>
 800528a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fe44 	bl	8004f1e <LL_ADC_REG_IsConversionOngoing>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	f040 809f 	bne.w	80053dc <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_ADC_Start+0x30>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e09a      	b.n	80053e2 <HAL_ADC_Start+0x166>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fc8d 	bl	8005bd4 <ADC_Enable>
 80052ba:	4603      	mov	r3, r0
 80052bc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f040 8086 	bne.w	80053d2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a44      	ldr	r2, [pc, #272]	; (80053f0 <HAL_ADC_Start+0x174>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d002      	beq.n	80052ea <HAL_ADC_Start+0x6e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	e001      	b.n	80052ee <HAL_ADC_Start+0x72>
 80052ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d002      	beq.n	80052fc <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005300:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005314:	d106      	bne.n	8005324 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531a:	f023 0206 	bic.w	r2, r3, #6
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	661a      	str	r2, [r3, #96]	; 0x60
 8005322:	e002      	b.n	800532a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	221c      	movs	r2, #28
 8005330:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2c      	ldr	r2, [pc, #176]	; (80053f0 <HAL_ADC_Start+0x174>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d002      	beq.n	800534a <HAL_ADC_Start+0xce>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	e001      	b.n	800534e <HAL_ADC_Start+0xd2>
 800534a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	4293      	cmp	r3, r2
 8005354:	d008      	beq.n	8005368 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b05      	cmp	r3, #5
 8005360:	d002      	beq.n	8005368 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b09      	cmp	r3, #9
 8005366:	d114      	bne.n	8005392 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800537e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fdb3 	bl	8004ef6 <LL_ADC_REG_StartConversion>
 8005390:	e026      	b.n	80053e0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <HAL_ADC_Start+0x174>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d002      	beq.n	80053ae <HAL_ADC_Start+0x132>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	e001      	b.n	80053b2 <HAL_ADC_Start+0x136>
 80053ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80053b2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80053c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80053d0:	e006      	b.n	80053e0 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80053da:	e001      	b.n	80053e0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
 80053de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	50000300 	.word	0x50000300
 80053f0:	50000100 	.word	0x50000100

080053f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b0b6      	sub	sp, #216	; 0xd8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_ADC_ConfigChannel+0x22>
 8005412:	2302      	movs	r3, #2
 8005414:	e3c7      	b.n	8005ba6 <HAL_ADC_ConfigChannel+0x7b2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fd7b 	bl	8004f1e <LL_ADC_REG_IsConversionOngoing>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	f040 83ac 	bne.w	8005b88 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	6859      	ldr	r1, [r3, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	f7ff fc5b 	bl	8004cf8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fd69 	bl	8004f1e <LL_ADC_REG_IsConversionOngoing>
 800544c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fd75 	bl	8004f44 <LL_ADC_INJ_IsConversionOngoing>
 800545a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800545e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 81d9 	bne.w	800581a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 81d4 	bne.w	800581a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800547a:	d10f      	bne.n	800549c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2200      	movs	r2, #0
 8005486:	4619      	mov	r1, r3
 8005488:	f7ff fc62 	bl	8004d50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fc1c 	bl	8004cd2 <LL_ADC_SetSamplingTimeCommonConfig>
 800549a:	e00e      	b.n	80054ba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f7ff fc51 	bl	8004d50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2100      	movs	r1, #0
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fc0c 	bl	8004cd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	08db      	lsrs	r3, r3, #3
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d022      	beq.n	8005522 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6919      	ldr	r1, [r3, #16]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054ec:	f7ff fb66 	bl	8004bbc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6919      	ldr	r1, [r3, #16]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	461a      	mov	r2, r3
 80054fe:	f7ff fbb2 	bl	8004c66 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6919      	ldr	r1, [r3, #16]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	7f1b      	ldrb	r3, [r3, #28]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d102      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x124>
 8005512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005516:	e000      	b.n	800551a <HAL_ADC_ConfigChannel+0x126>
 8005518:	2300      	movs	r3, #0
 800551a:	461a      	mov	r2, r3
 800551c:	f7ff fbbe 	bl	8004c9c <LL_ADC_SetOffsetSaturation>
 8005520:	e17b      	b.n	800581a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fb6b 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 800552e:	4603      	mov	r3, r0
 8005530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_ADC_ConfigChannel+0x15a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2100      	movs	r1, #0
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fb60 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 8005544:	4603      	mov	r3, r0
 8005546:	0e9b      	lsrs	r3, r3, #26
 8005548:	f003 021f 	and.w	r2, r3, #31
 800554c:	e01e      	b.n	800558c <HAL_ADC_ConfigChannel+0x198>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2100      	movs	r1, #0
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff fb55 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 800555a:	4603      	mov	r3, r0
 800555c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005564:	fa93 f3a3 	rbit	r3, r3
 8005568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800556c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800557c:	2320      	movs	r3, #32
 800557e:	e004      	b.n	800558a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8005580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005584:	fab3 f383 	clz	r3, r3
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x1b0>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	0e9b      	lsrs	r3, r3, #26
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	e018      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x1e2>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80055b0:	fa93 f3a3 	rbit	r3, r3
 80055b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80055b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80055c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80055c8:	2320      	movs	r3, #32
 80055ca:	e004      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80055cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055d0:	fab3 f383 	clz	r3, r3
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d106      	bne.n	80055e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2200      	movs	r2, #0
 80055e0:	2100      	movs	r1, #0
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fb24 	bl	8004c30 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2101      	movs	r1, #1
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fb08 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <HAL_ADC_ConfigChannel+0x220>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2101      	movs	r1, #1
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fafd 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 800560a:	4603      	mov	r3, r0
 800560c:	0e9b      	lsrs	r3, r3, #26
 800560e:	f003 021f 	and.w	r2, r3, #31
 8005612:	e01e      	b.n	8005652 <HAL_ADC_ConfigChannel+0x25e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2101      	movs	r1, #1
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff faf2 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 8005620:	4603      	mov	r3, r0
 8005622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800562a:	fa93 f3a3 	rbit	r3, r3
 800562e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800563a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005642:	2320      	movs	r3, #32
 8005644:	e004      	b.n	8005650 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800564a:	fab3 f383 	clz	r3, r3
 800564e:	b2db      	uxtb	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800565a:	2b00      	cmp	r3, #0
 800565c:	d105      	bne.n	800566a <HAL_ADC_ConfigChannel+0x276>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	0e9b      	lsrs	r3, r3, #26
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	e018      	b.n	800569c <HAL_ADC_ConfigChannel+0x2a8>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005672:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005676:	fa93 f3a3 	rbit	r3, r3
 800567a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800567e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005686:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800568e:	2320      	movs	r3, #32
 8005690:	e004      	b.n	800569c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8005692:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005696:	fab3 f383 	clz	r3, r3
 800569a:	b2db      	uxtb	r3, r3
 800569c:	429a      	cmp	r2, r3
 800569e:	d106      	bne.n	80056ae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2101      	movs	r1, #1
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fac1 	bl	8004c30 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2102      	movs	r1, #2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff faa5 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <HAL_ADC_ConfigChannel+0x2e6>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2102      	movs	r1, #2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fa9a 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 80056d0:	4603      	mov	r3, r0
 80056d2:	0e9b      	lsrs	r3, r3, #26
 80056d4:	f003 021f 	and.w	r2, r3, #31
 80056d8:	e01e      	b.n	8005718 <HAL_ADC_ConfigChannel+0x324>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2102      	movs	r1, #2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fa8f 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056f0:	fa93 f3a3 	rbit	r3, r3
 80056f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80056f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005708:	2320      	movs	r3, #32
 800570a:	e004      	b.n	8005716 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800570c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	b2db      	uxtb	r3, r3
 8005716:	461a      	mov	r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x33c>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0e9b      	lsrs	r3, r3, #26
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	e016      	b.n	800575e <HAL_ADC_ConfigChannel+0x36a>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800573c:	fa93 f3a3 	rbit	r3, r3
 8005740:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005742:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005750:	2320      	movs	r3, #32
 8005752:	e004      	b.n	800575e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005758:	fab3 f383 	clz	r3, r3
 800575c:	b2db      	uxtb	r3, r3
 800575e:	429a      	cmp	r2, r3
 8005760:	d106      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	2102      	movs	r1, #2
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fa60 	bl	8004c30 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2103      	movs	r1, #3
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff fa44 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 800577c:	4603      	mov	r3, r0
 800577e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <HAL_ADC_ConfigChannel+0x3a8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2103      	movs	r1, #3
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fa39 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 8005792:	4603      	mov	r3, r0
 8005794:	0e9b      	lsrs	r3, r3, #26
 8005796:	f003 021f 	and.w	r2, r3, #31
 800579a:	e017      	b.n	80057cc <HAL_ADC_ConfigChannel+0x3d8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2103      	movs	r1, #3
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fa2e 	bl	8004c04 <LL_ADC_GetOffsetChannel>
 80057a8:	4603      	mov	r3, r0
 80057aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ae:	fa93 f3a3 	rbit	r3, r3
 80057b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80057b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80057b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80057be:	2320      	movs	r3, #32
 80057c0:	e003      	b.n	80057ca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80057c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c4:	fab3 f383 	clz	r3, r3
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <HAL_ADC_ConfigChannel+0x3f0>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	0e9b      	lsrs	r3, r3, #26
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	e011      	b.n	8005808 <HAL_ADC_ConfigChannel+0x414>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ec:	fa93 f3a3 	rbit	r3, r3
 80057f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80057f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80057f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80057fc:	2320      	movs	r3, #32
 80057fe:	e003      	b.n	8005808 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	429a      	cmp	r2, r3
 800580a:	d106      	bne.n	800581a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2200      	movs	r2, #0
 8005812:	2103      	movs	r1, #3
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fa0b 	bl	8004c30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fb56 	bl	8004ed0 <LL_ADC_IsEnabled>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 8140 	bne.w	8005aac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	461a      	mov	r2, r3
 800583a:	f7ff fab5 	bl	8004da8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4a8f      	ldr	r2, [pc, #572]	; (8005a80 <HAL_ADC_ConfigChannel+0x68c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	f040 8131 	bne.w	8005aac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x47e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	0e9b      	lsrs	r3, r3, #26
 8005860:	3301      	adds	r3, #1
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	2b09      	cmp	r3, #9
 8005868:	bf94      	ite	ls
 800586a:	2301      	movls	r3, #1
 800586c:	2300      	movhi	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	e019      	b.n	80058a6 <HAL_ADC_ConfigChannel+0x4b2>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800587a:	fa93 f3a3 	rbit	r3, r3
 800587e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005882:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800588a:	2320      	movs	r3, #32
 800588c:	e003      	b.n	8005896 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800588e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005890:	fab3 f383 	clz	r3, r3
 8005894:	b2db      	uxtb	r3, r3
 8005896:	3301      	adds	r3, #1
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	2b09      	cmp	r3, #9
 800589e:	bf94      	ite	ls
 80058a0:	2301      	movls	r3, #1
 80058a2:	2300      	movhi	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d079      	beq.n	800599e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d107      	bne.n	80058c6 <HAL_ADC_ConfigChannel+0x4d2>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	0e9b      	lsrs	r3, r3, #26
 80058bc:	3301      	adds	r3, #1
 80058be:	069b      	lsls	r3, r3, #26
 80058c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058c4:	e015      	b.n	80058f2 <HAL_ADC_ConfigChannel+0x4fe>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ce:	fa93 f3a3 	rbit	r3, r3
 80058d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80058d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80058d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80058de:	2320      	movs	r3, #32
 80058e0:	e003      	b.n	80058ea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80058e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e4:	fab3 f383 	clz	r3, r3
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	3301      	adds	r3, #1
 80058ec:	069b      	lsls	r3, r3, #26
 80058ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <HAL_ADC_ConfigChannel+0x51e>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	0e9b      	lsrs	r3, r3, #26
 8005904:	3301      	adds	r3, #1
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	2101      	movs	r1, #1
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	e017      	b.n	8005942 <HAL_ADC_ConfigChannel+0x54e>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591a:	fa93 f3a3 	rbit	r3, r3
 800591e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005922:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800592a:	2320      	movs	r3, #32
 800592c:	e003      	b.n	8005936 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800592e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005930:	fab3 f383 	clz	r3, r3
 8005934:	b2db      	uxtb	r3, r3
 8005936:	3301      	adds	r3, #1
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	ea42 0103 	orr.w	r1, r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <HAL_ADC_ConfigChannel+0x574>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	0e9b      	lsrs	r3, r3, #26
 8005958:	3301      	adds	r3, #1
 800595a:	f003 021f 	and.w	r2, r3, #31
 800595e:	4613      	mov	r3, r2
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	4413      	add	r3, r2
 8005964:	051b      	lsls	r3, r3, #20
 8005966:	e018      	b.n	800599a <HAL_ADC_ConfigChannel+0x5a6>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	fa93 f3a3 	rbit	r3, r3
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005980:	2320      	movs	r3, #32
 8005982:	e003      	b.n	800598c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	fab3 f383 	clz	r3, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	3301      	adds	r3, #1
 800598e:	f003 021f 	and.w	r2, r3, #31
 8005992:	4613      	mov	r3, r2
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	4413      	add	r3, r2
 8005998:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800599a:	430b      	orrs	r3, r1
 800599c:	e081      	b.n	8005aa2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d107      	bne.n	80059ba <HAL_ADC_ConfigChannel+0x5c6>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	0e9b      	lsrs	r3, r3, #26
 80059b0:	3301      	adds	r3, #1
 80059b2:	069b      	lsls	r3, r3, #26
 80059b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059b8:	e015      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x5f2>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	fa93 f3a3 	rbit	r3, r3
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80059d2:	2320      	movs	r3, #32
 80059d4:	e003      	b.n	80059de <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	fab3 f383 	clz	r3, r3
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	3301      	adds	r3, #1
 80059e0:	069b      	lsls	r3, r3, #26
 80059e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <HAL_ADC_ConfigChannel+0x612>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	0e9b      	lsrs	r3, r3, #26
 80059f8:	3301      	adds	r3, #1
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	2101      	movs	r1, #1
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	e017      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x642>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	fa93 f3a3 	rbit	r3, r3
 8005a12:	61fb      	str	r3, [r7, #28]
  return result;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005a1e:	2320      	movs	r3, #32
 8005a20:	e003      	b.n	8005a2a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	fab3 f383 	clz	r3, r3
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	ea42 0103 	orr.w	r1, r2, r3
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <HAL_ADC_ConfigChannel+0x66e>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	0e9b      	lsrs	r3, r3, #26
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	f003 021f 	and.w	r2, r3, #31
 8005a52:	4613      	mov	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4413      	add	r3, r2
 8005a58:	3b1e      	subs	r3, #30
 8005a5a:	051b      	lsls	r3, r3, #20
 8005a5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a60:	e01e      	b.n	8005aa0 <HAL_ADC_ConfigChannel+0x6ac>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	fa93 f3a3 	rbit	r3, r3
 8005a6e:	613b      	str	r3, [r7, #16]
  return result;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005a7a:	2320      	movs	r3, #32
 8005a7c:	e006      	b.n	8005a8c <HAL_ADC_ConfigChannel+0x698>
 8005a7e:	bf00      	nop
 8005a80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	fab3 f383 	clz	r3, r3
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f003 021f 	and.w	r2, r3, #31
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	3b1e      	subs	r3, #30
 8005a9a:	051b      	lsls	r3, r3, #20
 8005a9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	6892      	ldr	r2, [r2, #8]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f7ff f952 	bl	8004d50 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4b3f      	ldr	r3, [pc, #252]	; (8005bb0 <HAL_ADC_ConfigChannel+0x7bc>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d070      	beq.n	8005b9a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ab8:	483e      	ldr	r0, [pc, #248]	; (8005bb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005aba:	f7ff f871 	bl	8004ba0 <LL_ADC_GetCommonPathInternalCh>
 8005abe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a3c      	ldr	r2, [pc, #240]	; (8005bb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_ADC_ConfigChannel+0x6e2>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a3a      	ldr	r2, [pc, #232]	; (8005bbc <HAL_ADC_ConfigChannel+0x7c8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d126      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d120      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aea:	d156      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005af0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005af4:	4619      	mov	r1, r3
 8005af6:	482f      	ldr	r0, [pc, #188]	; (8005bb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005af8:	f7ff f83f 	bl	8004b7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005afc:	4b30      	ldr	r3, [pc, #192]	; (8005bc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	099b      	lsrs	r3, r3, #6
 8005b02:	4a30      	ldr	r2, [pc, #192]	; (8005bc4 <HAL_ADC_ConfigChannel+0x7d0>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	099a      	lsrs	r2, r3, #6
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b14:	e002      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f9      	bne.n	8005b16 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b22:	e03a      	b.n	8005b9a <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a27      	ldr	r2, [pc, #156]	; (8005bc8 <HAL_ADC_ConfigChannel+0x7d4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d113      	bne.n	8005b56 <HAL_ADC_ConfigChannel+0x762>
 8005b2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10d      	bne.n	8005b56 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a23      	ldr	r2, [pc, #140]	; (8005bcc <HAL_ADC_ConfigChannel+0x7d8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d02a      	beq.n	8005b9a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4819      	ldr	r0, [pc, #100]	; (8005bb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005b50:	f7ff f813 	bl	8004b7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b54:	e021      	b.n	8005b9a <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1d      	ldr	r2, [pc, #116]	; (8005bd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d11c      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d116      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <HAL_ADC_ConfigChannel+0x7d8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d011      	beq.n	8005b9a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b7e:	4619      	mov	r1, r3
 8005b80:	480c      	ldr	r0, [pc, #48]	; (8005bb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005b82:	f7fe fffa 	bl	8004b7a <LL_ADC_SetCommonPathInternalCh>
 8005b86:	e008      	b.n	8005b9a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ba2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	37d8      	adds	r7, #216	; 0xd8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	80080000 	.word	0x80080000
 8005bb4:	50000300 	.word	0x50000300
 8005bb8:	c3210000 	.word	0xc3210000
 8005bbc:	90c00010 	.word	0x90c00010
 8005bc0:	20000000 	.word	0x20000000
 8005bc4:	053e2d63 	.word	0x053e2d63
 8005bc8:	c7520000 	.word	0xc7520000
 8005bcc:	50000100 	.word	0x50000100
 8005bd0:	cb840000 	.word	0xcb840000

08005bd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff f975 	bl	8004ed0 <LL_ADC_IsEnabled>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d146      	bne.n	8005c7a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <ADC_Enable+0xb0>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00d      	beq.n	8005c16 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfe:	f043 0210 	orr.w	r2, r3, #16
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0a:	f043 0201 	orr.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e032      	b.n	8005c7c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff f944 	bl	8004ea8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c20:	f7fe ff6a 	bl	8004af8 <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c26:	e021      	b.n	8005c6c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff f94f 	bl	8004ed0 <LL_ADC_IsEnabled>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff f933 	bl	8004ea8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005c42:	f7fe ff59 	bl	8004af8 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d90d      	bls.n	8005c6c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c54:	f043 0210 	orr.w	r2, r3, #16
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c60:	f043 0201 	orr.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e007      	b.n	8005c7c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d1d6      	bne.n	8005c28 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	8000003f 	.word	0x8000003f

08005c88 <LL_ADC_IsEnabled>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <LL_ADC_IsEnabled+0x18>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <LL_ADC_IsEnabled+0x1a>
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <LL_ADC_REG_IsConversionOngoing>:
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d101      	bne.n	8005cc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005cd4:	b590      	push	{r4, r7, lr}
 8005cd6:	b0a1      	sub	sp, #132	; 0x84
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e087      	b.n	8005e02 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d02:	d102      	bne.n	8005d0a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005d04:	4b41      	ldr	r3, [pc, #260]	; (8005e0c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	e001      	b.n	8005d0e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e06a      	b.n	8005e02 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff ffbd 	bl	8005cae <LL_ADC_REG_IsConversionOngoing>
 8005d34:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff ffb7 	bl	8005cae <LL_ADC_REG_IsConversionOngoing>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d14c      	bne.n	8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d149      	bne.n	8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005d4c:	4b30      	ldr	r3, [pc, #192]	; (8005e10 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005d4e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d028      	beq.n	8005daa <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6859      	ldr	r1, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d6a:	035b      	lsls	r3, r3, #13
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005d78:	f7ff ff86 	bl	8005c88 <LL_ADC_IsEnabled>
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	4823      	ldr	r0, [pc, #140]	; (8005e0c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005d80:	f7ff ff82 	bl	8005c88 <LL_ADC_IsEnabled>
 8005d84:	4603      	mov	r3, r0
 8005d86:	4323      	orrs	r3, r4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d133      	bne.n	8005df4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005d94:	f023 030f 	bic.w	r3, r3, #15
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	6811      	ldr	r1, [r2, #0]
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	6892      	ldr	r2, [r2, #8]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005da6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005da8:	e024      	b.n	8005df4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005db4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005db6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005dba:	f7ff ff65 	bl	8005c88 <LL_ADC_IsEnabled>
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4812      	ldr	r0, [pc, #72]	; (8005e0c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005dc2:	f7ff ff61 	bl	8005c88 <LL_ADC_IsEnabled>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4323      	orrs	r3, r4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d112      	bne.n	8005df4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005dd6:	f023 030f 	bic.w	r3, r3, #15
 8005dda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ddc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005dde:	e009      	b.n	8005df4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005df2:	e000      	b.n	8005df6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005df4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005dfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3784      	adds	r7, #132	; 0x84
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd90      	pop	{r4, r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	50000100 	.word	0x50000100
 8005e10:	50000300 	.word	0x50000300

08005e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <__NVIC_SetPriorityGrouping+0x44>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e30:	4013      	ands	r3, r2
 8005e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e46:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <__NVIC_SetPriorityGrouping+0x44>)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	60d3      	str	r3, [r2, #12]
}
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	e000ed00 	.word	0xe000ed00

08005e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <__NVIC_GetPriorityGrouping+0x18>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	0a1b      	lsrs	r3, r3, #8
 8005e66:	f003 0307 	and.w	r3, r3, #7
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	e000ed00 	.word	0xe000ed00

08005e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	db0b      	blt.n	8005ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	f003 021f 	and.w	r2, r3, #31
 8005e90:	4907      	ldr	r1, [pc, #28]	; (8005eb0 <__NVIC_EnableIRQ+0x38>)
 8005e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	2001      	movs	r0, #1
 8005e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	e000e100 	.word	0xe000e100

08005eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	6039      	str	r1, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	db0a      	blt.n	8005ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	490c      	ldr	r1, [pc, #48]	; (8005f00 <__NVIC_SetPriority+0x4c>)
 8005ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed2:	0112      	lsls	r2, r2, #4
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005edc:	e00a      	b.n	8005ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	4908      	ldr	r1, [pc, #32]	; (8005f04 <__NVIC_SetPriority+0x50>)
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	3b04      	subs	r3, #4
 8005eec:	0112      	lsls	r2, r2, #4
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	761a      	strb	r2, [r3, #24]
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	e000e100 	.word	0xe000e100
 8005f04:	e000ed00 	.word	0xe000ed00

08005f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b089      	sub	sp, #36	; 0x24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f1c3 0307 	rsb	r3, r3, #7
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	bf28      	it	cs
 8005f26:	2304      	movcs	r3, #4
 8005f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d902      	bls.n	8005f38 <NVIC_EncodePriority+0x30>
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	3b03      	subs	r3, #3
 8005f36:	e000      	b.n	8005f3a <NVIC_EncodePriority+0x32>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43da      	mvns	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5a:	43d9      	mvns	r1, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f60:	4313      	orrs	r3, r2
         );
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3724      	adds	r7, #36	; 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f80:	d301      	bcc.n	8005f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f82:	2301      	movs	r3, #1
 8005f84:	e00f      	b.n	8005fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f86:	4a0a      	ldr	r2, [pc, #40]	; (8005fb0 <SysTick_Config+0x40>)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f8e:	210f      	movs	r1, #15
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f94:	f7ff ff8e 	bl	8005eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <SysTick_Config+0x40>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f9e:	4b04      	ldr	r3, [pc, #16]	; (8005fb0 <SysTick_Config+0x40>)
 8005fa0:	2207      	movs	r2, #7
 8005fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	e000e010 	.word	0xe000e010

08005fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ff29 	bl	8005e14 <__NVIC_SetPriorityGrouping>
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b086      	sub	sp, #24
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fd8:	f7ff ff40 	bl	8005e5c <__NVIC_GetPriorityGrouping>
 8005fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	6978      	ldr	r0, [r7, #20]
 8005fe4:	f7ff ff90 	bl	8005f08 <NVIC_EncodePriority>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff ff5f 	bl	8005eb4 <__NVIC_SetPriority>
}
 8005ff6:	bf00      	nop
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	4603      	mov	r3, r0
 8006006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff ff33 	bl	8005e78 <__NVIC_EnableIRQ>
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff ffa4 	bl	8005f70 <SysTick_Config>
 8006028:	4603      	mov	r3, r0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e014      	b.n	800606e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	791b      	ldrb	r3, [r3, #4]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7fd ffa9 	bl	8003fac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	795b      	ldrb	r3, [r3, #5]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_DAC_Start+0x16>
 8006088:	2302      	movs	r3, #2
 800608a:	e043      	b.n	8006114 <HAL_DAC_Start+0x9e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6819      	ldr	r1, [r3, #0]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2201      	movs	r2, #1
 80060a6:	409a      	lsls	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7fe fd2d 	bl	8004b10 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10f      	bne.n	80060dc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d11d      	bne.n	8006106 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0201 	orr.w	r2, r2, #1
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	e014      	b.n	8006106 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2102      	movs	r1, #2
 80060ee:	fa01 f303 	lsl.w	r3, r1, r3
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d107      	bne.n	8006106 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0202 	orr.w	r2, r2, #2
 8006104:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d105      	bne.n	800614c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4413      	add	r3, r2
 8006146:	3308      	adds	r3, #8
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	e004      	b.n	8006156 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	3314      	adds	r3, #20
 8006154:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	461a      	mov	r2, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	795b      	ldrb	r3, [r3, #5]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_DAC_ConfigChannel+0x1c>
 8006184:	2302      	movs	r3, #2
 8006186:	e196      	b.n	80064b6 <HAL_DAC_ConfigChannel+0x34a>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2202      	movs	r2, #2
 8006192:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b04      	cmp	r3, #4
 800619a:	d174      	bne.n	8006286 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d137      	bne.n	8006212 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80061a2:	f7fe fca9 	bl	8004af8 <HAL_GetTick>
 80061a6:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061a8:	e011      	b.n	80061ce <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80061aa:	f7fe fca5 	bl	8004af8 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d90a      	bls.n	80061ce <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f043 0208 	orr.w	r2, r3, #8
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2203      	movs	r2, #3
 80061c8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e173      	b.n	80064b6 <HAL_DAC_ConfigChannel+0x34a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e6      	bne.n	80061aa <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80061dc:	2001      	movs	r0, #1
 80061de:	f7fe fc97 	bl	8004b10 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40
 80061ec:	e01e      	b.n	800622c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80061ee:	f7fe fc83 	bl	8004af8 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d90a      	bls.n	8006212 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f043 0208 	orr.w	r2, r3, #8
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2203      	movs	r2, #3
 800620c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e151      	b.n	80064b6 <HAL_DAC_ConfigChannel+0x34a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	dbe8      	blt.n	80061ee <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800621c:	2001      	movs	r0, #1
 800621e:	f7fe fc77 	bl	8004b10 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800622a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	43db      	mvns	r3, r3
 8006242:	ea02 0103 	and.w	r1, r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	409a      	lsls	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	21ff      	movs	r1, #255	; 0xff
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	43db      	mvns	r3, r3
 800626e:	ea02 0103 	and.w	r1, r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	409a      	lsls	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d11d      	bne.n	80062ca <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	221f      	movs	r2, #31
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43db      	mvns	r3, r3
 80062a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a6:	4013      	ands	r3, r2
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062be:	4313      	orrs	r3, r2
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2207      	movs	r2, #7
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	43db      	mvns	r3, r3
 80062e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e2:	4013      	ands	r3, r2
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	623b      	str	r3, [r7, #32]
 80062f6:	e011      	b.n	800631c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006304:	2301      	movs	r3, #1
 8006306:	623b      	str	r3, [r7, #32]
 8006308:	e008      	b.n	800631c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d102      	bne.n	8006318 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006312:	2301      	movs	r3, #1
 8006314:	623b      	str	r3, [r7, #32]
 8006316:	e001      	b.n	800631c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006318:	2300      	movs	r3, #0
 800631a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	6a3a      	ldr	r2, [r7, #32]
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	43db      	mvns	r3, r3
 800633c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633e:	4013      	ands	r3, r2
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	791b      	ldrb	r3, [r3, #4]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d102      	bne.n	8006350 <HAL_DAC_ConfigChannel+0x1e4>
 800634a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800634e:	e000      	b.n	8006352 <HAL_DAC_ConfigChannel+0x1e6>
 8006350:	2300      	movs	r3, #0
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43db      	mvns	r3, r3
 8006368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636a:	4013      	ands	r3, r2
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	795b      	ldrb	r3, [r3, #5]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d102      	bne.n	800637c <HAL_DAC_ConfigChannel+0x210>
 8006376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800637a:	e000      	b.n	800637e <HAL_DAC_ConfigChannel+0x212>
 800637c:	2300      	movs	r3, #0
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	4313      	orrs	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d114      	bne.n	80063be <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006394:	f001 fac0 	bl	8007918 <HAL_RCC_GetHCLKFreq>
 8006398:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	4a48      	ldr	r2, [pc, #288]	; (80064c0 <HAL_DAC_ConfigChannel+0x354>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d904      	bls.n	80063ac <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	e00f      	b.n	80063cc <HAL_DAC_ConfigChannel+0x260>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	4a45      	ldr	r2, [pc, #276]	; (80064c4 <HAL_DAC_ConfigChannel+0x358>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d90a      	bls.n	80063ca <HAL_DAC_ConfigChannel+0x25e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
 80063bc:	e006      	b.n	80063cc <HAL_DAC_ConfigChannel+0x260>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c4:	4313      	orrs	r3, r2
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
 80063c8:	e000      	b.n	80063cc <HAL_DAC_ConfigChannel+0x260>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80063ca:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063da:	4313      	orrs	r3, r2
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6819      	ldr	r1, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43da      	mvns	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	400a      	ands	r2, r1
 8006402:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	43db      	mvns	r3, r3
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	4013      	ands	r3, r2
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006436:	4313      	orrs	r3, r2
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006440:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6819      	ldr	r1, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	22c0      	movs	r2, #192	; 0xc0
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43da      	mvns	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	400a      	ands	r2, r1
 800645c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	089b      	lsrs	r3, r3, #2
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	089b      	lsrs	r3, r3, #2
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	4313      	orrs	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	f640 710f 	movw	r1, #3855	; 0xf0f
 800648c:	fa01 f303 	lsl.w	r3, r1, r3
 8006490:	43db      	mvns	r3, r3
 8006492:	ea02 0103 	and.w	r1, r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	409a      	lsls	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2201      	movs	r2, #1
 80064ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3728      	adds	r7, #40	; 0x28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	09896800 	.word	0x09896800
 80064c4:	04c4b400 	.word	0x04c4b400

080064c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e08d      	b.n	80065f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	4b47      	ldr	r3, [pc, #284]	; (8006600 <HAL_DMA_Init+0x138>)
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d80f      	bhi.n	8006506 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	4b45      	ldr	r3, [pc, #276]	; (8006604 <HAL_DMA_Init+0x13c>)
 80064ee:	4413      	add	r3, r2
 80064f0:	4a45      	ldr	r2, [pc, #276]	; (8006608 <HAL_DMA_Init+0x140>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	009a      	lsls	r2, r3, #2
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a42      	ldr	r2, [pc, #264]	; (800660c <HAL_DMA_Init+0x144>)
 8006502:	641a      	str	r2, [r3, #64]	; 0x40
 8006504:	e00e      	b.n	8006524 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	4b40      	ldr	r3, [pc, #256]	; (8006610 <HAL_DMA_Init+0x148>)
 800650e:	4413      	add	r3, r2
 8006510:	4a3d      	ldr	r2, [pc, #244]	; (8006608 <HAL_DMA_Init+0x140>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	091b      	lsrs	r3, r3, #4
 8006518:	009a      	lsls	r2, r3, #2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a3c      	ldr	r2, [pc, #240]	; (8006614 <HAL_DMA_Init+0x14c>)
 8006522:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa1e 	bl	80069b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006584:	d102      	bne.n	800658c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d010      	beq.n	80065cc <HAL_DMA_Init+0x104>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d80c      	bhi.n	80065cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa3e 	bl	8006a34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	e008      	b.n	80065de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40020407 	.word	0x40020407
 8006604:	bffdfff8 	.word	0xbffdfff8
 8006608:	cccccccd 	.word	0xcccccccd
 800660c:	40020000 	.word	0x40020000
 8006610:	bffdfbf8 	.word	0xbffdfbf8
 8006614:	40020400 	.word	0x40020400

08006618 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_DMA_Start_IT+0x20>
 8006634:	2302      	movs	r3, #2
 8006636:	e066      	b.n	8006706 <HAL_DMA_Start_IT+0xee>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	d155      	bne.n	80066f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f962 	bl	800693a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	2b00      	cmp	r3, #0
 800667c:	d008      	beq.n	8006690 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 020e 	orr.w	r2, r2, #14
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e00f      	b.n	80066b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0204 	bic.w	r2, r2, #4
 800669e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 020a 	orr.w	r2, r2, #10
 80066ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0201 	orr.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e005      	b.n	8006704 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006700:	2302      	movs	r3, #2
 8006702:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d00d      	beq.n	8006742 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2204      	movs	r2, #4
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
 8006740:	e047      	b.n	80067d2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 020e 	bic.w	r2, r2, #14
 8006750:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006770:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	f003 021f 	and.w	r2, r3, #31
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2101      	movs	r1, #1
 8006780:	fa01 f202 	lsl.w	r2, r1, r2
 8006784:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800678e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00c      	beq.n	80067b2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80067b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
    }
  }
  return status;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	2204      	movs	r2, #4
 80067fe:	409a      	lsls	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4013      	ands	r3, r2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d026      	beq.n	8006856 <HAL_DMA_IRQHandler+0x7a>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d021      	beq.n	8006856 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d107      	bne.n	8006830 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0204 	bic.w	r2, r2, #4
 800682e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006834:	f003 021f 	and.w	r2, r3, #31
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	2104      	movs	r1, #4
 800683e:	fa01 f202 	lsl.w	r2, r1, r2
 8006842:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	2b00      	cmp	r3, #0
 800684a:	d071      	beq.n	8006930 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006854:	e06c      	b.n	8006930 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2202      	movs	r2, #2
 8006860:	409a      	lsls	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4013      	ands	r3, r2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d02e      	beq.n	80068c8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d029      	beq.n	80068c8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10b      	bne.n	800689a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 020a 	bic.w	r2, r2, #10
 8006890:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689e:	f003 021f 	and.w	r2, r3, #31
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	2102      	movs	r1, #2
 80068a8:	fa01 f202 	lsl.w	r2, r1, r2
 80068ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d038      	beq.n	8006930 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80068c6:	e033      	b.n	8006930 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	2208      	movs	r2, #8
 80068d2:	409a      	lsls	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4013      	ands	r3, r2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d02a      	beq.n	8006932 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d025      	beq.n	8006932 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 020e 	bic.w	r2, r2, #14
 80068f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fa:	f003 021f 	and.w	r2, r3, #31
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	2101      	movs	r1, #1
 8006904:	fa01 f202 	lsl.w	r2, r1, r2
 8006908:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006930:	bf00      	nop
 8006932:	bf00      	nop
}
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006950:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006962:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006968:	f003 021f 	and.w	r2, r3, #31
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f202 	lsl.w	r2, r1, r2
 8006976:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b10      	cmp	r3, #16
 8006986:	d108      	bne.n	800699a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006998:	e007      	b.n	80069aa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	60da      	str	r2, [r3, #12]
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	4b16      	ldr	r3, [pc, #88]	; (8006a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d802      	bhi.n	80069d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80069cc:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e001      	b.n	80069d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80069d4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	3b08      	subs	r3, #8
 80069e2:	4a12      	ldr	r2, [pc, #72]	; (8006a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80069e4:	fba2 2303 	umull	r2, r3, r2, r3
 80069e8:	091b      	lsrs	r3, r3, #4
 80069ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f0:	089b      	lsrs	r3, r3, #2
 80069f2:	009a      	lsls	r2, r3, #2
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a0b      	ldr	r2, [pc, #44]	; (8006a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006a02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	409a      	lsls	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40020407 	.word	0x40020407
 8006a24:	40020800 	.word	0x40020800
 8006a28:	40020820 	.word	0x40020820
 8006a2c:	cccccccd 	.word	0xcccccccd
 8006a30:	40020880 	.word	0x40020880

08006a34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a08      	ldr	r2, [pc, #32]	; (8006a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006a56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	2201      	movs	r2, #1
 8006a62:	409a      	lsls	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006a68:	bf00      	nop
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	1000823f 	.word	0x1000823f
 8006a78:	40020940 	.word	0x40020940

08006a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a8a:	e15a      	b.n	8006d42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	2101      	movs	r1, #1
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	fa01 f303 	lsl.w	r3, r1, r3
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 814c 	beq.w	8006d3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d00b      	beq.n	8006ac4 <HAL_GPIO_Init+0x48>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d007      	beq.n	8006ac4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ab8:	2b11      	cmp	r3, #17
 8006aba:	d003      	beq.n	8006ac4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b12      	cmp	r3, #18
 8006ac2:	d130      	bne.n	8006b26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	2203      	movs	r2, #3
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006afa:	2201      	movs	r2, #1
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	43db      	mvns	r3, r3
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4013      	ands	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	091b      	lsrs	r3, r3, #4
 8006b10:	f003 0201 	and.w	r2, r3, #1
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	2203      	movs	r2, #3
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	43db      	mvns	r3, r3
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d003      	beq.n	8006b66 <HAL_GPIO_Init+0xea>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b12      	cmp	r3, #18
 8006b64:	d123      	bne.n	8006bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	08da      	lsrs	r2, r3, #3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3208      	adds	r2, #8
 8006b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	220f      	movs	r2, #15
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	43db      	mvns	r3, r3
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4013      	ands	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	691a      	ldr	r2, [r3, #16]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	08da      	lsrs	r2, r3, #3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3208      	adds	r2, #8
 8006ba8:	6939      	ldr	r1, [r7, #16]
 8006baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	2203      	movs	r2, #3
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	43db      	mvns	r3, r3
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f003 0203 	and.w	r2, r3, #3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 80a6 	beq.w	8006d3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bf0:	4b5b      	ldr	r3, [pc, #364]	; (8006d60 <HAL_GPIO_Init+0x2e4>)
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf4:	4a5a      	ldr	r2, [pc, #360]	; (8006d60 <HAL_GPIO_Init+0x2e4>)
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	6613      	str	r3, [r2, #96]	; 0x60
 8006bfc:	4b58      	ldr	r3, [pc, #352]	; (8006d60 <HAL_GPIO_Init+0x2e4>)
 8006bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	60bb      	str	r3, [r7, #8]
 8006c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c08:	4a56      	ldr	r2, [pc, #344]	; (8006d64 <HAL_GPIO_Init+0x2e8>)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	089b      	lsrs	r3, r3, #2
 8006c0e:	3302      	adds	r3, #2
 8006c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f003 0303 	and.w	r3, r3, #3
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	220f      	movs	r2, #15
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	43db      	mvns	r3, r3
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006c32:	d01f      	beq.n	8006c74 <HAL_GPIO_Init+0x1f8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a4c      	ldr	r2, [pc, #304]	; (8006d68 <HAL_GPIO_Init+0x2ec>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d019      	beq.n	8006c70 <HAL_GPIO_Init+0x1f4>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a4b      	ldr	r2, [pc, #300]	; (8006d6c <HAL_GPIO_Init+0x2f0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d013      	beq.n	8006c6c <HAL_GPIO_Init+0x1f0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a4a      	ldr	r2, [pc, #296]	; (8006d70 <HAL_GPIO_Init+0x2f4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00d      	beq.n	8006c68 <HAL_GPIO_Init+0x1ec>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a49      	ldr	r2, [pc, #292]	; (8006d74 <HAL_GPIO_Init+0x2f8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d007      	beq.n	8006c64 <HAL_GPIO_Init+0x1e8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a48      	ldr	r2, [pc, #288]	; (8006d78 <HAL_GPIO_Init+0x2fc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d101      	bne.n	8006c60 <HAL_GPIO_Init+0x1e4>
 8006c5c:	2305      	movs	r3, #5
 8006c5e:	e00a      	b.n	8006c76 <HAL_GPIO_Init+0x1fa>
 8006c60:	2306      	movs	r3, #6
 8006c62:	e008      	b.n	8006c76 <HAL_GPIO_Init+0x1fa>
 8006c64:	2304      	movs	r3, #4
 8006c66:	e006      	b.n	8006c76 <HAL_GPIO_Init+0x1fa>
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e004      	b.n	8006c76 <HAL_GPIO_Init+0x1fa>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e002      	b.n	8006c76 <HAL_GPIO_Init+0x1fa>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <HAL_GPIO_Init+0x1fa>
 8006c74:	2300      	movs	r3, #0
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	f002 0203 	and.w	r2, r2, #3
 8006c7c:	0092      	lsls	r2, r2, #2
 8006c7e:	4093      	lsls	r3, r2
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c86:	4937      	ldr	r1, [pc, #220]	; (8006d64 <HAL_GPIO_Init+0x2e8>)
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	089b      	lsrs	r3, r3, #2
 8006c8c:	3302      	adds	r3, #2
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006c94:	4b39      	ldr	r3, [pc, #228]	; (8006d7c <HAL_GPIO_Init+0x300>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006cb8:	4a30      	ldr	r2, [pc, #192]	; (8006d7c <HAL_GPIO_Init+0x300>)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <HAL_GPIO_Init+0x300>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ce2:	4a26      	ldr	r2, [pc, #152]	; (8006d7c <HAL_GPIO_Init+0x300>)
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ce8:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <HAL_GPIO_Init+0x300>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d0c:	4a1b      	ldr	r2, [pc, #108]	; (8006d7c <HAL_GPIO_Init+0x300>)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d12:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <HAL_GPIO_Init+0x300>)
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d36:	4a11      	ldr	r2, [pc, #68]	; (8006d7c <HAL_GPIO_Init+0x300>)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f47f ae9d 	bne.w	8006a8c <HAL_GPIO_Init+0x10>
  }
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	40021000 	.word	0x40021000
 8006d64:	40010000 	.word	0x40010000
 8006d68:	48000400 	.word	0x48000400
 8006d6c:	48000800 	.word	0x48000800
 8006d70:	48000c00 	.word	0x48000c00
 8006d74:	48001000 	.word	0x48001000
 8006d78:	48001400 	.word	0x48001400
 8006d7c:	40010400 	.word	0x40010400

08006d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	887b      	ldrh	r3, [r7, #2]
 8006d92:	4013      	ands	r3, r2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	73fb      	strb	r3, [r7, #15]
 8006d9c:	e001      	b.n	8006da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	807b      	strh	r3, [r7, #2]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006dc0:	787b      	ldrb	r3, [r7, #1]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006dc6:	887a      	ldrh	r2, [r7, #2]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006dcc:	e002      	b.n	8006dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006dce:	887a      	ldrh	r2, [r7, #2]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006df2:	887a      	ldrh	r2, [r7, #2]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4013      	ands	r3, r2
 8006df8:	041a      	lsls	r2, r3, #16
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	43d9      	mvns	r1, r3
 8006dfe:	887b      	ldrh	r3, [r7, #2]
 8006e00:	400b      	ands	r3, r1
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	619a      	str	r2, [r3, #24]
}
 8006e08:	bf00      	nop
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e1e:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e20:	695a      	ldr	r2, [r3, #20]
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	4013      	ands	r3, r2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d006      	beq.n	8006e38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e2a:	4a05      	ldr	r2, [pc, #20]	; (8006e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fa ffb8 	bl	8001da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40010400 	.word	0x40010400

08006e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d141      	bne.n	8006ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e52:	4b4b      	ldr	r3, [pc, #300]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5e:	d131      	bne.n	8006ec4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e60:	4b47      	ldr	r3, [pc, #284]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e66:	4a46      	ldr	r2, [pc, #280]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e70:	4b43      	ldr	r3, [pc, #268]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e78:	4a41      	ldr	r2, [pc, #260]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e80:	4b40      	ldr	r3, [pc, #256]	; (8006f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2232      	movs	r2, #50	; 0x32
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	4a3f      	ldr	r2, [pc, #252]	; (8006f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e90:	0c9b      	lsrs	r3, r3, #18
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e96:	e002      	b.n	8006e9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e9e:	4b38      	ldr	r3, [pc, #224]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eaa:	d102      	bne.n	8006eb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f2      	bne.n	8006e98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eb2:	4b33      	ldr	r3, [pc, #204]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebe:	d158      	bne.n	8006f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e057      	b.n	8006f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ec4:	4b2e      	ldr	r3, [pc, #184]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eca:	4a2d      	ldr	r2, [pc, #180]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ed4:	e04d      	b.n	8006f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006edc:	d141      	bne.n	8006f62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ede:	4b28      	ldr	r3, [pc, #160]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eea:	d131      	bne.n	8006f50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006eec:	4b24      	ldr	r3, [pc, #144]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef2:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006efc:	4b20      	ldr	r3, [pc, #128]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f04:	4a1e      	ldr	r2, [pc, #120]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2232      	movs	r2, #50	; 0x32
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	4a1c      	ldr	r2, [pc, #112]	; (8006f88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f18:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1c:	0c9b      	lsrs	r3, r3, #18
 8006f1e:	3301      	adds	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f22:	e002      	b.n	8006f2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f2a:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f36:	d102      	bne.n	8006f3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f2      	bne.n	8006f24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f3e:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4a:	d112      	bne.n	8006f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e011      	b.n	8006f74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f50:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f56:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f60:	e007      	b.n	8006f72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f62:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f6a:	4a05      	ldr	r2, [pc, #20]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	40007000 	.word	0x40007000
 8006f84:	20000000 	.word	0x20000000
 8006f88:	431bde83 	.word	0x431bde83

08006f8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	4a04      	ldr	r2, [pc, #16]	; (8006fa8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f9a:	6093      	str	r3, [r2, #8]
}
 8006f9c:	bf00      	nop
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	40007000 	.word	0x40007000

08006fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e308      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d075      	beq.n	80070b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fca:	4ba3      	ldr	r3, [pc, #652]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 030c 	and.w	r3, r3, #12
 8006fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fd4:	4ba0      	ldr	r3, [pc, #640]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b0c      	cmp	r3, #12
 8006fe2:	d102      	bne.n	8006fea <HAL_RCC_OscConfig+0x3e>
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d002      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x44>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d10b      	bne.n	8007008 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff0:	4b99      	ldr	r3, [pc, #612]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d05b      	beq.n	80070b4 <HAL_RCC_OscConfig+0x108>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d157      	bne.n	80070b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e2e3      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007010:	d106      	bne.n	8007020 <HAL_RCC_OscConfig+0x74>
 8007012:	4b91      	ldr	r3, [pc, #580]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a90      	ldr	r2, [pc, #576]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	e01d      	b.n	800705c <HAL_RCC_OscConfig+0xb0>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007028:	d10c      	bne.n	8007044 <HAL_RCC_OscConfig+0x98>
 800702a:	4b8b      	ldr	r3, [pc, #556]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a8a      	ldr	r2, [pc, #552]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4b88      	ldr	r3, [pc, #544]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a87      	ldr	r2, [pc, #540]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 800703c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	e00b      	b.n	800705c <HAL_RCC_OscConfig+0xb0>
 8007044:	4b84      	ldr	r3, [pc, #528]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a83      	ldr	r2, [pc, #524]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 800704a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	4b81      	ldr	r3, [pc, #516]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a80      	ldr	r2, [pc, #512]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800705a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d013      	beq.n	800708c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007064:	f7fd fd48 	bl	8004af8 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800706c:	f7fd fd44 	bl	8004af8 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b64      	cmp	r3, #100	; 0x64
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e2a8      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800707e:	4b76      	ldr	r3, [pc, #472]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0f0      	beq.n	800706c <HAL_RCC_OscConfig+0xc0>
 800708a:	e014      	b.n	80070b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708c:	f7fd fd34 	bl	8004af8 <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007094:	f7fd fd30 	bl	8004af8 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b64      	cmp	r3, #100	; 0x64
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e294      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070a6:	4b6c      	ldr	r3, [pc, #432]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1f0      	bne.n	8007094 <HAL_RCC_OscConfig+0xe8>
 80070b2:	e000      	b.n	80070b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d075      	beq.n	80071ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070c2:	4b65      	ldr	r3, [pc, #404]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 030c 	and.w	r3, r3, #12
 80070ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070cc:	4b62      	ldr	r3, [pc, #392]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b0c      	cmp	r3, #12
 80070da:	d102      	bne.n	80070e2 <HAL_RCC_OscConfig+0x136>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d002      	beq.n	80070e8 <HAL_RCC_OscConfig+0x13c>
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d11f      	bne.n	8007128 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070e8:	4b5b      	ldr	r3, [pc, #364]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_RCC_OscConfig+0x154>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e267      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007100:	4b55      	ldr	r3, [pc, #340]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	061b      	lsls	r3, r3, #24
 800710e:	4952      	ldr	r1, [pc, #328]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007110:	4313      	orrs	r3, r2
 8007112:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007114:	4b51      	ldr	r3, [pc, #324]	; (800725c <HAL_RCC_OscConfig+0x2b0>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4618      	mov	r0, r3
 800711a:	f7fd fca1 	bl	8004a60 <HAL_InitTick>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d043      	beq.n	80071ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e253      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d023      	beq.n	8007178 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007130:	4b49      	ldr	r3, [pc, #292]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a48      	ldr	r2, [pc, #288]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800713a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fd fcdc 	bl	8004af8 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007144:	f7fd fcd8 	bl	8004af8 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e23c      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007156:	4b40      	ldr	r3, [pc, #256]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007162:	4b3d      	ldr	r3, [pc, #244]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	061b      	lsls	r3, r3, #24
 8007170:	4939      	ldr	r1, [pc, #228]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007172:	4313      	orrs	r3, r2
 8007174:	604b      	str	r3, [r1, #4]
 8007176:	e01a      	b.n	80071ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007178:	4b37      	ldr	r3, [pc, #220]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a36      	ldr	r2, [pc, #216]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 800717e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007184:	f7fd fcb8 	bl	8004af8 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800718c:	f7fd fcb4 	bl	8004af8 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e218      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800719e:	4b2e      	ldr	r3, [pc, #184]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0x1e0>
 80071aa:	e000      	b.n	80071ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d03c      	beq.n	8007234 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d01c      	beq.n	80071fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071c2:	4b25      	ldr	r3, [pc, #148]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 80071c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071c8:	4a23      	ldr	r2, [pc, #140]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 80071ca:	f043 0301 	orr.w	r3, r3, #1
 80071ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d2:	f7fd fc91 	bl	8004af8 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071d8:	e008      	b.n	80071ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071da:	f7fd fc8d 	bl	8004af8 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e1f1      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071ec:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 80071ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0ef      	beq.n	80071da <HAL_RCC_OscConfig+0x22e>
 80071fa:	e01b      	b.n	8007234 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071fc:	4b16      	ldr	r3, [pc, #88]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 80071fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007202:	4a15      	ldr	r2, [pc, #84]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007204:	f023 0301 	bic.w	r3, r3, #1
 8007208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720c:	f7fd fc74 	bl	8004af8 <HAL_GetTick>
 8007210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007214:	f7fd fc70 	bl	8004af8 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e1d4      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007226:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1ef      	bne.n	8007214 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80ab 	beq.w	8007398 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007242:	2300      	movs	r3, #0
 8007244:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007246:	4b04      	ldr	r3, [pc, #16]	; (8007258 <HAL_RCC_OscConfig+0x2ac>)
 8007248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <HAL_RCC_OscConfig+0x2b4>
 8007252:	2301      	movs	r3, #1
 8007254:	e005      	b.n	8007262 <HAL_RCC_OscConfig+0x2b6>
 8007256:	bf00      	nop
 8007258:	40021000 	.word	0x40021000
 800725c:	20000004 	.word	0x20000004
 8007260:	2300      	movs	r3, #0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00d      	beq.n	8007282 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007266:	4baf      	ldr	r3, [pc, #700]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726a:	4aae      	ldr	r2, [pc, #696]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 800726c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007270:	6593      	str	r3, [r2, #88]	; 0x58
 8007272:	4bac      	ldr	r3, [pc, #688]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800727e:	2301      	movs	r3, #1
 8007280:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007282:	4ba9      	ldr	r3, [pc, #676]	; (8007528 <HAL_RCC_OscConfig+0x57c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d118      	bne.n	80072c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800728e:	4ba6      	ldr	r3, [pc, #664]	; (8007528 <HAL_RCC_OscConfig+0x57c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4aa5      	ldr	r2, [pc, #660]	; (8007528 <HAL_RCC_OscConfig+0x57c>)
 8007294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800729a:	f7fd fc2d 	bl	8004af8 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a2:	f7fd fc29 	bl	8004af8 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e18d      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072b4:	4b9c      	ldr	r3, [pc, #624]	; (8007528 <HAL_RCC_OscConfig+0x57c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0f0      	beq.n	80072a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d108      	bne.n	80072da <HAL_RCC_OscConfig+0x32e>
 80072c8:	4b96      	ldr	r3, [pc, #600]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80072ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ce:	4a95      	ldr	r2, [pc, #596]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80072d0:	f043 0301 	orr.w	r3, r3, #1
 80072d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072d8:	e024      	b.n	8007324 <HAL_RCC_OscConfig+0x378>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b05      	cmp	r3, #5
 80072e0:	d110      	bne.n	8007304 <HAL_RCC_OscConfig+0x358>
 80072e2:	4b90      	ldr	r3, [pc, #576]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80072e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e8:	4a8e      	ldr	r2, [pc, #568]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80072ea:	f043 0304 	orr.w	r3, r3, #4
 80072ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072f2:	4b8c      	ldr	r3, [pc, #560]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80072f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f8:	4a8a      	ldr	r2, [pc, #552]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80072fa:	f043 0301 	orr.w	r3, r3, #1
 80072fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007302:	e00f      	b.n	8007324 <HAL_RCC_OscConfig+0x378>
 8007304:	4b87      	ldr	r3, [pc, #540]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730a:	4a86      	ldr	r2, [pc, #536]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007314:	4b83      	ldr	r3, [pc, #524]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731a:	4a82      	ldr	r2, [pc, #520]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 800731c:	f023 0304 	bic.w	r3, r3, #4
 8007320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d016      	beq.n	800735a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732c:	f7fd fbe4 	bl	8004af8 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007332:	e00a      	b.n	800734a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007334:	f7fd fbe0 	bl	8004af8 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e142      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800734a:	4b76      	ldr	r3, [pc, #472]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0ed      	beq.n	8007334 <HAL_RCC_OscConfig+0x388>
 8007358:	e015      	b.n	8007386 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800735a:	f7fd fbcd 	bl	8004af8 <HAL_GetTick>
 800735e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007360:	e00a      	b.n	8007378 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007362:	f7fd fbc9 	bl	8004af8 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007370:	4293      	cmp	r3, r2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e12b      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007378:	4b6a      	ldr	r3, [pc, #424]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 800737a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1ed      	bne.n	8007362 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007386:	7ffb      	ldrb	r3, [r7, #31]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d105      	bne.n	8007398 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800738c:	4b65      	ldr	r3, [pc, #404]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 800738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007390:	4a64      	ldr	r2, [pc, #400]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007396:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0320 	and.w	r3, r3, #32
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d03c      	beq.n	800741e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01c      	beq.n	80073e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073ac:	4b5d      	ldr	r3, [pc, #372]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80073ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073b2:	4a5c      	ldr	r2, [pc, #368]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80073b4:	f043 0301 	orr.w	r3, r3, #1
 80073b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073bc:	f7fd fb9c 	bl	8004af8 <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073c4:	f7fd fb98 	bl	8004af8 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e0fc      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073d6:	4b53      	ldr	r3, [pc, #332]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80073d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0ef      	beq.n	80073c4 <HAL_RCC_OscConfig+0x418>
 80073e4:	e01b      	b.n	800741e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073e6:	4b4f      	ldr	r3, [pc, #316]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80073e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073ec:	4a4d      	ldr	r2, [pc, #308]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fd fb7f 	bl	8004af8 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073fe:	f7fd fb7b 	bl	8004af8 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e0df      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007410:	4b44      	ldr	r3, [pc, #272]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1ef      	bne.n	80073fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 80d3 	beq.w	80075ce <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007428:	4b3e      	ldr	r3, [pc, #248]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 030c 	and.w	r3, r3, #12
 8007430:	2b0c      	cmp	r3, #12
 8007432:	f000 808d 	beq.w	8007550 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d15a      	bne.n	80074f4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800743e:	4b39      	ldr	r3, [pc, #228]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a38      	ldr	r2, [pc, #224]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744a:	f7fd fb55 	bl	8004af8 <HAL_GetTick>
 800744e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007450:	e008      	b.n	8007464 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007452:	f7fd fb51 	bl	8004af8 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e0b5      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007464:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f0      	bne.n	8007452 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007470:	4b2c      	ldr	r3, [pc, #176]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	4b2d      	ldr	r3, [pc, #180]	; (800752c <HAL_RCC_OscConfig+0x580>)
 8007476:	4013      	ands	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6a11      	ldr	r1, [r2, #32]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007480:	3a01      	subs	r2, #1
 8007482:	0112      	lsls	r2, r2, #4
 8007484:	4311      	orrs	r1, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800748a:	0212      	lsls	r2, r2, #8
 800748c:	4311      	orrs	r1, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007492:	0852      	lsrs	r2, r2, #1
 8007494:	3a01      	subs	r2, #1
 8007496:	0552      	lsls	r2, r2, #21
 8007498:	4311      	orrs	r1, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800749e:	0852      	lsrs	r2, r2, #1
 80074a0:	3a01      	subs	r2, #1
 80074a2:	0652      	lsls	r2, r2, #25
 80074a4:	4311      	orrs	r1, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80074aa:	06d2      	lsls	r2, r2, #27
 80074ac:	430a      	orrs	r2, r1
 80074ae:	491d      	ldr	r1, [pc, #116]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074b4:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1a      	ldr	r2, [pc, #104]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80074ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074c0:	4b18      	ldr	r3, [pc, #96]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	4a17      	ldr	r2, [pc, #92]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80074c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074cc:	f7fd fb14 	bl	8004af8 <HAL_GetTick>
 80074d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d4:	f7fd fb10 	bl	8004af8 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e074      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0f0      	beq.n	80074d4 <HAL_RCC_OscConfig+0x528>
 80074f2:	e06c      	b.n	80075ce <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f4:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a0a      	ldr	r2, [pc, #40]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 80074fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074fe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007500:	4b08      	ldr	r3, [pc, #32]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4a07      	ldr	r2, [pc, #28]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007506:	f023 0303 	bic.w	r3, r3, #3
 800750a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	4a04      	ldr	r2, [pc, #16]	; (8007524 <HAL_RCC_OscConfig+0x578>)
 8007512:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800751a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751c:	f7fd faec 	bl	8004af8 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007522:	e00e      	b.n	8007542 <HAL_RCC_OscConfig+0x596>
 8007524:	40021000 	.word	0x40021000
 8007528:	40007000 	.word	0x40007000
 800752c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007530:	f7fd fae2 	bl	8004af8 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e046      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007542:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <HAL_RCC_OscConfig+0x62c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f0      	bne.n	8007530 <HAL_RCC_OscConfig+0x584>
 800754e:	e03e      	b.n	80075ce <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e039      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800755c:	4b1e      	ldr	r3, [pc, #120]	; (80075d8 <HAL_RCC_OscConfig+0x62c>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f003 0203 	and.w	r2, r3, #3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	429a      	cmp	r2, r3
 800756e:	d12c      	bne.n	80075ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	3b01      	subs	r3, #1
 800757c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800757e:	429a      	cmp	r2, r3
 8007580:	d123      	bne.n	80075ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800758e:	429a      	cmp	r2, r3
 8007590:	d11b      	bne.n	80075ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800759e:	429a      	cmp	r2, r3
 80075a0:	d113      	bne.n	80075ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	3b01      	subs	r3, #1
 80075b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d109      	bne.n	80075ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	3b01      	subs	r3, #1
 80075c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d001      	beq.n	80075ce <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e000      	b.n	80075d0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3720      	adds	r7, #32
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40021000 	.word	0x40021000

080075dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e11e      	b.n	8007832 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075f4:	4b91      	ldr	r3, [pc, #580]	; (800783c <HAL_RCC_ClockConfig+0x260>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d910      	bls.n	8007624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007602:	4b8e      	ldr	r3, [pc, #568]	; (800783c <HAL_RCC_ClockConfig+0x260>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f023 020f 	bic.w	r2, r3, #15
 800760a:	498c      	ldr	r1, [pc, #560]	; (800783c <HAL_RCC_ClockConfig+0x260>)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007612:	4b8a      	ldr	r3, [pc, #552]	; (800783c <HAL_RCC_ClockConfig+0x260>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d001      	beq.n	8007624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e106      	b.n	8007832 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d073      	beq.n	8007718 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2b03      	cmp	r3, #3
 8007636:	d129      	bne.n	800768c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007638:	4b81      	ldr	r3, [pc, #516]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e0f4      	b.n	8007832 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007648:	f000 f99e 	bl	8007988 <RCC_GetSysClockFreqFromPLLSource>
 800764c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	4a7c      	ldr	r2, [pc, #496]	; (8007844 <HAL_RCC_ClockConfig+0x268>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d93f      	bls.n	80076d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007656:	4b7a      	ldr	r3, [pc, #488]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d009      	beq.n	8007676 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800766a:	2b00      	cmp	r3, #0
 800766c:	d033      	beq.n	80076d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007672:	2b00      	cmp	r3, #0
 8007674:	d12f      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007676:	4b72      	ldr	r3, [pc, #456]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800767e:	4a70      	ldr	r2, [pc, #448]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007684:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007686:	2380      	movs	r3, #128	; 0x80
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	e024      	b.n	80076d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2b02      	cmp	r3, #2
 8007692:	d107      	bne.n	80076a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007694:	4b6a      	ldr	r3, [pc, #424]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d109      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e0c6      	b.n	8007832 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076a4:	4b66      	ldr	r3, [pc, #408]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0be      	b.n	8007832 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80076b4:	f000 f8ce 	bl	8007854 <HAL_RCC_GetSysClockFreq>
 80076b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	4a61      	ldr	r2, [pc, #388]	; (8007844 <HAL_RCC_ClockConfig+0x268>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d909      	bls.n	80076d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076c2:	4b5f      	ldr	r3, [pc, #380]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076ca:	4a5d      	ldr	r2, [pc, #372]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 80076cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80076d2:	2380      	movs	r3, #128	; 0x80
 80076d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076d6:	4b5a      	ldr	r3, [pc, #360]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f023 0203 	bic.w	r2, r3, #3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	4957      	ldr	r1, [pc, #348]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076e8:	f7fd fa06 	bl	8004af8 <HAL_GetTick>
 80076ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ee:	e00a      	b.n	8007706 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076f0:	f7fd fa02 	bl	8004af8 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e095      	b.n	8007832 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007706:	4b4e      	ldr	r3, [pc, #312]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 020c 	and.w	r2, r3, #12
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	429a      	cmp	r2, r3
 8007716:	d1eb      	bne.n	80076f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d023      	beq.n	800776c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007730:	4b43      	ldr	r3, [pc, #268]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	4a42      	ldr	r2, [pc, #264]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007736:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800773a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007748:	4b3d      	ldr	r3, [pc, #244]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007750:	4a3b      	ldr	r2, [pc, #236]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007758:	4b39      	ldr	r3, [pc, #228]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	4936      	ldr	r1, [pc, #216]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007766:	4313      	orrs	r3, r2
 8007768:	608b      	str	r3, [r1, #8]
 800776a:	e008      	b.n	800777e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b80      	cmp	r3, #128	; 0x80
 8007770:	d105      	bne.n	800777e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007772:	4b33      	ldr	r3, [pc, #204]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	4a32      	ldr	r2, [pc, #200]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007778:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800777c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800777e:	4b2f      	ldr	r3, [pc, #188]	; (800783c <HAL_RCC_ClockConfig+0x260>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	429a      	cmp	r2, r3
 800778a:	d21d      	bcs.n	80077c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778c:	4b2b      	ldr	r3, [pc, #172]	; (800783c <HAL_RCC_ClockConfig+0x260>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f023 020f 	bic.w	r2, r3, #15
 8007794:	4929      	ldr	r1, [pc, #164]	; (800783c <HAL_RCC_ClockConfig+0x260>)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	4313      	orrs	r3, r2
 800779a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800779c:	f7fd f9ac 	bl	8004af8 <HAL_GetTick>
 80077a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077a2:	e00a      	b.n	80077ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a4:	f7fd f9a8 	bl	8004af8 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d901      	bls.n	80077ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e03b      	b.n	8007832 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ba:	4b20      	ldr	r3, [pc, #128]	; (800783c <HAL_RCC_ClockConfig+0x260>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d1ed      	bne.n	80077a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077d4:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	4917      	ldr	r1, [pc, #92]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077f2:	4b13      	ldr	r3, [pc, #76]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	490f      	ldr	r1, [pc, #60]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 8007802:	4313      	orrs	r3, r2
 8007804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007806:	f000 f825 	bl	8007854 <HAL_RCC_GetSysClockFreq>
 800780a:	4602      	mov	r2, r0
 800780c:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <HAL_RCC_ClockConfig+0x264>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	091b      	lsrs	r3, r3, #4
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	490c      	ldr	r1, [pc, #48]	; (8007848 <HAL_RCC_ClockConfig+0x26c>)
 8007818:	5ccb      	ldrb	r3, [r1, r3]
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	fa22 f303 	lsr.w	r3, r2, r3
 8007822:	4a0a      	ldr	r2, [pc, #40]	; (800784c <HAL_RCC_ClockConfig+0x270>)
 8007824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <HAL_RCC_ClockConfig+0x274>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f7fd f918 	bl	8004a60 <HAL_InitTick>
 8007830:	4603      	mov	r3, r0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	40022000 	.word	0x40022000
 8007840:	40021000 	.word	0x40021000
 8007844:	04c4b400 	.word	0x04c4b400
 8007848:	0800ae08 	.word	0x0800ae08
 800784c:	20000000 	.word	0x20000000
 8007850:	20000004 	.word	0x20000004

08007854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800785a:	4b2c      	ldr	r3, [pc, #176]	; (800790c <HAL_RCC_GetSysClockFreq+0xb8>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 030c 	and.w	r3, r3, #12
 8007862:	2b04      	cmp	r3, #4
 8007864:	d102      	bne.n	800786c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007866:	4b2a      	ldr	r3, [pc, #168]	; (8007910 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	e047      	b.n	80078fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800786c:	4b27      	ldr	r3, [pc, #156]	; (800790c <HAL_RCC_GetSysClockFreq+0xb8>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 030c 	and.w	r3, r3, #12
 8007874:	2b08      	cmp	r3, #8
 8007876:	d102      	bne.n	800787e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007878:	4b26      	ldr	r3, [pc, #152]	; (8007914 <HAL_RCC_GetSysClockFreq+0xc0>)
 800787a:	613b      	str	r3, [r7, #16]
 800787c:	e03e      	b.n	80078fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800787e:	4b23      	ldr	r3, [pc, #140]	; (800790c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 030c 	and.w	r3, r3, #12
 8007886:	2b0c      	cmp	r3, #12
 8007888:	d136      	bne.n	80078f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800788a:	4b20      	ldr	r3, [pc, #128]	; (800790c <HAL_RCC_GetSysClockFreq+0xb8>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007894:	4b1d      	ldr	r3, [pc, #116]	; (800790c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	091b      	lsrs	r3, r3, #4
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	3301      	adds	r3, #1
 80078a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d10c      	bne.n	80078c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078a8:	4a1a      	ldr	r2, [pc, #104]	; (8007914 <HAL_RCC_GetSysClockFreq+0xc0>)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b0:	4a16      	ldr	r2, [pc, #88]	; (800790c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078b2:	68d2      	ldr	r2, [r2, #12]
 80078b4:	0a12      	lsrs	r2, r2, #8
 80078b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078ba:	fb02 f303 	mul.w	r3, r2, r3
 80078be:	617b      	str	r3, [r7, #20]
      break;
 80078c0:	e00c      	b.n	80078dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078c2:	4a13      	ldr	r2, [pc, #76]	; (8007910 <HAL_RCC_GetSysClockFreq+0xbc>)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ca:	4a10      	ldr	r2, [pc, #64]	; (800790c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078cc:	68d2      	ldr	r2, [r2, #12]
 80078ce:	0a12      	lsrs	r2, r2, #8
 80078d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078d4:	fb02 f303 	mul.w	r3, r2, r3
 80078d8:	617b      	str	r3, [r7, #20]
      break;
 80078da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078dc:	4b0b      	ldr	r3, [pc, #44]	; (800790c <HAL_RCC_GetSysClockFreq+0xb8>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	0e5b      	lsrs	r3, r3, #25
 80078e2:	f003 0303 	and.w	r3, r3, #3
 80078e6:	3301      	adds	r3, #1
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	e001      	b.n	80078fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80078fc:	693b      	ldr	r3, [r7, #16]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40021000 	.word	0x40021000
 8007910:	00f42400 	.word	0x00f42400
 8007914:	016e3600 	.word	0x016e3600

08007918 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800791c:	4b03      	ldr	r3, [pc, #12]	; (800792c <HAL_RCC_GetHCLKFreq+0x14>)
 800791e:	681b      	ldr	r3, [r3, #0]
}
 8007920:	4618      	mov	r0, r3
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	20000000 	.word	0x20000000

08007930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007934:	f7ff fff0 	bl	8007918 <HAL_RCC_GetHCLKFreq>
 8007938:	4602      	mov	r2, r0
 800793a:	4b06      	ldr	r3, [pc, #24]	; (8007954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	0a1b      	lsrs	r3, r3, #8
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	4904      	ldr	r1, [pc, #16]	; (8007958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007946:	5ccb      	ldrb	r3, [r1, r3]
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007950:	4618      	mov	r0, r3
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40021000 	.word	0x40021000
 8007958:	0800ae18 	.word	0x0800ae18

0800795c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007960:	f7ff ffda 	bl	8007918 <HAL_RCC_GetHCLKFreq>
 8007964:	4602      	mov	r2, r0
 8007966:	4b06      	ldr	r3, [pc, #24]	; (8007980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	0adb      	lsrs	r3, r3, #11
 800796c:	f003 0307 	and.w	r3, r3, #7
 8007970:	4904      	ldr	r1, [pc, #16]	; (8007984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007972:	5ccb      	ldrb	r3, [r1, r3]
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40021000 	.word	0x40021000
 8007984:	0800ae18 	.word	0x0800ae18

08007988 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800798e:	4b1e      	ldr	r3, [pc, #120]	; (8007a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	091b      	lsrs	r3, r3, #4
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	3301      	adds	r3, #1
 80079a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d10c      	bne.n	80079c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079ac:	4a17      	ldr	r2, [pc, #92]	; (8007a0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b4:	4a14      	ldr	r2, [pc, #80]	; (8007a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079b6:	68d2      	ldr	r2, [r2, #12]
 80079b8:	0a12      	lsrs	r2, r2, #8
 80079ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079be:	fb02 f303 	mul.w	r3, r2, r3
 80079c2:	617b      	str	r3, [r7, #20]
    break;
 80079c4:	e00c      	b.n	80079e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079c6:	4a12      	ldr	r2, [pc, #72]	; (8007a10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ce:	4a0e      	ldr	r2, [pc, #56]	; (8007a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079d0:	68d2      	ldr	r2, [r2, #12]
 80079d2:	0a12      	lsrs	r2, r2, #8
 80079d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	617b      	str	r3, [r7, #20]
    break;
 80079de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079e0:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	0e5b      	lsrs	r3, r3, #25
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	3301      	adds	r3, #1
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80079fa:	687b      	ldr	r3, [r7, #4]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	016e3600 	.word	0x016e3600
 8007a10:	00f42400 	.word	0x00f42400

08007a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a20:	2300      	movs	r3, #0
 8007a22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 8098 	beq.w	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a32:	2300      	movs	r3, #0
 8007a34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a36:	4b43      	ldr	r3, [pc, #268]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10d      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a42:	4b40      	ldr	r3, [pc, #256]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a46:	4a3f      	ldr	r2, [pc, #252]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a4e:	4b3d      	ldr	r3, [pc, #244]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a56:	60bb      	str	r3, [r7, #8]
 8007a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a5e:	4b3a      	ldr	r3, [pc, #232]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a39      	ldr	r2, [pc, #228]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a6a:	f7fd f845 	bl	8004af8 <HAL_GetTick>
 8007a6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a70:	e009      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a72:	f7fd f841 	bl	8004af8 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d902      	bls.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	74fb      	strb	r3, [r7, #19]
        break;
 8007a84:	e005      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a86:	4b30      	ldr	r3, [pc, #192]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0ef      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a92:	7cfb      	ldrb	r3, [r7, #19]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d159      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a98:	4b2a      	ldr	r3, [pc, #168]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d01e      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d019      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ab4:	4b23      	ldr	r3, [pc, #140]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ac0:	4b20      	ldr	r3, [pc, #128]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac6:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ad0:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad6:	4a1b      	ldr	r2, [pc, #108]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ae0:	4a18      	ldr	r2, [pc, #96]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af2:	f7fd f801 	bl	8004af8 <HAL_GetTick>
 8007af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007af8:	e00b      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007afa:	f7fc fffd 	bl	8004af8 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d902      	bls.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8007b10:	e006      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b12:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0ec      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b20:	7cfb      	ldrb	r3, [r7, #19]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10b      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b26:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	4903      	ldr	r1, [pc, #12]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b3c:	e008      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b3e:	7cfb      	ldrb	r3, [r7, #19]
 8007b40:	74bb      	strb	r3, [r7, #18]
 8007b42:	e005      	b.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b44:	40021000 	.word	0x40021000
 8007b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	7cfb      	ldrb	r3, [r7, #19]
 8007b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b50:	7c7b      	ldrb	r3, [r7, #17]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d105      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b56:	4ba6      	ldr	r3, [pc, #664]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5a:	4aa5      	ldr	r2, [pc, #660]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b6e:	4ba0      	ldr	r3, [pc, #640]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b74:	f023 0203 	bic.w	r2, r3, #3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	499c      	ldr	r1, [pc, #624]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b90:	4b97      	ldr	r3, [pc, #604]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b96:	f023 020c 	bic.w	r2, r3, #12
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	4994      	ldr	r1, [pc, #592]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bb2:	4b8f      	ldr	r3, [pc, #572]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	498b      	ldr	r1, [pc, #556]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bd4:	4b86      	ldr	r3, [pc, #536]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	4983      	ldr	r1, [pc, #524]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bf6:	4b7e      	ldr	r3, [pc, #504]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	497a      	ldr	r1, [pc, #488]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c18:	4b75      	ldr	r3, [pc, #468]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	4972      	ldr	r1, [pc, #456]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c3a:	4b6d      	ldr	r3, [pc, #436]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	4969      	ldr	r1, [pc, #420]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c5c:	4b64      	ldr	r3, [pc, #400]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	4961      	ldr	r1, [pc, #388]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c7e:	4b5c      	ldr	r3, [pc, #368]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	4958      	ldr	r1, [pc, #352]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d015      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ca0:	4b53      	ldr	r3, [pc, #332]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cae:	4950      	ldr	r1, [pc, #320]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cbe:	d105      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc0:	4b4b      	ldr	r3, [pc, #300]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	4a4a      	ldr	r2, [pc, #296]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d015      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cd8:	4b45      	ldr	r3, [pc, #276]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce6:	4942      	ldr	r1, [pc, #264]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cf6:	d105      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf8:	4b3d      	ldr	r3, [pc, #244]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	4a3c      	ldr	r2, [pc, #240]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d015      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d10:	4b37      	ldr	r3, [pc, #220]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	4934      	ldr	r1, [pc, #208]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d2e:	d105      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d30:	4b2f      	ldr	r3, [pc, #188]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	4a2e      	ldr	r2, [pc, #184]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d015      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d48:	4b29      	ldr	r3, [pc, #164]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d56:	4926      	ldr	r1, [pc, #152]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d66:	d105      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d68:	4b21      	ldr	r3, [pc, #132]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	4a20      	ldr	r2, [pc, #128]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d015      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d80:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	4918      	ldr	r1, [pc, #96]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d9e:	d105      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007da0:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	4a12      	ldr	r2, [pc, #72]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007daa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d015      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007db8:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc6:	490a      	ldr	r1, [pc, #40]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dd6:	d105      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	4a04      	ldr	r2, [pc, #16]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007de2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007de4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40021000 	.word	0x40021000

08007df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d001      	beq.n	8007e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e04a      	b.n	8007ea2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a21      	ldr	r2, [pc, #132]	; (8007eb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d018      	beq.n	8007e60 <HAL_TIM_Base_Start_IT+0x6c>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e36:	d013      	beq.n	8007e60 <HAL_TIM_Base_Start_IT+0x6c>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00e      	beq.n	8007e60 <HAL_TIM_Base_Start_IT+0x6c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d009      	beq.n	8007e60 <HAL_TIM_Base_Start_IT+0x6c>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a1a      	ldr	r2, [pc, #104]	; (8007ebc <HAL_TIM_Base_Start_IT+0xc8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d004      	beq.n	8007e60 <HAL_TIM_Base_Start_IT+0x6c>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a19      	ldr	r2, [pc, #100]	; (8007ec0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d115      	bne.n	8007e8c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	4b17      	ldr	r3, [pc, #92]	; (8007ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b06      	cmp	r3, #6
 8007e70:	d015      	beq.n	8007e9e <HAL_TIM_Base_Start_IT+0xaa>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e78:	d011      	beq.n	8007e9e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0201 	orr.w	r2, r2, #1
 8007e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8a:	e008      	b.n	8007e9e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e000      	b.n	8007ea0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	40000800 	.word	0x40000800
 8007ebc:	40013400 	.word	0x40013400
 8007ec0:	40014000 	.word	0x40014000
 8007ec4:	00010007 	.word	0x00010007

08007ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e049      	b.n	8007f6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7fc f89a 	bl	8004028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4619      	mov	r1, r3
 8007f06:	4610      	mov	r0, r2
 8007f08:	f000 fc8e 	bl	8008828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d109      	bne.n	8007f9c <HAL_TIM_PWM_Start+0x24>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	bf14      	ite	ne
 8007f94:	2301      	movne	r3, #1
 8007f96:	2300      	moveq	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	e03c      	b.n	8008016 <HAL_TIM_PWM_Start+0x9e>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d109      	bne.n	8007fb6 <HAL_TIM_PWM_Start+0x3e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	bf14      	ite	ne
 8007fae:	2301      	movne	r3, #1
 8007fb0:	2300      	moveq	r3, #0
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	e02f      	b.n	8008016 <HAL_TIM_PWM_Start+0x9e>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d109      	bne.n	8007fd0 <HAL_TIM_PWM_Start+0x58>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	bf14      	ite	ne
 8007fc8:	2301      	movne	r3, #1
 8007fca:	2300      	moveq	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	e022      	b.n	8008016 <HAL_TIM_PWM_Start+0x9e>
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b0c      	cmp	r3, #12
 8007fd4:	d109      	bne.n	8007fea <HAL_TIM_PWM_Start+0x72>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	bf14      	ite	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	2300      	moveq	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	e015      	b.n	8008016 <HAL_TIM_PWM_Start+0x9e>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b10      	cmp	r3, #16
 8007fee:	d109      	bne.n	8008004 <HAL_TIM_PWM_Start+0x8c>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	bf14      	ite	ne
 8007ffc:	2301      	movne	r3, #1
 8007ffe:	2300      	moveq	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	e008      	b.n	8008016 <HAL_TIM_PWM_Start+0x9e>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	bf14      	ite	ne
 8008010:	2301      	movne	r3, #1
 8008012:	2300      	moveq	r3, #0
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e097      	b.n	800814e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <HAL_TIM_PWM_Start+0xb6>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800802c:	e023      	b.n	8008076 <HAL_TIM_PWM_Start+0xfe>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b04      	cmp	r3, #4
 8008032:	d104      	bne.n	800803e <HAL_TIM_PWM_Start+0xc6>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800803c:	e01b      	b.n	8008076 <HAL_TIM_PWM_Start+0xfe>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b08      	cmp	r3, #8
 8008042:	d104      	bne.n	800804e <HAL_TIM_PWM_Start+0xd6>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800804c:	e013      	b.n	8008076 <HAL_TIM_PWM_Start+0xfe>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b0c      	cmp	r3, #12
 8008052:	d104      	bne.n	800805e <HAL_TIM_PWM_Start+0xe6>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800805c:	e00b      	b.n	8008076 <HAL_TIM_PWM_Start+0xfe>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b10      	cmp	r3, #16
 8008062:	d104      	bne.n	800806e <HAL_TIM_PWM_Start+0xf6>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800806c:	e003      	b.n	8008076 <HAL_TIM_PWM_Start+0xfe>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2202      	movs	r2, #2
 8008072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2201      	movs	r2, #1
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 ff58 	bl	8008f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a33      	ldr	r2, [pc, #204]	; (8008158 <HAL_TIM_PWM_Start+0x1e0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d013      	beq.n	80080b6 <HAL_TIM_PWM_Start+0x13e>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a32      	ldr	r2, [pc, #200]	; (800815c <HAL_TIM_PWM_Start+0x1e4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00e      	beq.n	80080b6 <HAL_TIM_PWM_Start+0x13e>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a30      	ldr	r2, [pc, #192]	; (8008160 <HAL_TIM_PWM_Start+0x1e8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d009      	beq.n	80080b6 <HAL_TIM_PWM_Start+0x13e>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a2f      	ldr	r2, [pc, #188]	; (8008164 <HAL_TIM_PWM_Start+0x1ec>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d004      	beq.n	80080b6 <HAL_TIM_PWM_Start+0x13e>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a2d      	ldr	r2, [pc, #180]	; (8008168 <HAL_TIM_PWM_Start+0x1f0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d101      	bne.n	80080ba <HAL_TIM_PWM_Start+0x142>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <HAL_TIM_PWM_Start+0x144>
 80080ba:	2300      	movs	r3, #0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d007      	beq.n	80080d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a20      	ldr	r2, [pc, #128]	; (8008158 <HAL_TIM_PWM_Start+0x1e0>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d018      	beq.n	800810c <HAL_TIM_PWM_Start+0x194>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e2:	d013      	beq.n	800810c <HAL_TIM_PWM_Start+0x194>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a20      	ldr	r2, [pc, #128]	; (800816c <HAL_TIM_PWM_Start+0x1f4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00e      	beq.n	800810c <HAL_TIM_PWM_Start+0x194>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a1f      	ldr	r2, [pc, #124]	; (8008170 <HAL_TIM_PWM_Start+0x1f8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d009      	beq.n	800810c <HAL_TIM_PWM_Start+0x194>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a17      	ldr	r2, [pc, #92]	; (800815c <HAL_TIM_PWM_Start+0x1e4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d004      	beq.n	800810c <HAL_TIM_PWM_Start+0x194>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a16      	ldr	r2, [pc, #88]	; (8008160 <HAL_TIM_PWM_Start+0x1e8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d115      	bne.n	8008138 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	4b18      	ldr	r3, [pc, #96]	; (8008174 <HAL_TIM_PWM_Start+0x1fc>)
 8008114:	4013      	ands	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b06      	cmp	r3, #6
 800811c:	d015      	beq.n	800814a <HAL_TIM_PWM_Start+0x1d2>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008124:	d011      	beq.n	800814a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0201 	orr.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008136:	e008      	b.n	800814a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0201 	orr.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	e000      	b.n	800814c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800814a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	40012c00 	.word	0x40012c00
 800815c:	40013400 	.word	0x40013400
 8008160:	40014000 	.word	0x40014000
 8008164:	40014400 	.word	0x40014400
 8008168:	40014800 	.word	0x40014800
 800816c:	40000400 	.word	0x40000400
 8008170:	40000800 	.word	0x40000800
 8008174:	00010007 	.word	0x00010007

08008178 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2200      	movs	r2, #0
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fed2 	bl	8008f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a3e      	ldr	r2, [pc, #248]	; (8008290 <HAL_TIM_PWM_Stop+0x118>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <HAL_TIM_PWM_Stop+0x4a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a3d      	ldr	r2, [pc, #244]	; (8008294 <HAL_TIM_PWM_Stop+0x11c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00e      	beq.n	80081c2 <HAL_TIM_PWM_Stop+0x4a>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a3b      	ldr	r2, [pc, #236]	; (8008298 <HAL_TIM_PWM_Stop+0x120>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d009      	beq.n	80081c2 <HAL_TIM_PWM_Stop+0x4a>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a3a      	ldr	r2, [pc, #232]	; (800829c <HAL_TIM_PWM_Stop+0x124>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_TIM_PWM_Stop+0x4a>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a38      	ldr	r2, [pc, #224]	; (80082a0 <HAL_TIM_PWM_Stop+0x128>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d101      	bne.n	80081c6 <HAL_TIM_PWM_Stop+0x4e>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <HAL_TIM_PWM_Stop+0x50>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d017      	beq.n	80081fc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6a1a      	ldr	r2, [r3, #32]
 80081d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80081d6:	4013      	ands	r3, r2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10f      	bne.n	80081fc <HAL_TIM_PWM_Stop+0x84>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6a1a      	ldr	r2, [r3, #32]
 80081e2:	f244 4344 	movw	r3, #17476	; 0x4444
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d107      	bne.n	80081fc <HAL_TIM_PWM_Stop+0x84>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6a1a      	ldr	r2, [r3, #32]
 8008202:	f241 1311 	movw	r3, #4369	; 0x1111
 8008206:	4013      	ands	r3, r2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10f      	bne.n	800822c <HAL_TIM_PWM_Stop+0xb4>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6a1a      	ldr	r2, [r3, #32]
 8008212:	f244 4344 	movw	r3, #17476	; 0x4444
 8008216:	4013      	ands	r3, r2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d107      	bne.n	800822c <HAL_TIM_PWM_Stop+0xb4>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d104      	bne.n	800823c <HAL_TIM_PWM_Stop+0xc4>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800823a:	e023      	b.n	8008284 <HAL_TIM_PWM_Stop+0x10c>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d104      	bne.n	800824c <HAL_TIM_PWM_Stop+0xd4>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800824a:	e01b      	b.n	8008284 <HAL_TIM_PWM_Stop+0x10c>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b08      	cmp	r3, #8
 8008250:	d104      	bne.n	800825c <HAL_TIM_PWM_Stop+0xe4>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800825a:	e013      	b.n	8008284 <HAL_TIM_PWM_Stop+0x10c>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b0c      	cmp	r3, #12
 8008260:	d104      	bne.n	800826c <HAL_TIM_PWM_Stop+0xf4>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800826a:	e00b      	b.n	8008284 <HAL_TIM_PWM_Stop+0x10c>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b10      	cmp	r3, #16
 8008270:	d104      	bne.n	800827c <HAL_TIM_PWM_Stop+0x104>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800827a:	e003      	b.n	8008284 <HAL_TIM_PWM_Stop+0x10c>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40012c00 	.word	0x40012c00
 8008294:	40013400 	.word	0x40013400
 8008298:	40014000 	.word	0x40014000
 800829c:	40014400 	.word	0x40014400
 80082a0:	40014800 	.word	0x40014800

080082a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d122      	bne.n	8008300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d11b      	bne.n	8008300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0202 	mvn.w	r2, #2
 80082d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa80 	bl	80087ec <HAL_TIM_IC_CaptureCallback>
 80082ec:	e005      	b.n	80082fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa72 	bl	80087d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fa83 	bl	8008800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0304 	and.w	r3, r3, #4
 800830a:	2b04      	cmp	r3, #4
 800830c:	d122      	bne.n	8008354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b04      	cmp	r3, #4
 800831a:	d11b      	bne.n	8008354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0204 	mvn.w	r2, #4
 8008324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2202      	movs	r2, #2
 800832a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa56 	bl	80087ec <HAL_TIM_IC_CaptureCallback>
 8008340:	e005      	b.n	800834e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa48 	bl	80087d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fa59 	bl	8008800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b08      	cmp	r3, #8
 8008360:	d122      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b08      	cmp	r3, #8
 800836e:	d11b      	bne.n	80083a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0208 	mvn.w	r2, #8
 8008378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2204      	movs	r2, #4
 800837e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	f003 0303 	and.w	r3, r3, #3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa2c 	bl	80087ec <HAL_TIM_IC_CaptureCallback>
 8008394:	e005      	b.n	80083a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa1e 	bl	80087d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fa2f 	bl	8008800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d122      	bne.n	80083fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d11b      	bne.n	80083fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f06f 0210 	mvn.w	r2, #16
 80083cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2208      	movs	r2, #8
 80083d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa02 	bl	80087ec <HAL_TIM_IC_CaptureCallback>
 80083e8:	e005      	b.n	80083f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f9f4 	bl	80087d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa05 	bl	8008800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b01      	cmp	r3, #1
 8008408:	d10e      	bne.n	8008428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b01      	cmp	r3, #1
 8008416:	d107      	bne.n	8008428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0201 	mvn.w	r2, #1
 8008420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f9ce 	bl	80087c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008432:	2b80      	cmp	r3, #128	; 0x80
 8008434:	d10e      	bne.n	8008454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	d107      	bne.n	8008454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800844c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 ffd4 	bl	80093fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008462:	d10e      	bne.n	8008482 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846e:	2b80      	cmp	r3, #128	; 0x80
 8008470:	d107      	bne.n	8008482 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800847a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 ffc7 	bl	8009410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848c:	2b40      	cmp	r3, #64	; 0x40
 800848e:	d10e      	bne.n	80084ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849a:	2b40      	cmp	r3, #64	; 0x40
 800849c:	d107      	bne.n	80084ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f9b3 	bl	8008814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d10e      	bne.n	80084da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d107      	bne.n	80084da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f06f 0220 	mvn.w	r2, #32
 80084d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 ff87 	bl	80093e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084e8:	d10f      	bne.n	800850a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084f8:	d107      	bne.n	800850a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 ff8d 	bl	8009424 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008518:	d10f      	bne.n	800853a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008528:	d107      	bne.n	800853a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 ff7f 	bl	8009438 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008548:	d10f      	bne.n	800856a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008558:	d107      	bne.n	800856a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 ff71 	bl	800944c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008574:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008578:	d10f      	bne.n	800859a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008588:	d107      	bne.n	800859a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 ff63 	bl	8009460 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d101      	bne.n	80085be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80085ba:	2302      	movs	r3, #2
 80085bc:	e0fd      	b.n	80087ba <HAL_TIM_PWM_ConfigChannel+0x216>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b14      	cmp	r3, #20
 80085ca:	f200 80f0 	bhi.w	80087ae <HAL_TIM_PWM_ConfigChannel+0x20a>
 80085ce:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	08008629 	.word	0x08008629
 80085d8:	080087af 	.word	0x080087af
 80085dc:	080087af 	.word	0x080087af
 80085e0:	080087af 	.word	0x080087af
 80085e4:	08008669 	.word	0x08008669
 80085e8:	080087af 	.word	0x080087af
 80085ec:	080087af 	.word	0x080087af
 80085f0:	080087af 	.word	0x080087af
 80085f4:	080086ab 	.word	0x080086ab
 80085f8:	080087af 	.word	0x080087af
 80085fc:	080087af 	.word	0x080087af
 8008600:	080087af 	.word	0x080087af
 8008604:	080086eb 	.word	0x080086eb
 8008608:	080087af 	.word	0x080087af
 800860c:	080087af 	.word	0x080087af
 8008610:	080087af 	.word	0x080087af
 8008614:	0800872d 	.word	0x0800872d
 8008618:	080087af 	.word	0x080087af
 800861c:	080087af 	.word	0x080087af
 8008620:	080087af 	.word	0x080087af
 8008624:	0800876d 	.word	0x0800876d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	4618      	mov	r0, r3
 8008630:	f000 f98a 	bl	8008948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0208 	orr.w	r2, r2, #8
 8008642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	699a      	ldr	r2, [r3, #24]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0204 	bic.w	r2, r2, #4
 8008652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6999      	ldr	r1, [r3, #24]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	619a      	str	r2, [r3, #24]
      break;
 8008666:	e0a3      	b.n	80087b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f9fa 	bl	8008a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699a      	ldr	r2, [r3, #24]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6999      	ldr	r1, [r3, #24]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	021a      	lsls	r2, r3, #8
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	619a      	str	r2, [r3, #24]
      break;
 80086a8:	e082      	b.n	80087b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fa63 	bl	8008b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69da      	ldr	r2, [r3, #28]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f042 0208 	orr.w	r2, r2, #8
 80086c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69da      	ldr	r2, [r3, #28]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0204 	bic.w	r2, r2, #4
 80086d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69d9      	ldr	r1, [r3, #28]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	691a      	ldr	r2, [r3, #16]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	61da      	str	r2, [r3, #28]
      break;
 80086e8:	e062      	b.n	80087b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 facb 	bl	8008c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69da      	ldr	r2, [r3, #28]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69da      	ldr	r2, [r3, #28]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69d9      	ldr	r1, [r3, #28]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	021a      	lsls	r2, r3, #8
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	61da      	str	r2, [r3, #28]
      break;
 800872a:	e041      	b.n	80087b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68b9      	ldr	r1, [r7, #8]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fb34 	bl	8008da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0208 	orr.w	r2, r2, #8
 8008746:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 0204 	bic.w	r2, r2, #4
 8008756:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	691a      	ldr	r2, [r3, #16]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800876a:	e021      	b.n	80087b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fb78 	bl	8008e68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008786:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008796:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	021a      	lsls	r2, r3, #8
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80087ac:	e000      	b.n	80087b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80087ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop

080087c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a3c      	ldr	r2, [pc, #240]	; (800892c <TIM_Base_SetConfig+0x104>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00f      	beq.n	8008860 <TIM_Base_SetConfig+0x38>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008846:	d00b      	beq.n	8008860 <TIM_Base_SetConfig+0x38>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a39      	ldr	r2, [pc, #228]	; (8008930 <TIM_Base_SetConfig+0x108>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d007      	beq.n	8008860 <TIM_Base_SetConfig+0x38>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a38      	ldr	r2, [pc, #224]	; (8008934 <TIM_Base_SetConfig+0x10c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d003      	beq.n	8008860 <TIM_Base_SetConfig+0x38>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a37      	ldr	r2, [pc, #220]	; (8008938 <TIM_Base_SetConfig+0x110>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d108      	bne.n	8008872 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2d      	ldr	r2, [pc, #180]	; (800892c <TIM_Base_SetConfig+0x104>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d01b      	beq.n	80088b2 <TIM_Base_SetConfig+0x8a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008880:	d017      	beq.n	80088b2 <TIM_Base_SetConfig+0x8a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2a      	ldr	r2, [pc, #168]	; (8008930 <TIM_Base_SetConfig+0x108>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d013      	beq.n	80088b2 <TIM_Base_SetConfig+0x8a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a29      	ldr	r2, [pc, #164]	; (8008934 <TIM_Base_SetConfig+0x10c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00f      	beq.n	80088b2 <TIM_Base_SetConfig+0x8a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a28      	ldr	r2, [pc, #160]	; (8008938 <TIM_Base_SetConfig+0x110>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00b      	beq.n	80088b2 <TIM_Base_SetConfig+0x8a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a27      	ldr	r2, [pc, #156]	; (800893c <TIM_Base_SetConfig+0x114>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d007      	beq.n	80088b2 <TIM_Base_SetConfig+0x8a>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a26      	ldr	r2, [pc, #152]	; (8008940 <TIM_Base_SetConfig+0x118>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_Base_SetConfig+0x8a>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a25      	ldr	r2, [pc, #148]	; (8008944 <TIM_Base_SetConfig+0x11c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d108      	bne.n	80088c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a10      	ldr	r2, [pc, #64]	; (800892c <TIM_Base_SetConfig+0x104>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00f      	beq.n	8008910 <TIM_Base_SetConfig+0xe8>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a11      	ldr	r2, [pc, #68]	; (8008938 <TIM_Base_SetConfig+0x110>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00b      	beq.n	8008910 <TIM_Base_SetConfig+0xe8>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a10      	ldr	r2, [pc, #64]	; (800893c <TIM_Base_SetConfig+0x114>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d007      	beq.n	8008910 <TIM_Base_SetConfig+0xe8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a0f      	ldr	r2, [pc, #60]	; (8008940 <TIM_Base_SetConfig+0x118>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d003      	beq.n	8008910 <TIM_Base_SetConfig+0xe8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a0e      	ldr	r2, [pc, #56]	; (8008944 <TIM_Base_SetConfig+0x11c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d103      	bne.n	8008918 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	691a      	ldr	r2, [r3, #16]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	615a      	str	r2, [r3, #20]
}
 800891e:	bf00      	nop
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	40012c00 	.word	0x40012c00
 8008930:	40000400 	.word	0x40000400
 8008934:	40000800 	.word	0x40000800
 8008938:	40013400 	.word	0x40013400
 800893c:	40014000 	.word	0x40014000
 8008940:	40014400 	.word	0x40014400
 8008944:	40014800 	.word	0x40014800

08008948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	f023 0201 	bic.w	r2, r3, #1
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800897a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 0303 	bic.w	r3, r3, #3
 8008982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f023 0302 	bic.w	r3, r3, #2
 8008994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a2c      	ldr	r2, [pc, #176]	; (8008a54 <TIM_OC1_SetConfig+0x10c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d00f      	beq.n	80089c8 <TIM_OC1_SetConfig+0x80>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a2b      	ldr	r2, [pc, #172]	; (8008a58 <TIM_OC1_SetConfig+0x110>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d00b      	beq.n	80089c8 <TIM_OC1_SetConfig+0x80>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a2a      	ldr	r2, [pc, #168]	; (8008a5c <TIM_OC1_SetConfig+0x114>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d007      	beq.n	80089c8 <TIM_OC1_SetConfig+0x80>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a29      	ldr	r2, [pc, #164]	; (8008a60 <TIM_OC1_SetConfig+0x118>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d003      	beq.n	80089c8 <TIM_OC1_SetConfig+0x80>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a28      	ldr	r2, [pc, #160]	; (8008a64 <TIM_OC1_SetConfig+0x11c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d10c      	bne.n	80089e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f023 0308 	bic.w	r3, r3, #8
 80089ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f023 0304 	bic.w	r3, r3, #4
 80089e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a1b      	ldr	r2, [pc, #108]	; (8008a54 <TIM_OC1_SetConfig+0x10c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d00f      	beq.n	8008a0a <TIM_OC1_SetConfig+0xc2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a1a      	ldr	r2, [pc, #104]	; (8008a58 <TIM_OC1_SetConfig+0x110>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00b      	beq.n	8008a0a <TIM_OC1_SetConfig+0xc2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a19      	ldr	r2, [pc, #100]	; (8008a5c <TIM_OC1_SetConfig+0x114>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d007      	beq.n	8008a0a <TIM_OC1_SetConfig+0xc2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a18      	ldr	r2, [pc, #96]	; (8008a60 <TIM_OC1_SetConfig+0x118>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d003      	beq.n	8008a0a <TIM_OC1_SetConfig+0xc2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a17      	ldr	r2, [pc, #92]	; (8008a64 <TIM_OC1_SetConfig+0x11c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d111      	bne.n	8008a2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	621a      	str	r2, [r3, #32]
}
 8008a48:	bf00      	nop
 8008a4a:	371c      	adds	r7, #28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	40012c00 	.word	0x40012c00
 8008a58:	40013400 	.word	0x40013400
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	40014400 	.word	0x40014400
 8008a64:	40014800 	.word	0x40014800

08008a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	f023 0210 	bic.w	r2, r3, #16
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f023 0320 	bic.w	r3, r3, #32
 8008ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	011b      	lsls	r3, r3, #4
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a28      	ldr	r2, [pc, #160]	; (8008b68 <TIM_OC2_SetConfig+0x100>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d003      	beq.n	8008ad4 <TIM_OC2_SetConfig+0x6c>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a27      	ldr	r2, [pc, #156]	; (8008b6c <TIM_OC2_SetConfig+0x104>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d10d      	bne.n	8008af0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	011b      	lsls	r3, r3, #4
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a1d      	ldr	r2, [pc, #116]	; (8008b68 <TIM_OC2_SetConfig+0x100>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d00f      	beq.n	8008b18 <TIM_OC2_SetConfig+0xb0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a1c      	ldr	r2, [pc, #112]	; (8008b6c <TIM_OC2_SetConfig+0x104>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00b      	beq.n	8008b18 <TIM_OC2_SetConfig+0xb0>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a1b      	ldr	r2, [pc, #108]	; (8008b70 <TIM_OC2_SetConfig+0x108>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d007      	beq.n	8008b18 <TIM_OC2_SetConfig+0xb0>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a1a      	ldr	r2, [pc, #104]	; (8008b74 <TIM_OC2_SetConfig+0x10c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d003      	beq.n	8008b18 <TIM_OC2_SetConfig+0xb0>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a19      	ldr	r2, [pc, #100]	; (8008b78 <TIM_OC2_SetConfig+0x110>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d113      	bne.n	8008b40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	621a      	str	r2, [r3, #32]
}
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40012c00 	.word	0x40012c00
 8008b6c:	40013400 	.word	0x40013400
 8008b70:	40014000 	.word	0x40014000
 8008b74:	40014400 	.word	0x40014400
 8008b78:	40014800 	.word	0x40014800

08008b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0303 	bic.w	r3, r3, #3
 8008bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a27      	ldr	r2, [pc, #156]	; (8008c78 <TIM_OC3_SetConfig+0xfc>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <TIM_OC3_SetConfig+0x6a>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a26      	ldr	r2, [pc, #152]	; (8008c7c <TIM_OC3_SetConfig+0x100>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d10d      	bne.n	8008c02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a1c      	ldr	r2, [pc, #112]	; (8008c78 <TIM_OC3_SetConfig+0xfc>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d00f      	beq.n	8008c2a <TIM_OC3_SetConfig+0xae>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a1b      	ldr	r2, [pc, #108]	; (8008c7c <TIM_OC3_SetConfig+0x100>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00b      	beq.n	8008c2a <TIM_OC3_SetConfig+0xae>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a1a      	ldr	r2, [pc, #104]	; (8008c80 <TIM_OC3_SetConfig+0x104>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d007      	beq.n	8008c2a <TIM_OC3_SetConfig+0xae>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a19      	ldr	r2, [pc, #100]	; (8008c84 <TIM_OC3_SetConfig+0x108>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d003      	beq.n	8008c2a <TIM_OC3_SetConfig+0xae>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <TIM_OC3_SetConfig+0x10c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d113      	bne.n	8008c52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	621a      	str	r2, [r3, #32]
}
 8008c6c:	bf00      	nop
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	40012c00 	.word	0x40012c00
 8008c7c:	40013400 	.word	0x40013400
 8008c80:	40014000 	.word	0x40014000
 8008c84:	40014400 	.word	0x40014400
 8008c88:	40014800 	.word	0x40014800

08008c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	031b      	lsls	r3, r3, #12
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a28      	ldr	r2, [pc, #160]	; (8008d8c <TIM_OC4_SetConfig+0x100>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC4_SetConfig+0x6c>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a27      	ldr	r2, [pc, #156]	; (8008d90 <TIM_OC4_SetConfig+0x104>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d10d      	bne.n	8008d14 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	031b      	lsls	r3, r3, #12
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a1d      	ldr	r2, [pc, #116]	; (8008d8c <TIM_OC4_SetConfig+0x100>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00f      	beq.n	8008d3c <TIM_OC4_SetConfig+0xb0>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a1c      	ldr	r2, [pc, #112]	; (8008d90 <TIM_OC4_SetConfig+0x104>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d00b      	beq.n	8008d3c <TIM_OC4_SetConfig+0xb0>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a1b      	ldr	r2, [pc, #108]	; (8008d94 <TIM_OC4_SetConfig+0x108>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d007      	beq.n	8008d3c <TIM_OC4_SetConfig+0xb0>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a1a      	ldr	r2, [pc, #104]	; (8008d98 <TIM_OC4_SetConfig+0x10c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d003      	beq.n	8008d3c <TIM_OC4_SetConfig+0xb0>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a19      	ldr	r2, [pc, #100]	; (8008d9c <TIM_OC4_SetConfig+0x110>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d113      	bne.n	8008d64 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	019b      	lsls	r3, r3, #6
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	019b      	lsls	r3, r3, #6
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	40012c00 	.word	0x40012c00
 8008d90:	40013400 	.word	0x40013400
 8008d94:	40014000 	.word	0x40014000
 8008d98:	40014400 	.word	0x40014400
 8008d9c:	40014800 	.word	0x40014800

08008da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008de4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	041b      	lsls	r3, r3, #16
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a17      	ldr	r2, [pc, #92]	; (8008e54 <TIM_OC5_SetConfig+0xb4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00f      	beq.n	8008e1a <TIM_OC5_SetConfig+0x7a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a16      	ldr	r2, [pc, #88]	; (8008e58 <TIM_OC5_SetConfig+0xb8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d00b      	beq.n	8008e1a <TIM_OC5_SetConfig+0x7a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a15      	ldr	r2, [pc, #84]	; (8008e5c <TIM_OC5_SetConfig+0xbc>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d007      	beq.n	8008e1a <TIM_OC5_SetConfig+0x7a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a14      	ldr	r2, [pc, #80]	; (8008e60 <TIM_OC5_SetConfig+0xc0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d003      	beq.n	8008e1a <TIM_OC5_SetConfig+0x7a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a13      	ldr	r2, [pc, #76]	; (8008e64 <TIM_OC5_SetConfig+0xc4>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d109      	bne.n	8008e2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	021b      	lsls	r3, r3, #8
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	621a      	str	r2, [r3, #32]
}
 8008e48:	bf00      	nop
 8008e4a:	371c      	adds	r7, #28
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	40012c00 	.word	0x40012c00
 8008e58:	40013400 	.word	0x40013400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800

08008e68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	051b      	lsls	r3, r3, #20
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a18      	ldr	r2, [pc, #96]	; (8008f20 <TIM_OC6_SetConfig+0xb8>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d00f      	beq.n	8008ee4 <TIM_OC6_SetConfig+0x7c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a17      	ldr	r2, [pc, #92]	; (8008f24 <TIM_OC6_SetConfig+0xbc>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d00b      	beq.n	8008ee4 <TIM_OC6_SetConfig+0x7c>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a16      	ldr	r2, [pc, #88]	; (8008f28 <TIM_OC6_SetConfig+0xc0>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d007      	beq.n	8008ee4 <TIM_OC6_SetConfig+0x7c>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a15      	ldr	r2, [pc, #84]	; (8008f2c <TIM_OC6_SetConfig+0xc4>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d003      	beq.n	8008ee4 <TIM_OC6_SetConfig+0x7c>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a14      	ldr	r2, [pc, #80]	; (8008f30 <TIM_OC6_SetConfig+0xc8>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d109      	bne.n	8008ef8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	029b      	lsls	r3, r3, #10
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	621a      	str	r2, [r3, #32]
}
 8008f12:	bf00      	nop
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	40012c00 	.word	0x40012c00
 8008f24:	40013400 	.word	0x40013400
 8008f28:	40014000 	.word	0x40014000
 8008f2c:	40014400 	.word	0x40014400
 8008f30:	40014800 	.word	0x40014800

08008f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f003 031f 	and.w	r3, r3, #31
 8008f46:	2201      	movs	r2, #1
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a1a      	ldr	r2, [r3, #32]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	43db      	mvns	r3, r3
 8008f56:	401a      	ands	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a1a      	ldr	r2, [r3, #32]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 031f 	and.w	r3, r3, #31
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	fa01 f303 	lsl.w	r3, r1, r3
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	621a      	str	r2, [r3, #32]
}
 8008f72:	bf00      	nop
 8008f74:	371c      	adds	r7, #28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
	...

08008f80 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d109      	bne.n	8008fa4 <HAL_TIMEx_PWMN_Start+0x24>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	bf14      	ite	ne
 8008f9c:	2301      	movne	r3, #1
 8008f9e:	2300      	moveq	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	e022      	b.n	8008fea <HAL_TIMEx_PWMN_Start+0x6a>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	d109      	bne.n	8008fbe <HAL_TIMEx_PWMN_Start+0x3e>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	bf14      	ite	ne
 8008fb6:	2301      	movne	r3, #1
 8008fb8:	2300      	moveq	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	e015      	b.n	8008fea <HAL_TIMEx_PWMN_Start+0x6a>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d109      	bne.n	8008fd8 <HAL_TIMEx_PWMN_Start+0x58>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	bf14      	ite	ne
 8008fd0:	2301      	movne	r3, #1
 8008fd2:	2300      	moveq	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	e008      	b.n	8008fea <HAL_TIMEx_PWMN_Start+0x6a>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	bf14      	ite	ne
 8008fe4:	2301      	movne	r3, #1
 8008fe6:	2300      	moveq	r3, #0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e069      	b.n	80090c6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d104      	bne.n	8009002 <HAL_TIMEx_PWMN_Start+0x82>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009000:	e013      	b.n	800902a <HAL_TIMEx_PWMN_Start+0xaa>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b04      	cmp	r3, #4
 8009006:	d104      	bne.n	8009012 <HAL_TIMEx_PWMN_Start+0x92>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009010:	e00b      	b.n	800902a <HAL_TIMEx_PWMN_Start+0xaa>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b08      	cmp	r3, #8
 8009016:	d104      	bne.n	8009022 <HAL_TIMEx_PWMN_Start+0xa2>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009020:	e003      	b.n	800902a <HAL_TIMEx_PWMN_Start+0xaa>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2202      	movs	r2, #2
 8009026:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2204      	movs	r2, #4
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fa1e 	bl	8009474 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009046:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a20      	ldr	r2, [pc, #128]	; (80090d0 <HAL_TIMEx_PWMN_Start+0x150>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d018      	beq.n	8009084 <HAL_TIMEx_PWMN_Start+0x104>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800905a:	d013      	beq.n	8009084 <HAL_TIMEx_PWMN_Start+0x104>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1c      	ldr	r2, [pc, #112]	; (80090d4 <HAL_TIMEx_PWMN_Start+0x154>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d00e      	beq.n	8009084 <HAL_TIMEx_PWMN_Start+0x104>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1b      	ldr	r2, [pc, #108]	; (80090d8 <HAL_TIMEx_PWMN_Start+0x158>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d009      	beq.n	8009084 <HAL_TIMEx_PWMN_Start+0x104>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a19      	ldr	r2, [pc, #100]	; (80090dc <HAL_TIMEx_PWMN_Start+0x15c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d004      	beq.n	8009084 <HAL_TIMEx_PWMN_Start+0x104>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a18      	ldr	r2, [pc, #96]	; (80090e0 <HAL_TIMEx_PWMN_Start+0x160>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d115      	bne.n	80090b0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	4b16      	ldr	r3, [pc, #88]	; (80090e4 <HAL_TIMEx_PWMN_Start+0x164>)
 800908c:	4013      	ands	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b06      	cmp	r3, #6
 8009094:	d015      	beq.n	80090c2 <HAL_TIMEx_PWMN_Start+0x142>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800909c:	d011      	beq.n	80090c2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0201 	orr.w	r2, r2, #1
 80090ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ae:	e008      	b.n	80090c2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0201 	orr.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	e000      	b.n	80090c4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	40012c00 	.word	0x40012c00
 80090d4:	40000400 	.word	0x40000400
 80090d8:	40000800 	.word	0x40000800
 80090dc:	40013400 	.word	0x40013400
 80090e0:	40014000 	.word	0x40014000
 80090e4:	00010007 	.word	0x00010007

080090e8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2200      	movs	r2, #0
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 f9ba 	bl	8009474 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6a1a      	ldr	r2, [r3, #32]
 8009106:	f241 1311 	movw	r3, #4369	; 0x1111
 800910a:	4013      	ands	r3, r2
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10f      	bne.n	8009130 <HAL_TIMEx_PWMN_Stop+0x48>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6a1a      	ldr	r2, [r3, #32]
 8009116:	f244 4344 	movw	r3, #17476	; 0x4444
 800911a:	4013      	ands	r3, r2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d107      	bne.n	8009130 <HAL_TIMEx_PWMN_Stop+0x48>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800912e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6a1a      	ldr	r2, [r3, #32]
 8009136:	f241 1311 	movw	r3, #4369	; 0x1111
 800913a:	4013      	ands	r3, r2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10f      	bne.n	8009160 <HAL_TIMEx_PWMN_Stop+0x78>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6a1a      	ldr	r2, [r3, #32]
 8009146:	f244 4344 	movw	r3, #17476	; 0x4444
 800914a:	4013      	ands	r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d107      	bne.n	8009160 <HAL_TIMEx_PWMN_Stop+0x78>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0201 	bic.w	r2, r2, #1
 800915e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d104      	bne.n	8009170 <HAL_TIMEx_PWMN_Stop+0x88>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800916e:	e013      	b.n	8009198 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	2b04      	cmp	r3, #4
 8009174:	d104      	bne.n	8009180 <HAL_TIMEx_PWMN_Stop+0x98>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800917e:	e00b      	b.n	8009198 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b08      	cmp	r3, #8
 8009184:	d104      	bne.n	8009190 <HAL_TIMEx_PWMN_Stop+0xa8>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800918e:	e003      	b.n	8009198 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e065      	b.n	8009288 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a2c      	ldr	r2, [pc, #176]	; (8009294 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d004      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a2b      	ldr	r2, [pc, #172]	; (8009298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d108      	bne.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	4313      	orrs	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a1b      	ldr	r2, [pc, #108]	; (8009294 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d018      	beq.n	800925c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009232:	d013      	beq.n	800925c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a18      	ldr	r2, [pc, #96]	; (800929c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d00e      	beq.n	800925c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a17      	ldr	r2, [pc, #92]	; (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d009      	beq.n	800925c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a12      	ldr	r2, [pc, #72]	; (8009298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d004      	beq.n	800925c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a13      	ldr	r2, [pc, #76]	; (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d10c      	bne.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	4313      	orrs	r3, r2
 800926c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	40012c00 	.word	0x40012c00
 8009298:	40013400 	.word	0x40013400
 800929c:	40000400 	.word	0x40000400
 80092a0:	40000800 	.word	0x40000800
 80092a4:	40014000 	.word	0x40014000

080092a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e087      	b.n	80093d4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	4313      	orrs	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932a:	4313      	orrs	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	041b      	lsls	r3, r3, #16
 800933a:	4313      	orrs	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a27      	ldr	r2, [pc, #156]	; (80093e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d004      	beq.n	8009352 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a25      	ldr	r2, [pc, #148]	; (80093e4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d106      	bne.n	8009360 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	69db      	ldr	r3, [r3, #28]
 800935c:	4313      	orrs	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a1e      	ldr	r2, [pc, #120]	; (80093e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d004      	beq.n	8009374 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d126      	bne.n	80093c2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937e:	051b      	lsls	r3, r3, #20
 8009380:	4313      	orrs	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	4313      	orrs	r3, r2
 800939e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a0e      	ldr	r2, [pc, #56]	; (80093e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d004      	beq.n	80093b4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a0d      	ldr	r2, [pc, #52]	; (80093e4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d106      	bne.n	80093c2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093be:	4313      	orrs	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	40012c00 	.word	0x40012c00
 80093e4:	40013400 	.word	0x40013400

080093e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f003 031f 	and.w	r3, r3, #31
 8009486:	2204      	movs	r2, #4
 8009488:	fa02 f303 	lsl.w	r3, r2, r3
 800948c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6a1a      	ldr	r2, [r3, #32]
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	43db      	mvns	r3, r3
 8009496:	401a      	ands	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6a1a      	ldr	r2, [r3, #32]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f003 031f 	and.w	r3, r3, #31
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	fa01 f303 	lsl.w	r3, r1, r3
 80094ac:	431a      	orrs	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	621a      	str	r2, [r3, #32]
}
 80094b2:	bf00      	nop
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b082      	sub	sp, #8
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e042      	b.n	8009556 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d106      	bne.n	80094e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7fa fe52 	bl	800418c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2224      	movs	r2, #36	; 0x24
 80094ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 0201 	bic.w	r2, r2, #1
 80094fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fae5 	bl	8009ad0 <UART_SetConfig>
 8009506:	4603      	mov	r3, r0
 8009508:	2b01      	cmp	r3, #1
 800950a:	d101      	bne.n	8009510 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e022      	b.n	8009556 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fd7d 	bl	800a018 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800952c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800953c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f042 0201 	orr.w	r2, r2, #1
 800954c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fe04 	bl	800a15c <UART_CheckIdleState>
 8009554:	4603      	mov	r3, r0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009574:	2b20      	cmp	r3, #32
 8009576:	d168      	bne.n	800964a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <HAL_UART_Transmit_DMA+0x24>
 800957e:	88fb      	ldrh	r3, [r7, #6]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e061      	b.n	800964c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800958e:	2b01      	cmp	r3, #1
 8009590:	d101      	bne.n	8009596 <HAL_UART_Transmit_DMA+0x36>
 8009592:	2302      	movs	r3, #2
 8009594:	e05a      	b.n	800964c <HAL_UART_Transmit_DMA+0xec>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	88fa      	ldrh	r2, [r7, #6]
 80095a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	88fa      	ldrh	r2, [r7, #6]
 80095b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2221      	movs	r2, #33	; 0x21
 80095c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d02c      	beq.n	8009626 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d0:	4a20      	ldr	r2, [pc, #128]	; (8009654 <HAL_UART_Transmit_DMA+0xf4>)
 80095d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d8:	4a1f      	ldr	r2, [pc, #124]	; (8009658 <HAL_UART_Transmit_DMA+0xf8>)
 80095da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e0:	4a1e      	ldr	r2, [pc, #120]	; (800965c <HAL_UART_Transmit_DMA+0xfc>)
 80095e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e8:	2200      	movs	r2, #0
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f4:	4619      	mov	r1, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3328      	adds	r3, #40	; 0x28
 80095fc:	461a      	mov	r2, r3
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	f7fd f80a 	bl	8006618 <HAL_DMA_Start_IT>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00d      	beq.n	8009626 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2210      	movs	r2, #16
 800960e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2220      	movs	r2, #32
 800961e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e012      	b.n	800964c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2240      	movs	r2, #64	; 0x40
 800962c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009644:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	e000      	b.n	800964c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800964a:	2302      	movs	r3, #2
  }
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	0800a36f 	.word	0x0800a36f
 8009658:	0800a3c3 	.word	0x0800a3c3
 800965c:	0800a465 	.word	0x0800a465

08009660 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009674:	2b20      	cmp	r3, #32
 8009676:	d170      	bne.n	800975a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <HAL_UART_Receive_DMA+0x24>
 800967e:	88fb      	ldrh	r3, [r7, #6]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e069      	b.n	800975c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_UART_Receive_DMA+0x36>
 8009692:	2302      	movs	r3, #2
 8009694:	e062      	b.n	800975c <HAL_UART_Receive_DMA+0xfc>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	88fa      	ldrh	r2, [r7, #6]
 80096a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2222      	movs	r2, #34	; 0x22
 80096b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d02c      	beq.n	800971e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c8:	4a26      	ldr	r2, [pc, #152]	; (8009764 <HAL_UART_Receive_DMA+0x104>)
 80096ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096d0:	4a25      	ldr	r2, [pc, #148]	; (8009768 <HAL_UART_Receive_DMA+0x108>)
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096d8:	4a24      	ldr	r2, [pc, #144]	; (800976c <HAL_UART_Receive_DMA+0x10c>)
 80096da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096e0:	2200      	movs	r2, #0
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3324      	adds	r3, #36	; 0x24
 80096ee:	4619      	mov	r1, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f4:	461a      	mov	r2, r3
 80096f6:	88fb      	ldrh	r3, [r7, #6]
 80096f8:	f7fc ff8e 	bl	8006618 <HAL_DMA_Start_IT>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00d      	beq.n	800971e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2210      	movs	r2, #16
 8009706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e01e      	b.n	800975c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009734:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f042 0201 	orr.w	r2, r2, #1
 8009744:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009754:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	e000      	b.n	800975c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800975a:	2302      	movs	r3, #2
  }
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	0800a3df 	.word	0x0800a3df
 8009768:	0800a449 	.word	0x0800a449
 800976c:	0800a465 	.word	0x0800a465

08009770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b088      	sub	sp, #32
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009790:	69fa      	ldr	r2, [r7, #28]
 8009792:	f640 030f 	movw	r3, #2063	; 0x80f
 8009796:	4013      	ands	r3, r2
 8009798:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d118      	bne.n	80097d2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	f003 0320 	and.w	r3, r3, #32
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d013      	beq.n	80097d2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 8144 	beq.w	8009a50 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	4798      	blx	r3
      }
      return;
 80097d0:	e13e      	b.n	8009a50 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 80e8 	beq.w	80099aa <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4ba0      	ldr	r3, [pc, #640]	; (8009a60 <HAL_UART_IRQHandler+0x2f0>)
 80097de:	4013      	ands	r3, r2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d105      	bne.n	80097f0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	4b9f      	ldr	r3, [pc, #636]	; (8009a64 <HAL_UART_IRQHandler+0x2f4>)
 80097e8:	4013      	ands	r3, r2
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80dd 	beq.w	80099aa <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d010      	beq.n	800981c <HAL_UART_IRQHandler+0xac>
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2201      	movs	r2, #1
 800980a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009812:	f043 0201 	orr.w	r2, r3, #1
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d010      	beq.n	8009848 <HAL_UART_IRQHandler+0xd8>
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2202      	movs	r2, #2
 8009836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800983e:	f043 0204 	orr.w	r2, r3, #4
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d010      	beq.n	8009874 <HAL_UART_IRQHandler+0x104>
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00b      	beq.n	8009874 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2204      	movs	r2, #4
 8009862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800986a:	f043 0202 	orr.w	r2, r3, #2
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f003 0308 	and.w	r3, r3, #8
 800987a:	2b00      	cmp	r3, #0
 800987c:	d015      	beq.n	80098aa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d104      	bne.n	8009892 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4b75      	ldr	r3, [pc, #468]	; (8009a60 <HAL_UART_IRQHandler+0x2f0>)
 800988c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00b      	beq.n	80098aa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2208      	movs	r2, #8
 8009898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a0:	f043 0208 	orr.w	r2, r3, #8
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d011      	beq.n	80098d8 <HAL_UART_IRQHandler+0x168>
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00c      	beq.n	80098d8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ce:	f043 0220 	orr.w	r2, r3, #32
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 80b8 	beq.w	8009a54 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	f003 0320 	and.w	r3, r3, #32
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d011      	beq.n	8009912 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d104      	bne.n	8009902 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d007      	beq.n	8009912 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009918:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009924:	2b40      	cmp	r3, #64	; 0x40
 8009926:	d004      	beq.n	8009932 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800992e:	2b00      	cmp	r3, #0
 8009930:	d031      	beq.n	8009996 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fcf8 	bl	800a328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009942:	2b40      	cmp	r3, #64	; 0x40
 8009944:	d123      	bne.n	800998e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009954:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800995a:	2b00      	cmp	r3, #0
 800995c:	d013      	beq.n	8009986 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009962:	4a41      	ldr	r2, [pc, #260]	; (8009a68 <HAL_UART_IRQHandler+0x2f8>)
 8009964:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800996a:	4618      	mov	r0, r3
 800996c:	f7fc fecf 	bl	800670e <HAL_DMA_Abort_IT>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d017      	beq.n	80099a6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800997a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009980:	4610      	mov	r0, r2
 8009982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009984:	e00f      	b.n	80099a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f898 	bl	8009abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800998c:	e00b      	b.n	80099a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f894 	bl	8009abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009994:	e007      	b.n	80099a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f890 	bl	8009abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80099a4:	e056      	b.n	8009a54 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099a6:	bf00      	nop
    return;
 80099a8:	e054      	b.n	8009a54 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00d      	beq.n	80099d0 <HAL_UART_IRQHandler+0x260>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d008      	beq.n	80099d0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80099c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fdbb 	bl	800a544 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099ce:	e044      	b.n	8009a5a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d012      	beq.n	8009a00 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d008      	beq.n	8009a00 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d030      	beq.n	8009a58 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	4798      	blx	r3
    }
    return;
 80099fe:	e02b      	b.n	8009a58 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d008      	beq.n	8009a1c <HAL_UART_IRQHandler+0x2ac>
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fd7b 	bl	800a510 <UART_EndTransmit_IT>
    return;
 8009a1a:	e01e      	b.n	8009a5a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d008      	beq.n	8009a38 <HAL_UART_IRQHandler+0x2c8>
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d003      	beq.n	8009a38 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fd9b 	bl	800a56c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a36:	e010      	b.n	8009a5a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <HAL_UART_IRQHandler+0x2ea>
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	da08      	bge.n	8009a5a <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fd85 	bl	800a558 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a4e:	e004      	b.n	8009a5a <HAL_UART_IRQHandler+0x2ea>
      return;
 8009a50:	bf00      	nop
 8009a52:	e002      	b.n	8009a5a <HAL_UART_IRQHandler+0x2ea>
    return;
 8009a54:	bf00      	nop
 8009a56:	e000      	b.n	8009a5a <HAL_UART_IRQHandler+0x2ea>
    return;
 8009a58:	bf00      	nop
  }
}
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	10000001 	.word	0x10000001
 8009a64:	04000120 	.word	0x04000120
 8009a68:	0800a4e5 	.word	0x0800a4e5

08009a6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ad0:	b5b0      	push	{r4, r5, r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	431a      	orrs	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009af8:	69fa      	ldr	r2, [r7, #28]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	4baf      	ldr	r3, [pc, #700]	; (8009dc4 <UART_SetConfig+0x2f4>)
 8009b06:	4013      	ands	r3, r2
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	6812      	ldr	r2, [r2, #0]
 8009b0c:	69f9      	ldr	r1, [r7, #28]
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4aa5      	ldr	r2, [pc, #660]	; (8009dc8 <UART_SetConfig+0x2f8>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d004      	beq.n	8009b42 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009b4c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	6812      	ldr	r2, [r2, #0]
 8009b54:	69f9      	ldr	r1, [r7, #28]
 8009b56:	430b      	orrs	r3, r1
 8009b58:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b60:	f023 010f 	bic.w	r1, r3, #15
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a95      	ldr	r2, [pc, #596]	; (8009dcc <UART_SetConfig+0x2fc>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d121      	bne.n	8009bbe <UART_SetConfig+0xee>
 8009b7a:	4b95      	ldr	r3, [pc, #596]	; (8009dd0 <UART_SetConfig+0x300>)
 8009b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b80:	f003 0303 	and.w	r3, r3, #3
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d817      	bhi.n	8009bb8 <UART_SetConfig+0xe8>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <UART_SetConfig+0xc0>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009ba1 	.word	0x08009ba1
 8009b94:	08009bad 	.word	0x08009bad
 8009b98:	08009ba7 	.word	0x08009ba7
 8009b9c:	08009bb3 	.word	0x08009bb3
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	76fb      	strb	r3, [r7, #27]
 8009ba4:	e0bc      	b.n	8009d20 <UART_SetConfig+0x250>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	76fb      	strb	r3, [r7, #27]
 8009baa:	e0b9      	b.n	8009d20 <UART_SetConfig+0x250>
 8009bac:	2304      	movs	r3, #4
 8009bae:	76fb      	strb	r3, [r7, #27]
 8009bb0:	e0b6      	b.n	8009d20 <UART_SetConfig+0x250>
 8009bb2:	2308      	movs	r3, #8
 8009bb4:	76fb      	strb	r3, [r7, #27]
 8009bb6:	e0b3      	b.n	8009d20 <UART_SetConfig+0x250>
 8009bb8:	2310      	movs	r3, #16
 8009bba:	76fb      	strb	r3, [r7, #27]
 8009bbc:	e0b0      	b.n	8009d20 <UART_SetConfig+0x250>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a84      	ldr	r2, [pc, #528]	; (8009dd4 <UART_SetConfig+0x304>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d132      	bne.n	8009c2e <UART_SetConfig+0x15e>
 8009bc8:	4b81      	ldr	r3, [pc, #516]	; (8009dd0 <UART_SetConfig+0x300>)
 8009bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bce:	f003 030c 	and.w	r3, r3, #12
 8009bd2:	2b0c      	cmp	r3, #12
 8009bd4:	d828      	bhi.n	8009c28 <UART_SetConfig+0x158>
 8009bd6:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <UART_SetConfig+0x10c>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009c11 	.word	0x08009c11
 8009be0:	08009c29 	.word	0x08009c29
 8009be4:	08009c29 	.word	0x08009c29
 8009be8:	08009c29 	.word	0x08009c29
 8009bec:	08009c1d 	.word	0x08009c1d
 8009bf0:	08009c29 	.word	0x08009c29
 8009bf4:	08009c29 	.word	0x08009c29
 8009bf8:	08009c29 	.word	0x08009c29
 8009bfc:	08009c17 	.word	0x08009c17
 8009c00:	08009c29 	.word	0x08009c29
 8009c04:	08009c29 	.word	0x08009c29
 8009c08:	08009c29 	.word	0x08009c29
 8009c0c:	08009c23 	.word	0x08009c23
 8009c10:	2300      	movs	r3, #0
 8009c12:	76fb      	strb	r3, [r7, #27]
 8009c14:	e084      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c16:	2302      	movs	r3, #2
 8009c18:	76fb      	strb	r3, [r7, #27]
 8009c1a:	e081      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	76fb      	strb	r3, [r7, #27]
 8009c20:	e07e      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c22:	2308      	movs	r3, #8
 8009c24:	76fb      	strb	r3, [r7, #27]
 8009c26:	e07b      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c28:	2310      	movs	r3, #16
 8009c2a:	76fb      	strb	r3, [r7, #27]
 8009c2c:	e078      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a69      	ldr	r2, [pc, #420]	; (8009dd8 <UART_SetConfig+0x308>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d120      	bne.n	8009c7a <UART_SetConfig+0x1aa>
 8009c38:	4b65      	ldr	r3, [pc, #404]	; (8009dd0 <UART_SetConfig+0x300>)
 8009c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c42:	2b30      	cmp	r3, #48	; 0x30
 8009c44:	d013      	beq.n	8009c6e <UART_SetConfig+0x19e>
 8009c46:	2b30      	cmp	r3, #48	; 0x30
 8009c48:	d814      	bhi.n	8009c74 <UART_SetConfig+0x1a4>
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	d009      	beq.n	8009c62 <UART_SetConfig+0x192>
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d810      	bhi.n	8009c74 <UART_SetConfig+0x1a4>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <UART_SetConfig+0x18c>
 8009c56:	2b10      	cmp	r3, #16
 8009c58:	d006      	beq.n	8009c68 <UART_SetConfig+0x198>
 8009c5a:	e00b      	b.n	8009c74 <UART_SetConfig+0x1a4>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	76fb      	strb	r3, [r7, #27]
 8009c60:	e05e      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c62:	2302      	movs	r3, #2
 8009c64:	76fb      	strb	r3, [r7, #27]
 8009c66:	e05b      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	76fb      	strb	r3, [r7, #27]
 8009c6c:	e058      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c6e:	2308      	movs	r3, #8
 8009c70:	76fb      	strb	r3, [r7, #27]
 8009c72:	e055      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c74:	2310      	movs	r3, #16
 8009c76:	76fb      	strb	r3, [r7, #27]
 8009c78:	e052      	b.n	8009d20 <UART_SetConfig+0x250>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a57      	ldr	r2, [pc, #348]	; (8009ddc <UART_SetConfig+0x30c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d120      	bne.n	8009cc6 <UART_SetConfig+0x1f6>
 8009c84:	4b52      	ldr	r3, [pc, #328]	; (8009dd0 <UART_SetConfig+0x300>)
 8009c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8009c90:	d013      	beq.n	8009cba <UART_SetConfig+0x1ea>
 8009c92:	2bc0      	cmp	r3, #192	; 0xc0
 8009c94:	d814      	bhi.n	8009cc0 <UART_SetConfig+0x1f0>
 8009c96:	2b80      	cmp	r3, #128	; 0x80
 8009c98:	d009      	beq.n	8009cae <UART_SetConfig+0x1de>
 8009c9a:	2b80      	cmp	r3, #128	; 0x80
 8009c9c:	d810      	bhi.n	8009cc0 <UART_SetConfig+0x1f0>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <UART_SetConfig+0x1d8>
 8009ca2:	2b40      	cmp	r3, #64	; 0x40
 8009ca4:	d006      	beq.n	8009cb4 <UART_SetConfig+0x1e4>
 8009ca6:	e00b      	b.n	8009cc0 <UART_SetConfig+0x1f0>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	76fb      	strb	r3, [r7, #27]
 8009cac:	e038      	b.n	8009d20 <UART_SetConfig+0x250>
 8009cae:	2302      	movs	r3, #2
 8009cb0:	76fb      	strb	r3, [r7, #27]
 8009cb2:	e035      	b.n	8009d20 <UART_SetConfig+0x250>
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	76fb      	strb	r3, [r7, #27]
 8009cb8:	e032      	b.n	8009d20 <UART_SetConfig+0x250>
 8009cba:	2308      	movs	r3, #8
 8009cbc:	76fb      	strb	r3, [r7, #27]
 8009cbe:	e02f      	b.n	8009d20 <UART_SetConfig+0x250>
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	76fb      	strb	r3, [r7, #27]
 8009cc4:	e02c      	b.n	8009d20 <UART_SetConfig+0x250>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a3f      	ldr	r2, [pc, #252]	; (8009dc8 <UART_SetConfig+0x2f8>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d125      	bne.n	8009d1c <UART_SetConfig+0x24c>
 8009cd0:	4b3f      	ldr	r3, [pc, #252]	; (8009dd0 <UART_SetConfig+0x300>)
 8009cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cde:	d017      	beq.n	8009d10 <UART_SetConfig+0x240>
 8009ce0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ce4:	d817      	bhi.n	8009d16 <UART_SetConfig+0x246>
 8009ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cea:	d00b      	beq.n	8009d04 <UART_SetConfig+0x234>
 8009cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cf0:	d811      	bhi.n	8009d16 <UART_SetConfig+0x246>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <UART_SetConfig+0x22e>
 8009cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cfa:	d006      	beq.n	8009d0a <UART_SetConfig+0x23a>
 8009cfc:	e00b      	b.n	8009d16 <UART_SetConfig+0x246>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	76fb      	strb	r3, [r7, #27]
 8009d02:	e00d      	b.n	8009d20 <UART_SetConfig+0x250>
 8009d04:	2302      	movs	r3, #2
 8009d06:	76fb      	strb	r3, [r7, #27]
 8009d08:	e00a      	b.n	8009d20 <UART_SetConfig+0x250>
 8009d0a:	2304      	movs	r3, #4
 8009d0c:	76fb      	strb	r3, [r7, #27]
 8009d0e:	e007      	b.n	8009d20 <UART_SetConfig+0x250>
 8009d10:	2308      	movs	r3, #8
 8009d12:	76fb      	strb	r3, [r7, #27]
 8009d14:	e004      	b.n	8009d20 <UART_SetConfig+0x250>
 8009d16:	2310      	movs	r3, #16
 8009d18:	76fb      	strb	r3, [r7, #27]
 8009d1a:	e001      	b.n	8009d20 <UART_SetConfig+0x250>
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a28      	ldr	r2, [pc, #160]	; (8009dc8 <UART_SetConfig+0x2f8>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	f040 809e 	bne.w	8009e68 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d2c:	7efb      	ldrb	r3, [r7, #27]
 8009d2e:	2b08      	cmp	r3, #8
 8009d30:	d823      	bhi.n	8009d7a <UART_SetConfig+0x2aa>
 8009d32:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <UART_SetConfig+0x268>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d5d 	.word	0x08009d5d
 8009d3c:	08009d7b 	.word	0x08009d7b
 8009d40:	08009d65 	.word	0x08009d65
 8009d44:	08009d7b 	.word	0x08009d7b
 8009d48:	08009d6b 	.word	0x08009d6b
 8009d4c:	08009d7b 	.word	0x08009d7b
 8009d50:	08009d7b 	.word	0x08009d7b
 8009d54:	08009d7b 	.word	0x08009d7b
 8009d58:	08009d73 	.word	0x08009d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d5c:	f7fd fde8 	bl	8007930 <HAL_RCC_GetPCLK1Freq>
 8009d60:	6178      	str	r0, [r7, #20]
        break;
 8009d62:	e00f      	b.n	8009d84 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d64:	4b1e      	ldr	r3, [pc, #120]	; (8009de0 <UART_SetConfig+0x310>)
 8009d66:	617b      	str	r3, [r7, #20]
        break;
 8009d68:	e00c      	b.n	8009d84 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d6a:	f7fd fd73 	bl	8007854 <HAL_RCC_GetSysClockFreq>
 8009d6e:	6178      	str	r0, [r7, #20]
        break;
 8009d70:	e008      	b.n	8009d84 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d76:	617b      	str	r3, [r7, #20]
        break;
 8009d78:	e004      	b.n	8009d84 <UART_SetConfig+0x2b4>
      default:
        pclk = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	76bb      	strb	r3, [r7, #26]
        break;
 8009d82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 812e 	beq.w	8009fe8 <UART_SetConfig+0x518>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d90:	4a14      	ldr	r2, [pc, #80]	; (8009de4 <UART_SetConfig+0x314>)
 8009d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d96:	461a      	mov	r2, r3
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d9e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	4613      	mov	r3, r2
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	4413      	add	r3, r2
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d305      	bcc.n	8009dbc <UART_SetConfig+0x2ec>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d915      	bls.n	8009de8 <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	76bb      	strb	r3, [r7, #26]
 8009dc0:	e112      	b.n	8009fe8 <UART_SetConfig+0x518>
 8009dc2:	bf00      	nop
 8009dc4:	cfff69f3 	.word	0xcfff69f3
 8009dc8:	40008000 	.word	0x40008000
 8009dcc:	40013800 	.word	0x40013800
 8009dd0:	40021000 	.word	0x40021000
 8009dd4:	40004400 	.word	0x40004400
 8009dd8:	40004800 	.word	0x40004800
 8009ddc:	40004c00 	.word	0x40004c00
 8009de0:	00f42400 	.word	0x00f42400
 8009de4:	0800ae20 	.word	0x0800ae20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f04f 0100 	mov.w	r1, #0
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	4a86      	ldr	r2, [pc, #536]	; (800a010 <UART_SetConfig+0x540>)
 8009df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	f04f 0300 	mov.w	r3, #0
 8009e00:	f7f6 fe30 	bl	8000a64 <__aeabi_uldivmod>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	f04f 0200 	mov.w	r2, #0
 8009e10:	f04f 0300 	mov.w	r3, #0
 8009e14:	020b      	lsls	r3, r1, #8
 8009e16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e1a:	0202      	lsls	r2, r0, #8
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	6849      	ldr	r1, [r1, #4]
 8009e20:	0849      	lsrs	r1, r1, #1
 8009e22:	4608      	mov	r0, r1
 8009e24:	f04f 0100 	mov.w	r1, #0
 8009e28:	1814      	adds	r4, r2, r0
 8009e2a:	eb43 0501 	adc.w	r5, r3, r1
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	461a      	mov	r2, r3
 8009e34:	f04f 0300 	mov.w	r3, #0
 8009e38:	4620      	mov	r0, r4
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	f7f6 fe12 	bl	8000a64 <__aeabi_uldivmod>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4613      	mov	r3, r2
 8009e46:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e4e:	d308      	bcc.n	8009e62 <UART_SetConfig+0x392>
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e56:	d204      	bcs.n	8009e62 <UART_SetConfig+0x392>
        {
          huart->Instance->BRR = usartdiv;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	60da      	str	r2, [r3, #12]
 8009e60:	e0c2      	b.n	8009fe8 <UART_SetConfig+0x518>
        }
        else
        {
          ret = HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	76bb      	strb	r3, [r7, #26]
 8009e66:	e0bf      	b.n	8009fe8 <UART_SetConfig+0x518>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e70:	d165      	bne.n	8009f3e <UART_SetConfig+0x46e>
  {
    switch (clocksource)
 8009e72:	7efb      	ldrb	r3, [r7, #27]
 8009e74:	2b08      	cmp	r3, #8
 8009e76:	d828      	bhi.n	8009eca <UART_SetConfig+0x3fa>
 8009e78:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <UART_SetConfig+0x3b0>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009ea5 	.word	0x08009ea5
 8009e84:	08009ead 	.word	0x08009ead
 8009e88:	08009eb5 	.word	0x08009eb5
 8009e8c:	08009ecb 	.word	0x08009ecb
 8009e90:	08009ebb 	.word	0x08009ebb
 8009e94:	08009ecb 	.word	0x08009ecb
 8009e98:	08009ecb 	.word	0x08009ecb
 8009e9c:	08009ecb 	.word	0x08009ecb
 8009ea0:	08009ec3 	.word	0x08009ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ea4:	f7fd fd44 	bl	8007930 <HAL_RCC_GetPCLK1Freq>
 8009ea8:	6178      	str	r0, [r7, #20]
        break;
 8009eaa:	e013      	b.n	8009ed4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eac:	f7fd fd56 	bl	800795c <HAL_RCC_GetPCLK2Freq>
 8009eb0:	6178      	str	r0, [r7, #20]
        break;
 8009eb2:	e00f      	b.n	8009ed4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009eb4:	4b57      	ldr	r3, [pc, #348]	; (800a014 <UART_SetConfig+0x544>)
 8009eb6:	617b      	str	r3, [r7, #20]
        break;
 8009eb8:	e00c      	b.n	8009ed4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eba:	f7fd fccb 	bl	8007854 <HAL_RCC_GetSysClockFreq>
 8009ebe:	6178      	str	r0, [r7, #20]
        break;
 8009ec0:	e008      	b.n	8009ed4 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ec6:	617b      	str	r3, [r7, #20]
        break;
 8009ec8:	e004      	b.n	8009ed4 <UART_SetConfig+0x404>
      default:
        pclk = 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	76bb      	strb	r3, [r7, #26]
        break;
 8009ed2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 8086 	beq.w	8009fe8 <UART_SetConfig+0x518>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	4a4b      	ldr	r2, [pc, #300]	; (800a010 <UART_SetConfig+0x540>)
 8009ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eee:	005a      	lsls	r2, r3, #1
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	085b      	lsrs	r3, r3, #1
 8009ef6:	441a      	add	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2b0f      	cmp	r3, #15
 8009f08:	d916      	bls.n	8009f38 <UART_SetConfig+0x468>
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f10:	d212      	bcs.n	8009f38 <UART_SetConfig+0x468>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	f023 030f 	bic.w	r3, r3, #15
 8009f1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	085b      	lsrs	r3, r3, #1
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	89fb      	ldrh	r3, [r7, #14]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	89fa      	ldrh	r2, [r7, #14]
 8009f34:	60da      	str	r2, [r3, #12]
 8009f36:	e057      	b.n	8009fe8 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	76bb      	strb	r3, [r7, #26]
 8009f3c:	e054      	b.n	8009fe8 <UART_SetConfig+0x518>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f3e:	7efb      	ldrb	r3, [r7, #27]
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d828      	bhi.n	8009f96 <UART_SetConfig+0x4c6>
 8009f44:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <UART_SetConfig+0x47c>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009f71 	.word	0x08009f71
 8009f50:	08009f79 	.word	0x08009f79
 8009f54:	08009f81 	.word	0x08009f81
 8009f58:	08009f97 	.word	0x08009f97
 8009f5c:	08009f87 	.word	0x08009f87
 8009f60:	08009f97 	.word	0x08009f97
 8009f64:	08009f97 	.word	0x08009f97
 8009f68:	08009f97 	.word	0x08009f97
 8009f6c:	08009f8f 	.word	0x08009f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f70:	f7fd fcde 	bl	8007930 <HAL_RCC_GetPCLK1Freq>
 8009f74:	6178      	str	r0, [r7, #20]
        break;
 8009f76:	e013      	b.n	8009fa0 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f78:	f7fd fcf0 	bl	800795c <HAL_RCC_GetPCLK2Freq>
 8009f7c:	6178      	str	r0, [r7, #20]
        break;
 8009f7e:	e00f      	b.n	8009fa0 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f80:	4b24      	ldr	r3, [pc, #144]	; (800a014 <UART_SetConfig+0x544>)
 8009f82:	617b      	str	r3, [r7, #20]
        break;
 8009f84:	e00c      	b.n	8009fa0 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f86:	f7fd fc65 	bl	8007854 <HAL_RCC_GetSysClockFreq>
 8009f8a:	6178      	str	r0, [r7, #20]
        break;
 8009f8c:	e008      	b.n	8009fa0 <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f92:	617b      	str	r3, [r7, #20]
        break;
 8009f94:	e004      	b.n	8009fa0 <UART_SetConfig+0x4d0>
      default:
        pclk = 0U;
 8009f96:	2300      	movs	r3, #0
 8009f98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	76bb      	strb	r3, [r7, #26]
        break;
 8009f9e:	bf00      	nop
    }

    if (pclk != 0U)
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d020      	beq.n	8009fe8 <UART_SetConfig+0x518>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	4a19      	ldr	r2, [pc, #100]	; (800a010 <UART_SetConfig+0x540>)
 8009fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	441a      	add	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	2b0f      	cmp	r3, #15
 8009fd0:	d908      	bls.n	8009fe4 <UART_SetConfig+0x514>
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fd8:	d204      	bcs.n	8009fe4 <UART_SetConfig+0x514>
      {
        huart->Instance->BRR = usartdiv;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	60da      	str	r2, [r3, #12]
 8009fe2:	e001      	b.n	8009fe8 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a004:	7ebb      	ldrb	r3, [r7, #26]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3720      	adds	r7, #32
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bdb0      	pop	{r4, r5, r7, pc}
 800a00e:	bf00      	nop
 800a010:	0800ae20 	.word	0x0800ae20
 800a014:	00f42400 	.word	0x00f42400

0800a018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00a      	beq.n	800a042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	430a      	orrs	r2, r1
 800a040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00a      	beq.n	800a064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00a      	beq.n	800a086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08a:	f003 0308 	and.w	r3, r3, #8
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00a      	beq.n	800a0a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ac:	f003 0310 	and.w	r3, r3, #16
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00a      	beq.n	800a0ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	430a      	orrs	r2, r1
 800a0c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	f003 0320 	and.w	r3, r3, #32
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00a      	beq.n	800a0ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d01a      	beq.n	800a12e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a116:	d10a      	bne.n	800a12e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	430a      	orrs	r2, r1
 800a12c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00a      	beq.n	800a150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	430a      	orrs	r2, r1
 800a14e:	605a      	str	r2, [r3, #4]
  }
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af02      	add	r7, sp, #8
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a16c:	f7fa fcc4 	bl	8004af8 <HAL_GetTick>
 800a170:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 0308 	and.w	r3, r3, #8
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d10e      	bne.n	800a19e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a180:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f82c 	bl	800a1ec <UART_WaitOnFlagUntilTimeout>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e022      	b.n	800a1e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d10e      	bne.n	800a1ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f816 	bl	800a1ec <UART_WaitOnFlagUntilTimeout>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e00c      	b.n	800a1e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1fc:	e062      	b.n	800a2c4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a204:	d05e      	beq.n	800a2c4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a206:	f7fa fc77 	bl	8004af8 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	69ba      	ldr	r2, [r7, #24]
 800a212:	429a      	cmp	r2, r3
 800a214:	d302      	bcc.n	800a21c <UART_WaitOnFlagUntilTimeout+0x30>
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d11d      	bne.n	800a258 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a22a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689a      	ldr	r2, [r3, #8]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f022 0201 	bic.w	r2, r2, #1
 800a23a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2220      	movs	r2, #32
 800a240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2220      	movs	r2, #32
 800a248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a254:	2303      	movs	r3, #3
 800a256:	e045      	b.n	800a2e4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 0304 	and.w	r3, r3, #4
 800a262:	2b00      	cmp	r3, #0
 800a264:	d02e      	beq.n	800a2c4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69db      	ldr	r3, [r3, #28]
 800a26c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a274:	d126      	bne.n	800a2c4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a27e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a28e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 0201 	bic.w	r2, r2, #1
 800a29e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2220      	movs	r2, #32
 800a2a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2220      	movs	r2, #32
 800a2ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e00f      	b.n	800a2e4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	69da      	ldr	r2, [r3, #28]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	bf0c      	ite	eq
 800a2d4:	2301      	moveq	r3, #1
 800a2d6:	2300      	movne	r3, #0
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	461a      	mov	r2, r3
 800a2dc:	79fb      	ldrb	r3, [r7, #7]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d08d      	beq.n	800a1fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a302:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689a      	ldr	r2, [r3, #8]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a312:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a33e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	6812      	ldr	r2, [r2, #0]
 800a34a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a34e:	f023 0301 	bic.w	r3, r3, #1
 800a352:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2220      	movs	r2, #32
 800a358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a362:	bf00      	nop
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b00      	cmp	r3, #0
 800a388:	d114      	bne.n	800a3b4 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3a0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3b0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3b2:	e002      	b.n	800a3ba <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7ff fb59 	bl	8009a6c <HAL_UART_TxCpltCallback>
}
 800a3ba:	bf00      	nop
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f7ff fb55 	bl	8009a80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3d6:	bf00      	nop
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d11f      	bne.n	800a43a <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a410:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0201 	bic.w	r2, r2, #1
 800a420:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a430:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2220      	movs	r2, #32
 800a436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7ff fb2a 	bl	8009a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a440:	bf00      	nop
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a454:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7ff fb26 	bl	8009aa8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a478:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a480:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48c:	2b80      	cmp	r3, #128	; 0x80
 800a48e:	d109      	bne.n	800a4a4 <UART_DMAError+0x40>
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2b21      	cmp	r3, #33	; 0x21
 800a494:	d106      	bne.n	800a4a4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2200      	movs	r2, #0
 800a49a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a49e:	6978      	ldr	r0, [r7, #20]
 800a4a0:	f7ff ff24 	bl	800a2ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ae:	2b40      	cmp	r3, #64	; 0x40
 800a4b0:	d109      	bne.n	800a4c6 <UART_DMAError+0x62>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b22      	cmp	r3, #34	; 0x22
 800a4b6:	d106      	bne.n	800a4c6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a4c0:	6978      	ldr	r0, [r7, #20]
 800a4c2:	f7ff ff31 	bl	800a328 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4cc:	f043 0210 	orr.w	r2, r3, #16
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4d6:	6978      	ldr	r0, [r7, #20]
 800a4d8:	f7ff faf0 	bl	8009abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4dc:	bf00      	nop
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f7ff fada 	bl	8009abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a508:	bf00      	nop
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a526:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2220      	movs	r2, #32
 800a52c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7ff fa98 	bl	8009a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a560:	bf00      	nop
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d101      	bne.n	800a596 <HAL_UARTEx_DisableFifoMode+0x16>
 800a592:	2302      	movs	r3, #2
 800a594:	e027      	b.n	800a5e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2224      	movs	r2, #36	; 0x24
 800a5a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f022 0201 	bic.w	r2, r2, #1
 800a5bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a5c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a602:	2b01      	cmp	r3, #1
 800a604:	d101      	bne.n	800a60a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a606:	2302      	movs	r3, #2
 800a608:	e02d      	b.n	800a666 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2224      	movs	r2, #36	; 0x24
 800a616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f022 0201 	bic.w	r2, r2, #1
 800a630:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f850 	bl	800a6ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2220      	movs	r2, #32
 800a658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d101      	bne.n	800a686 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a682:	2302      	movs	r3, #2
 800a684:	e02d      	b.n	800a6e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2224      	movs	r2, #36	; 0x24
 800a692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f022 0201 	bic.w	r2, r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f812 	bl	800a6ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b089      	sub	sp, #36	; 0x24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a6f4:	4a2f      	ldr	r2, [pc, #188]	; (800a7b4 <UARTEx_SetNbDataToProcess+0xc8>)
 800a6f6:	f107 0314 	add.w	r3, r7, #20
 800a6fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a702:	4a2d      	ldr	r2, [pc, #180]	; (800a7b8 <UARTEx_SetNbDataToProcess+0xcc>)
 800a704:	f107 030c 	add.w	r3, r7, #12
 800a708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a70c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a714:	2b00      	cmp	r3, #0
 800a716:	d108      	bne.n	800a72a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a728:	e03d      	b.n	800a7a6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a72a:	2308      	movs	r3, #8
 800a72c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a72e:	2308      	movs	r3, #8
 800a730:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	0e5b      	lsrs	r3, r3, #25
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	f003 0307 	and.w	r3, r3, #7
 800a740:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	0f5b      	lsrs	r3, r3, #29
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	f003 0307 	and.w	r3, r3, #7
 800a750:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a752:	7fbb      	ldrb	r3, [r7, #30]
 800a754:	7f3a      	ldrb	r2, [r7, #28]
 800a756:	f107 0120 	add.w	r1, r7, #32
 800a75a:	440a      	add	r2, r1
 800a75c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a760:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a764:	7f3a      	ldrb	r2, [r7, #28]
 800a766:	f107 0120 	add.w	r1, r7, #32
 800a76a:	440a      	add	r2, r1
 800a76c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a770:	fb93 f3f2 	sdiv	r3, r3, r2
 800a774:	b29a      	uxth	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a77c:	7ffb      	ldrb	r3, [r7, #31]
 800a77e:	7f7a      	ldrb	r2, [r7, #29]
 800a780:	f107 0120 	add.w	r1, r7, #32
 800a784:	440a      	add	r2, r1
 800a786:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a78a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a78e:	7f7a      	ldrb	r2, [r7, #29]
 800a790:	f107 0120 	add.w	r1, r7, #32
 800a794:	440a      	add	r2, r1
 800a796:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a79a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a7a6:	bf00      	nop
 800a7a8:	3724      	adds	r7, #36	; 0x24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	0800acc4 	.word	0x0800acc4
 800a7b8:	0800accc 	.word	0x0800accc

0800a7bc <__cxa_pure_virtual>:
 800a7bc:	b508      	push	{r3, lr}
 800a7be:	f000 f80d 	bl	800a7dc <_ZSt9terminatev>

0800a7c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a7c2:	b508      	push	{r3, lr}
 800a7c4:	4780      	blx	r0
 800a7c6:	f000 f80e 	bl	800a7e6 <abort>
	...

0800a7cc <_ZSt13get_terminatev>:
 800a7cc:	4b02      	ldr	r3, [pc, #8]	; (800a7d8 <_ZSt13get_terminatev+0xc>)
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	f3bf 8f5b 	dmb	ish
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	2000000c 	.word	0x2000000c

0800a7dc <_ZSt9terminatev>:
 800a7dc:	b508      	push	{r3, lr}
 800a7de:	f7ff fff5 	bl	800a7cc <_ZSt13get_terminatev>
 800a7e2:	f7ff ffee 	bl	800a7c2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a7e6 <abort>:
 800a7e6:	b508      	push	{r3, lr}
 800a7e8:	2006      	movs	r0, #6
 800a7ea:	f000 f873 	bl	800a8d4 <raise>
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	f7fa f872 	bl	80048d8 <_exit>

0800a7f4 <__errno>:
 800a7f4:	4b01      	ldr	r3, [pc, #4]	; (800a7fc <__errno+0x8>)
 800a7f6:	6818      	ldr	r0, [r3, #0]
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	20000010 	.word	0x20000010

0800a800 <__libc_init_array>:
 800a800:	b570      	push	{r4, r5, r6, lr}
 800a802:	4d0d      	ldr	r5, [pc, #52]	; (800a838 <__libc_init_array+0x38>)
 800a804:	4c0d      	ldr	r4, [pc, #52]	; (800a83c <__libc_init_array+0x3c>)
 800a806:	1b64      	subs	r4, r4, r5
 800a808:	10a4      	asrs	r4, r4, #2
 800a80a:	2600      	movs	r6, #0
 800a80c:	42a6      	cmp	r6, r4
 800a80e:	d109      	bne.n	800a824 <__libc_init_array+0x24>
 800a810:	4d0b      	ldr	r5, [pc, #44]	; (800a840 <__libc_init_array+0x40>)
 800a812:	4c0c      	ldr	r4, [pc, #48]	; (800a844 <__libc_init_array+0x44>)
 800a814:	f000 f970 	bl	800aaf8 <_init>
 800a818:	1b64      	subs	r4, r4, r5
 800a81a:	10a4      	asrs	r4, r4, #2
 800a81c:	2600      	movs	r6, #0
 800a81e:	42a6      	cmp	r6, r4
 800a820:	d105      	bne.n	800a82e <__libc_init_array+0x2e>
 800a822:	bd70      	pop	{r4, r5, r6, pc}
 800a824:	f855 3b04 	ldr.w	r3, [r5], #4
 800a828:	4798      	blx	r3
 800a82a:	3601      	adds	r6, #1
 800a82c:	e7ee      	b.n	800a80c <__libc_init_array+0xc>
 800a82e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a832:	4798      	blx	r3
 800a834:	3601      	adds	r6, #1
 800a836:	e7f2      	b.n	800a81e <__libc_init_array+0x1e>
 800a838:	0800ae40 	.word	0x0800ae40
 800a83c:	0800ae40 	.word	0x0800ae40
 800a840:	0800ae40 	.word	0x0800ae40
 800a844:	0800ae48 	.word	0x0800ae48

0800a848 <memcpy>:
 800a848:	440a      	add	r2, r1
 800a84a:	4291      	cmp	r1, r2
 800a84c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a850:	d100      	bne.n	800a854 <memcpy+0xc>
 800a852:	4770      	bx	lr
 800a854:	b510      	push	{r4, lr}
 800a856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a85e:	4291      	cmp	r1, r2
 800a860:	d1f9      	bne.n	800a856 <memcpy+0xe>
 800a862:	bd10      	pop	{r4, pc}

0800a864 <memset>:
 800a864:	4402      	add	r2, r0
 800a866:	4603      	mov	r3, r0
 800a868:	4293      	cmp	r3, r2
 800a86a:	d100      	bne.n	800a86e <memset+0xa>
 800a86c:	4770      	bx	lr
 800a86e:	f803 1b01 	strb.w	r1, [r3], #1
 800a872:	e7f9      	b.n	800a868 <memset+0x4>

0800a874 <realloc>:
 800a874:	4b02      	ldr	r3, [pc, #8]	; (800a880 <realloc+0xc>)
 800a876:	460a      	mov	r2, r1
 800a878:	4601      	mov	r1, r0
 800a87a:	6818      	ldr	r0, [r3, #0]
 800a87c:	f000 b8a0 	b.w	800a9c0 <_realloc_r>
 800a880:	20000010 	.word	0x20000010

0800a884 <_raise_r>:
 800a884:	291f      	cmp	r1, #31
 800a886:	b538      	push	{r3, r4, r5, lr}
 800a888:	4604      	mov	r4, r0
 800a88a:	460d      	mov	r5, r1
 800a88c:	d904      	bls.n	800a898 <_raise_r+0x14>
 800a88e:	2316      	movs	r3, #22
 800a890:	6003      	str	r3, [r0, #0]
 800a892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a896:	bd38      	pop	{r3, r4, r5, pc}
 800a898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a89a:	b112      	cbz	r2, 800a8a2 <_raise_r+0x1e>
 800a89c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8a0:	b94b      	cbnz	r3, 800a8b6 <_raise_r+0x32>
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 f830 	bl	800a908 <_getpid_r>
 800a8a8:	462a      	mov	r2, r5
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8b2:	f000 b817 	b.w	800a8e4 <_kill_r>
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d00a      	beq.n	800a8d0 <_raise_r+0x4c>
 800a8ba:	1c59      	adds	r1, r3, #1
 800a8bc:	d103      	bne.n	800a8c6 <_raise_r+0x42>
 800a8be:	2316      	movs	r3, #22
 800a8c0:	6003      	str	r3, [r0, #0]
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	e7e7      	b.n	800a896 <_raise_r+0x12>
 800a8c6:	2400      	movs	r4, #0
 800a8c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	4798      	blx	r3
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	e7e0      	b.n	800a896 <_raise_r+0x12>

0800a8d4 <raise>:
 800a8d4:	4b02      	ldr	r3, [pc, #8]	; (800a8e0 <raise+0xc>)
 800a8d6:	4601      	mov	r1, r0
 800a8d8:	6818      	ldr	r0, [r3, #0]
 800a8da:	f7ff bfd3 	b.w	800a884 <_raise_r>
 800a8de:	bf00      	nop
 800a8e0:	20000010 	.word	0x20000010

0800a8e4 <_kill_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	; (800a904 <_kill_r+0x20>)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	f7f9 ffe1 	bl	80048b8 <_kill>
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	d102      	bne.n	800a900 <_kill_r+0x1c>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	b103      	cbz	r3, 800a900 <_kill_r+0x1c>
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	bd38      	pop	{r3, r4, r5, pc}
 800a902:	bf00      	nop
 800a904:	20000e40 	.word	0x20000e40

0800a908 <_getpid_r>:
 800a908:	f7f9 bfce 	b.w	80048a8 <_getpid>

0800a90c <_malloc_r>:
 800a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90e:	1ccd      	adds	r5, r1, #3
 800a910:	f025 0503 	bic.w	r5, r5, #3
 800a914:	3508      	adds	r5, #8
 800a916:	2d0c      	cmp	r5, #12
 800a918:	bf38      	it	cc
 800a91a:	250c      	movcc	r5, #12
 800a91c:	2d00      	cmp	r5, #0
 800a91e:	4606      	mov	r6, r0
 800a920:	db01      	blt.n	800a926 <_malloc_r+0x1a>
 800a922:	42a9      	cmp	r1, r5
 800a924:	d903      	bls.n	800a92e <_malloc_r+0x22>
 800a926:	230c      	movs	r3, #12
 800a928:	6033      	str	r3, [r6, #0]
 800a92a:	2000      	movs	r0, #0
 800a92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a92e:	f000 f87d 	bl	800aa2c <__malloc_lock>
 800a932:	4921      	ldr	r1, [pc, #132]	; (800a9b8 <_malloc_r+0xac>)
 800a934:	680a      	ldr	r2, [r1, #0]
 800a936:	4614      	mov	r4, r2
 800a938:	b99c      	cbnz	r4, 800a962 <_malloc_r+0x56>
 800a93a:	4f20      	ldr	r7, [pc, #128]	; (800a9bc <_malloc_r+0xb0>)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	b923      	cbnz	r3, 800a94a <_malloc_r+0x3e>
 800a940:	4621      	mov	r1, r4
 800a942:	4630      	mov	r0, r6
 800a944:	f000 f862 	bl	800aa0c <_sbrk_r>
 800a948:	6038      	str	r0, [r7, #0]
 800a94a:	4629      	mov	r1, r5
 800a94c:	4630      	mov	r0, r6
 800a94e:	f000 f85d 	bl	800aa0c <_sbrk_r>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d123      	bne.n	800a99e <_malloc_r+0x92>
 800a956:	230c      	movs	r3, #12
 800a958:	6033      	str	r3, [r6, #0]
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 f86c 	bl	800aa38 <__malloc_unlock>
 800a960:	e7e3      	b.n	800a92a <_malloc_r+0x1e>
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	1b5b      	subs	r3, r3, r5
 800a966:	d417      	bmi.n	800a998 <_malloc_r+0x8c>
 800a968:	2b0b      	cmp	r3, #11
 800a96a:	d903      	bls.n	800a974 <_malloc_r+0x68>
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	441c      	add	r4, r3
 800a970:	6025      	str	r5, [r4, #0]
 800a972:	e004      	b.n	800a97e <_malloc_r+0x72>
 800a974:	6863      	ldr	r3, [r4, #4]
 800a976:	42a2      	cmp	r2, r4
 800a978:	bf0c      	ite	eq
 800a97a:	600b      	streq	r3, [r1, #0]
 800a97c:	6053      	strne	r3, [r2, #4]
 800a97e:	4630      	mov	r0, r6
 800a980:	f000 f85a 	bl	800aa38 <__malloc_unlock>
 800a984:	f104 000b 	add.w	r0, r4, #11
 800a988:	1d23      	adds	r3, r4, #4
 800a98a:	f020 0007 	bic.w	r0, r0, #7
 800a98e:	1ac2      	subs	r2, r0, r3
 800a990:	d0cc      	beq.n	800a92c <_malloc_r+0x20>
 800a992:	1a1b      	subs	r3, r3, r0
 800a994:	50a3      	str	r3, [r4, r2]
 800a996:	e7c9      	b.n	800a92c <_malloc_r+0x20>
 800a998:	4622      	mov	r2, r4
 800a99a:	6864      	ldr	r4, [r4, #4]
 800a99c:	e7cc      	b.n	800a938 <_malloc_r+0x2c>
 800a99e:	1cc4      	adds	r4, r0, #3
 800a9a0:	f024 0403 	bic.w	r4, r4, #3
 800a9a4:	42a0      	cmp	r0, r4
 800a9a6:	d0e3      	beq.n	800a970 <_malloc_r+0x64>
 800a9a8:	1a21      	subs	r1, r4, r0
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f000 f82e 	bl	800aa0c <_sbrk_r>
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	d1dd      	bne.n	800a970 <_malloc_r+0x64>
 800a9b4:	e7cf      	b.n	800a956 <_malloc_r+0x4a>
 800a9b6:	bf00      	nop
 800a9b8:	20000ac0 	.word	0x20000ac0
 800a9bc:	20000ac4 	.word	0x20000ac4

0800a9c0 <_realloc_r>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	4607      	mov	r7, r0
 800a9c4:	4614      	mov	r4, r2
 800a9c6:	460e      	mov	r6, r1
 800a9c8:	b921      	cbnz	r1, 800a9d4 <_realloc_r+0x14>
 800a9ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	f7ff bf9c 	b.w	800a90c <_malloc_r>
 800a9d4:	b922      	cbnz	r2, 800a9e0 <_realloc_r+0x20>
 800a9d6:	f000 f835 	bl	800aa44 <_free_r>
 800a9da:	4625      	mov	r5, r4
 800a9dc:	4628      	mov	r0, r5
 800a9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e0:	f000 f880 	bl	800aae4 <_malloc_usable_size_r>
 800a9e4:	42a0      	cmp	r0, r4
 800a9e6:	d20f      	bcs.n	800aa08 <_realloc_r+0x48>
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f7ff ff8e 	bl	800a90c <_malloc_r>
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d0f2      	beq.n	800a9dc <_realloc_r+0x1c>
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	f7ff ff25 	bl	800a848 <memcpy>
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4638      	mov	r0, r7
 800aa02:	f000 f81f 	bl	800aa44 <_free_r>
 800aa06:	e7e9      	b.n	800a9dc <_realloc_r+0x1c>
 800aa08:	4635      	mov	r5, r6
 800aa0a:	e7e7      	b.n	800a9dc <_realloc_r+0x1c>

0800aa0c <_sbrk_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	4d06      	ldr	r5, [pc, #24]	; (800aa28 <_sbrk_r+0x1c>)
 800aa10:	2300      	movs	r3, #0
 800aa12:	4604      	mov	r4, r0
 800aa14:	4608      	mov	r0, r1
 800aa16:	602b      	str	r3, [r5, #0]
 800aa18:	f7f9 ff68 	bl	80048ec <_sbrk>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d102      	bne.n	800aa26 <_sbrk_r+0x1a>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	b103      	cbz	r3, 800aa26 <_sbrk_r+0x1a>
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	bd38      	pop	{r3, r4, r5, pc}
 800aa28:	20000e40 	.word	0x20000e40

0800aa2c <__malloc_lock>:
 800aa2c:	4801      	ldr	r0, [pc, #4]	; (800aa34 <__malloc_lock+0x8>)
 800aa2e:	f000 b861 	b.w	800aaf4 <__retarget_lock_acquire_recursive>
 800aa32:	bf00      	nop
 800aa34:	20000e48 	.word	0x20000e48

0800aa38 <__malloc_unlock>:
 800aa38:	4801      	ldr	r0, [pc, #4]	; (800aa40 <__malloc_unlock+0x8>)
 800aa3a:	f000 b85c 	b.w	800aaf6 <__retarget_lock_release_recursive>
 800aa3e:	bf00      	nop
 800aa40:	20000e48 	.word	0x20000e48

0800aa44 <_free_r>:
 800aa44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa46:	2900      	cmp	r1, #0
 800aa48:	d048      	beq.n	800aadc <_free_r+0x98>
 800aa4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa4e:	9001      	str	r0, [sp, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f1a1 0404 	sub.w	r4, r1, #4
 800aa56:	bfb8      	it	lt
 800aa58:	18e4      	addlt	r4, r4, r3
 800aa5a:	f7ff ffe7 	bl	800aa2c <__malloc_lock>
 800aa5e:	4a20      	ldr	r2, [pc, #128]	; (800aae0 <_free_r+0x9c>)
 800aa60:	9801      	ldr	r0, [sp, #4]
 800aa62:	6813      	ldr	r3, [r2, #0]
 800aa64:	4615      	mov	r5, r2
 800aa66:	b933      	cbnz	r3, 800aa76 <_free_r+0x32>
 800aa68:	6063      	str	r3, [r4, #4]
 800aa6a:	6014      	str	r4, [r2, #0]
 800aa6c:	b003      	add	sp, #12
 800aa6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa72:	f7ff bfe1 	b.w	800aa38 <__malloc_unlock>
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	d90b      	bls.n	800aa92 <_free_r+0x4e>
 800aa7a:	6821      	ldr	r1, [r4, #0]
 800aa7c:	1862      	adds	r2, r4, r1
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	bf04      	itt	eq
 800aa82:	681a      	ldreq	r2, [r3, #0]
 800aa84:	685b      	ldreq	r3, [r3, #4]
 800aa86:	6063      	str	r3, [r4, #4]
 800aa88:	bf04      	itt	eq
 800aa8a:	1852      	addeq	r2, r2, r1
 800aa8c:	6022      	streq	r2, [r4, #0]
 800aa8e:	602c      	str	r4, [r5, #0]
 800aa90:	e7ec      	b.n	800aa6c <_free_r+0x28>
 800aa92:	461a      	mov	r2, r3
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	b10b      	cbz	r3, 800aa9c <_free_r+0x58>
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	d9fa      	bls.n	800aa92 <_free_r+0x4e>
 800aa9c:	6811      	ldr	r1, [r2, #0]
 800aa9e:	1855      	adds	r5, r2, r1
 800aaa0:	42a5      	cmp	r5, r4
 800aaa2:	d10b      	bne.n	800aabc <_free_r+0x78>
 800aaa4:	6824      	ldr	r4, [r4, #0]
 800aaa6:	4421      	add	r1, r4
 800aaa8:	1854      	adds	r4, r2, r1
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	6011      	str	r1, [r2, #0]
 800aaae:	d1dd      	bne.n	800aa6c <_free_r+0x28>
 800aab0:	681c      	ldr	r4, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	6053      	str	r3, [r2, #4]
 800aab6:	4421      	add	r1, r4
 800aab8:	6011      	str	r1, [r2, #0]
 800aaba:	e7d7      	b.n	800aa6c <_free_r+0x28>
 800aabc:	d902      	bls.n	800aac4 <_free_r+0x80>
 800aabe:	230c      	movs	r3, #12
 800aac0:	6003      	str	r3, [r0, #0]
 800aac2:	e7d3      	b.n	800aa6c <_free_r+0x28>
 800aac4:	6825      	ldr	r5, [r4, #0]
 800aac6:	1961      	adds	r1, r4, r5
 800aac8:	428b      	cmp	r3, r1
 800aaca:	bf04      	itt	eq
 800aacc:	6819      	ldreq	r1, [r3, #0]
 800aace:	685b      	ldreq	r3, [r3, #4]
 800aad0:	6063      	str	r3, [r4, #4]
 800aad2:	bf04      	itt	eq
 800aad4:	1949      	addeq	r1, r1, r5
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	6054      	str	r4, [r2, #4]
 800aada:	e7c7      	b.n	800aa6c <_free_r+0x28>
 800aadc:	b003      	add	sp, #12
 800aade:	bd30      	pop	{r4, r5, pc}
 800aae0:	20000ac0 	.word	0x20000ac0

0800aae4 <_malloc_usable_size_r>:
 800aae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aae8:	1f18      	subs	r0, r3, #4
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	bfbc      	itt	lt
 800aaee:	580b      	ldrlt	r3, [r1, r0]
 800aaf0:	18c0      	addlt	r0, r0, r3
 800aaf2:	4770      	bx	lr

0800aaf4 <__retarget_lock_acquire_recursive>:
 800aaf4:	4770      	bx	lr

0800aaf6 <__retarget_lock_release_recursive>:
 800aaf6:	4770      	bx	lr

0800aaf8 <_init>:
 800aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafa:	bf00      	nop
 800aafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafe:	bc08      	pop	{r3}
 800ab00:	469e      	mov	lr, r3
 800ab02:	4770      	bx	lr

0800ab04 <_fini>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	bf00      	nop
 800ab08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0a:	bc08      	pop	{r3}
 800ab0c:	469e      	mov	lr, r3
 800ab0e:	4770      	bx	lr
