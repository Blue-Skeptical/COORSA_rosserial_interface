
COORSA_rosserial_interface-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a854  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800aa2c  0800aa2c  0001aa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad54  0800ad54  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad54  0800ad54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad5c  0800ad5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ad5c  0800ad5c  0001ad5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad64  0800ad64  0001ad64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ad68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd8  20000074  0800addc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e4c  0800addc  00020e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000242a9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ed6  00000000  00000000  0004434d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  00048228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  00049b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233ba  00000000  00000000  0004b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a366  00000000  00000000  0006e6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e54aa  00000000  00000000  00088a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016df02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007228  00000000  00000000  0016df58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aa14 	.word	0x0800aa14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	0800aa14 	.word	0x0800aa14

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a78:	f000 b96e 	b.w	8000d58 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9d08      	ldr	r5, [sp, #32]
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	468c      	mov	ip, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f040 8083 	bne.w	8000baa <__udivmoddi4+0x116>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4617      	mov	r7, r2
 8000aa8:	d947      	bls.n	8000b3a <__udivmoddi4+0xa6>
 8000aaa:	fab2 f282 	clz	r2, r2
 8000aae:	b142      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	f1c2 0020 	rsb	r0, r2, #32
 8000ab4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	4097      	lsls	r7, r2
 8000abc:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ac6:	0c23      	lsrs	r3, r4, #16
 8000ac8:	fbbc f6f8 	udiv	r6, ip, r8
 8000acc:	fa1f fe87 	uxth.w	lr, r7
 8000ad0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ad4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad8:	fb06 f10e 	mul.w	r1, r6, lr
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x60>
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae6:	f080 8119 	bcs.w	8000d1c <__udivmoddi4+0x288>
 8000aea:	4299      	cmp	r1, r3
 8000aec:	f240 8116 	bls.w	8000d1c <__udivmoddi4+0x288>
 8000af0:	3e02      	subs	r6, #2
 8000af2:	443b      	add	r3, r7
 8000af4:	1a5b      	subs	r3, r3, r1
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000afc:	fb08 3310 	mls	r3, r8, r0, r3
 8000b00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b08:	45a6      	cmp	lr, r4
 8000b0a:	d909      	bls.n	8000b20 <__udivmoddi4+0x8c>
 8000b0c:	193c      	adds	r4, r7, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b12:	f080 8105 	bcs.w	8000d20 <__udivmoddi4+0x28c>
 8000b16:	45a6      	cmp	lr, r4
 8000b18:	f240 8102 	bls.w	8000d20 <__udivmoddi4+0x28c>
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	443c      	add	r4, r7
 8000b20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b24:	eba4 040e 	sub.w	r4, r4, lr
 8000b28:	2600      	movs	r6, #0
 8000b2a:	b11d      	cbz	r5, 8000b34 <__udivmoddi4+0xa0>
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e9c5 4300 	strd	r4, r3, [r5]
 8000b34:	4631      	mov	r1, r6
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	b902      	cbnz	r2, 8000b3e <__udivmoddi4+0xaa>
 8000b3c:	deff      	udf	#255	; 0xff
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d150      	bne.n	8000be8 <__udivmoddi4+0x154>
 8000b46:	1bcb      	subs	r3, r1, r7
 8000b48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4c:	fa1f f887 	uxth.w	r8, r7
 8000b50:	2601      	movs	r6, #1
 8000b52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b56:	0c21      	lsrs	r1, r4, #16
 8000b58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b60:	fb08 f30c 	mul.w	r3, r8, ip
 8000b64:	428b      	cmp	r3, r1
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0xe4>
 8000b68:	1879      	adds	r1, r7, r1
 8000b6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0xe2>
 8000b70:	428b      	cmp	r3, r1
 8000b72:	f200 80e9 	bhi.w	8000d48 <__udivmoddi4+0x2b4>
 8000b76:	4684      	mov	ip, r0
 8000b78:	1ac9      	subs	r1, r1, r3
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b88:	fb08 f800 	mul.w	r8, r8, r0
 8000b8c:	45a0      	cmp	r8, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x10c>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x10a>
 8000b98:	45a0      	cmp	r8, r4
 8000b9a:	f200 80d9 	bhi.w	8000d50 <__udivmoddi4+0x2bc>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 0408 	sub.w	r4, r4, r8
 8000ba4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba8:	e7bf      	b.n	8000b2a <__udivmoddi4+0x96>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0x12e>
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	f000 80b1 	beq.w	8000d16 <__udivmoddi4+0x282>
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bba:	4630      	mov	r0, r6
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	fab3 f683 	clz	r6, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d14a      	bne.n	8000c60 <__udivmoddi4+0x1cc>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d302      	bcc.n	8000bd4 <__udivmoddi4+0x140>
 8000bce:	4282      	cmp	r2, r0
 8000bd0:	f200 80b8 	bhi.w	8000d44 <__udivmoddi4+0x2b0>
 8000bd4:	1a84      	subs	r4, r0, r2
 8000bd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bda:	2001      	movs	r0, #1
 8000bdc:	468c      	mov	ip, r1
 8000bde:	2d00      	cmp	r5, #0
 8000be0:	d0a8      	beq.n	8000b34 <__udivmoddi4+0xa0>
 8000be2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf0:	4097      	lsls	r7, r2
 8000bf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bfa:	40d9      	lsrs	r1, r3
 8000bfc:	4330      	orrs	r0, r6
 8000bfe:	0c03      	lsrs	r3, r0, #16
 8000c00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c04:	fa1f f887 	uxth.w	r8, r7
 8000c08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c10:	fb06 f108 	mul.w	r1, r6, r8
 8000c14:	4299      	cmp	r1, r3
 8000c16:	fa04 f402 	lsl.w	r4, r4, r2
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x19c>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c22:	f080 808d 	bcs.w	8000d40 <__udivmoddi4+0x2ac>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 808a 	bls.w	8000d40 <__udivmoddi4+0x2ac>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b281      	uxth	r1, r0
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb00 f308 	mul.w	r3, r0, r8
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x1c4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c4e:	d273      	bcs.n	8000d38 <__udivmoddi4+0x2a4>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d971      	bls.n	8000d38 <__udivmoddi4+0x2a4>
 8000c54:	3802      	subs	r0, #2
 8000c56:	4439      	add	r1, r7
 8000c58:	1acb      	subs	r3, r1, r3
 8000c5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c5e:	e778      	b.n	8000b52 <__udivmoddi4+0xbe>
 8000c60:	f1c6 0c20 	rsb	ip, r6, #32
 8000c64:	fa03 f406 	lsl.w	r4, r3, r6
 8000c68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c6c:	431c      	orrs	r4, r3
 8000c6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c72:	fa01 f306 	lsl.w	r3, r1, r6
 8000c76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c7e:	431f      	orrs	r7, r3
 8000c80:	0c3b      	lsrs	r3, r7, #16
 8000c82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c86:	fa1f f884 	uxth.w	r8, r4
 8000c8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c92:	fb09 fa08 	mul.w	sl, r9, r8
 8000c96:	458a      	cmp	sl, r1
 8000c98:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x220>
 8000ca2:	1861      	adds	r1, r4, r1
 8000ca4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca8:	d248      	bcs.n	8000d3c <__udivmoddi4+0x2a8>
 8000caa:	458a      	cmp	sl, r1
 8000cac:	d946      	bls.n	8000d3c <__udivmoddi4+0x2a8>
 8000cae:	f1a9 0902 	sub.w	r9, r9, #2
 8000cb2:	4421      	add	r1, r4
 8000cb4:	eba1 010a 	sub.w	r1, r1, sl
 8000cb8:	b2bf      	uxth	r7, r7
 8000cba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cc6:	fb00 f808 	mul.w	r8, r0, r8
 8000cca:	45b8      	cmp	r8, r7
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x24a>
 8000cce:	19e7      	adds	r7, r4, r7
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cd4:	d22e      	bcs.n	8000d34 <__udivmoddi4+0x2a0>
 8000cd6:	45b8      	cmp	r8, r7
 8000cd8:	d92c      	bls.n	8000d34 <__udivmoddi4+0x2a0>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4427      	add	r7, r4
 8000cde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ce2:	eba7 0708 	sub.w	r7, r7, r8
 8000ce6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cea:	454f      	cmp	r7, r9
 8000cec:	46c6      	mov	lr, r8
 8000cee:	4649      	mov	r1, r9
 8000cf0:	d31a      	bcc.n	8000d28 <__udivmoddi4+0x294>
 8000cf2:	d017      	beq.n	8000d24 <__udivmoddi4+0x290>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x27a>
 8000cf6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000cfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d02:	40f2      	lsrs	r2, r6
 8000d04:	ea4c 0202 	orr.w	r2, ip, r2
 8000d08:	40f7      	lsrs	r7, r6
 8000d0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e70b      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e9      	b.n	8000af4 <__udivmoddi4+0x60>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6fd      	b.n	8000b20 <__udivmoddi4+0x8c>
 8000d24:	4543      	cmp	r3, r8
 8000d26:	d2e5      	bcs.n	8000cf4 <__udivmoddi4+0x260>
 8000d28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7df      	b.n	8000cf4 <__udivmoddi4+0x260>
 8000d34:	4608      	mov	r0, r1
 8000d36:	e7d2      	b.n	8000cde <__udivmoddi4+0x24a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e78d      	b.n	8000c58 <__udivmoddi4+0x1c4>
 8000d3c:	4681      	mov	r9, r0
 8000d3e:	e7b9      	b.n	8000cb4 <__udivmoddi4+0x220>
 8000d40:	4666      	mov	r6, ip
 8000d42:	e775      	b.n	8000c30 <__udivmoddi4+0x19c>
 8000d44:	4630      	mov	r0, r6
 8000d46:	e74a      	b.n	8000bde <__udivmoddi4+0x14a>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	4439      	add	r1, r7
 8000d4e:	e713      	b.n	8000b78 <__udivmoddi4+0xe4>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	e724      	b.n	8000ba0 <__udivmoddi4+0x10c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <Control_Panel>:
float UP_LIM;
t_PI_Struct Pos_PI;



void Control_Panel(int down_lim, int mid_lim, int up_lim, float Adc_Pot, t_Control_Panel_Struct *params){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6178      	str	r0, [r7, #20]
 8000d64:	6139      	str	r1, [r7, #16]
 8000d66:	60fa      	str	r2, [r7, #12]
 8000d68:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d6c:	607b      	str	r3, [r7, #4]

	  ///////////////////////////////////////
	 ///   CONTROLLO ATTUATORE LINEARE   ///
	///////////////////////////////////////

	params->down_lim = down_lim;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	edc3 7a00 	vstr	s15, [r3]
	params->mid_lim = mid_lim;
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	edc3 7a01 	vstr	s15, [r3, #4]
	params->up_lim = up_lim;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	edc3 7a02 	vstr	s15, [r3, #8]
	DOWN_LIM = params->DOWN_LIM;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	4a93      	ldr	r2, [pc, #588]	; (8000ff0 <Control_Panel+0x294>)
 8000da4:	6013      	str	r3, [r2, #0]
	MID_LIM_UP = params->MID_LIM_UP;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a92      	ldr	r2, [pc, #584]	; (8000ff4 <Control_Panel+0x298>)
 8000dac:	6013      	str	r3, [r2, #0]
	MID_LIM_DOWN = params->MID_LIM_DOWN;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a91      	ldr	r2, [pc, #580]	; (8000ff8 <Control_Panel+0x29c>)
 8000db4:	6013      	str	r3, [r2, #0]
	UP_LIM = params->UP_LIM;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a90      	ldr	r2, [pc, #576]	; (8000ffc <Control_Panel+0x2a0>)
 8000dbc:	6013      	str	r3, [r2, #0]

	if(down_lim == 1 && WaitingForResult){		//POSIZIONE 0
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10b      	bne.n	8000ddc <Control_Panel+0x80>
 8000dc4:	4b8e      	ldr	r3, [pc, #568]	; (8001000 <Control_Panel+0x2a4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <Control_Panel+0x80>
		Pos_ref = DOWN_LIM;
 8000dcc:	4b88      	ldr	r3, [pc, #544]	; (8000ff0 <Control_Panel+0x294>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a8c      	ldr	r2, [pc, #560]	; (8001004 <Control_Panel+0x2a8>)
 8000dd2:	6013      	str	r3, [r2, #0]
		down_f = 1;
 8000dd4:	4b8c      	ldr	r3, [pc, #560]	; (8001008 <Control_Panel+0x2ac>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e031      	b.n	8000e40 <Control_Panel+0xe4>
	}
	else if(mid_lim == 2 && WaitingForResult && down_f == 1){	//POSIZIONE 1
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d10c      	bne.n	8000dfc <Control_Panel+0xa0>
 8000de2:	4b87      	ldr	r3, [pc, #540]	; (8001000 <Control_Panel+0x2a4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <Control_Panel+0xa0>
 8000dea:	4b87      	ldr	r3, [pc, #540]	; (8001008 <Control_Panel+0x2ac>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d104      	bne.n	8000dfc <Control_Panel+0xa0>
		Pos_ref = MID_LIM_DOWN;
 8000df2:	4b81      	ldr	r3, [pc, #516]	; (8000ff8 <Control_Panel+0x29c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a83      	ldr	r2, [pc, #524]	; (8001004 <Control_Panel+0x2a8>)
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e021      	b.n	8000e40 <Control_Panel+0xe4>
	}
	else if(mid_lim == 2 && WaitingForResult && up_f == 1){	//POSIZIONE 1
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d10c      	bne.n	8000e1c <Control_Panel+0xc0>
 8000e02:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <Control_Panel+0x2a4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d008      	beq.n	8000e1c <Control_Panel+0xc0>
 8000e0a:	4b80      	ldr	r3, [pc, #512]	; (800100c <Control_Panel+0x2b0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d104      	bne.n	8000e1c <Control_Panel+0xc0>
		Pos_ref = MID_LIM_UP;
 8000e12:	4b78      	ldr	r3, [pc, #480]	; (8000ff4 <Control_Panel+0x298>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a7b      	ldr	r2, [pc, #492]	; (8001004 <Control_Panel+0x2a8>)
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e011      	b.n	8000e40 <Control_Panel+0xe4>
	}
	else if(up_lim == 4 && WaitingForResult){	//POSIZIONE 2
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d10b      	bne.n	8000e3a <Control_Panel+0xde>
 8000e22:	4b77      	ldr	r3, [pc, #476]	; (8001000 <Control_Panel+0x2a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d007      	beq.n	8000e3a <Control_Panel+0xde>
		Pos_ref = UP_LIM;
 8000e2a:	4b74      	ldr	r3, [pc, #464]	; (8000ffc <Control_Panel+0x2a0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a75      	ldr	r2, [pc, #468]	; (8001004 <Control_Panel+0x2a8>)
 8000e30:	6013      	str	r3, [r2, #0]
		up_f = 1;
 8000e32:	4b76      	ldr	r3, [pc, #472]	; (800100c <Control_Panel+0x2b0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e002      	b.n	8000e40 <Control_Panel+0xe4>
	}
	else{					//MANTIENI POSIZIONE
		Pos_ref = Adc_Pot;
 8000e3a:	4a72      	ldr	r2, [pc, #456]	; (8001004 <Control_Panel+0x2a8>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	6013      	str	r3, [r2, #0]
	}

	Pos_error = Pos_ref - Adc_Pot;
 8000e40:	4b70      	ldr	r3, [pc, #448]	; (8001004 <Control_Panel+0x2a8>)
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4e:	4b70      	ldr	r3, [pc, #448]	; (8001010 <Control_Panel+0x2b4>)
 8000e50:	edc3 7a00 	vstr	s15, [r3]
	I_star = PIDfloat(Pos_error, &Pos_PI);
 8000e54:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <Control_Panel+0x2b4>)
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	486e      	ldr	r0, [pc, #440]	; (8001014 <Control_Panel+0x2b8>)
 8000e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e60:	f000 fa4d 	bl	80012fe <PIDfloat>
 8000e64:	eef0 7a40 	vmov.f32	s15, s0
 8000e68:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <Control_Panel+0x2bc>)
 8000e6a:	edc3 7a00 	vstr	s15, [r3]


	if(I_star >= CURRENT_MAX_UP){  //SATURAZIONE [-I_MAX,+I_MAX]
 8000e6e:	4b6a      	ldr	r3, [pc, #424]	; (8001018 <Control_Panel+0x2bc>)
 8000e70:	edd3 7a00 	vldr	s15, [r3]
 8000e74:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800101c <Control_Panel+0x2c0>
 8000e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	db03      	blt.n	8000e8a <Control_Panel+0x12e>
		I_star = CURRENT_MAX_UP;
 8000e82:	4b65      	ldr	r3, [pc, #404]	; (8001018 <Control_Panel+0x2bc>)
 8000e84:	4a66      	ldr	r2, [pc, #408]	; (8001020 <Control_Panel+0x2c4>)
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e00c      	b.n	8000ea4 <Control_Panel+0x148>
	}
	else if(I_star <= -CURRENT_MAX_DOWN){
 8000e8a:	4b63      	ldr	r3, [pc, #396]	; (8001018 <Control_Panel+0x2bc>)
 8000e8c:	edd3 7a00 	vldr	s15, [r3]
 8000e90:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8000e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	d802      	bhi.n	8000ea4 <Control_Panel+0x148>
		I_star = -CURRENT_MAX_DOWN;
 8000e9e:	4b5e      	ldr	r3, [pc, #376]	; (8001018 <Control_Panel+0x2bc>)
 8000ea0:	4a60      	ldr	r2, [pc, #384]	; (8001024 <Control_Panel+0x2c8>)
 8000ea2:	601a      	str	r2, [r3, #0]
	}


	if(Adc_Pot >= Pos_ref - 0.005f && Adc_Pot <= Pos_ref + 0.005f){ //RAGGIUNGIMENTO SET-POINT ISTERESI ADC POTENZIOMETRO
 8000ea4:	4b57      	ldr	r3, [pc, #348]	; (8001004 <Control_Panel+0x2a8>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001028 <Control_Panel+0x2cc>
 8000eae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebe:	db72      	blt.n	8000fa6 <Control_Panel+0x24a>
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <Control_Panel+0x2a8>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001028 <Control_Panel+0x2cc>
 8000eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ece:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eda:	d864      	bhi.n	8000fa6 <Control_Panel+0x24a>

		if(Pos_ref == DOWN_LIM && WaitingForResult){
 8000edc:	4b49      	ldr	r3, [pc, #292]	; (8001004 <Control_Panel+0x2a8>)
 8000ede:	ed93 7a00 	vldr	s14, [r3]
 8000ee2:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <Control_Panel+0x294>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	eeb4 7a67 	vcmp.f32	s14, s15
 8000eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef0:	d10c      	bne.n	8000f0c <Control_Panel+0x1b0>
 8000ef2:	4b43      	ldr	r3, [pc, #268]	; (8001000 <Control_Panel+0x2a4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d008      	beq.n	8000f0c <Control_Panel+0x1b0>
			WaitingForResult = 0;
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <Control_Panel+0x2a4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
			down_lim = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
			sendMess(8);
 8000f04:	2008      	movs	r0, #8
 8000f06:	f002 f875 	bl	8002ff4 <sendMess>
 8000f0a:	e04c      	b.n	8000fa6 <Control_Panel+0x24a>
		}
		else if(Pos_ref == MID_LIM_DOWN && WaitingForResult){
 8000f0c:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <Control_Panel+0x2a8>)
 8000f0e:	ed93 7a00 	vldr	s14, [r3]
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <Control_Panel+0x29c>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	d10f      	bne.n	8000f42 <Control_Panel+0x1e6>
 8000f22:	4b37      	ldr	r3, [pc, #220]	; (8001000 <Control_Panel+0x2a4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <Control_Panel+0x1e6>
			WaitingForResult = 0;
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <Control_Panel+0x2a4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
			mid_lim = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
			down_f = 0;
 8000f34:	4b34      	ldr	r3, [pc, #208]	; (8001008 <Control_Panel+0x2ac>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
			sendMess(16);
 8000f3a:	2010      	movs	r0, #16
 8000f3c:	f002 f85a 	bl	8002ff4 <sendMess>
 8000f40:	e031      	b.n	8000fa6 <Control_Panel+0x24a>
			//INVIO MESSAGGIO POSIZIONE 1 RAGGIUNTA
		}
		else if(Pos_ref == MID_LIM_UP && WaitingForResult){
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <Control_Panel+0x2a8>)
 8000f44:	ed93 7a00 	vldr	s14, [r3]
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <Control_Panel+0x298>)
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f56:	d10f      	bne.n	8000f78 <Control_Panel+0x21c>
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <Control_Panel+0x2a4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00b      	beq.n	8000f78 <Control_Panel+0x21c>
			WaitingForResult = 0;
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <Control_Panel+0x2a4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
			mid_lim = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
			up_f = 0;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <Control_Panel+0x2b0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
			sendMess(16);
 8000f70:	2010      	movs	r0, #16
 8000f72:	f002 f83f 	bl	8002ff4 <sendMess>
 8000f76:	e016      	b.n	8000fa6 <Control_Panel+0x24a>
			//INVIO MESSAGGIO POSIZIONE 1 RAGGIUNTA
		}
		else if(Pos_ref == UP_LIM && WaitingForResult){
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <Control_Panel+0x2a8>)
 8000f7a:	ed93 7a00 	vldr	s14, [r3]
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <Control_Panel+0x2a0>)
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8c:	d10b      	bne.n	8000fa6 <Control_Panel+0x24a>
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <Control_Panel+0x2a4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <Control_Panel+0x24a>
			WaitingForResult = 0;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <Control_Panel+0x2a4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
			up_lim = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
			sendMess(32);
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	f002 f827 	bl	8002ff4 <sendMess>
			//INVIO MESSAGGIO POSIZIONE 2 RAGGIUNTA
		}
	}

	Current_Ramp(&I_star, &I_ref);
 8000fa6:	4921      	ldr	r1, [pc, #132]	; (800102c <Control_Panel+0x2d0>)
 8000fa8:	481b      	ldr	r0, [pc, #108]	; (8001018 <Control_Panel+0x2bc>)
 8000faa:	f000 f86f 	bl	800108c <Current_Ramp>

	params->I_ref=I_ref;
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <Control_Panel+0x2d0>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60da      	str	r2, [r3, #12]
	params->down_lim = down_lim;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
	params->mid_lim = mid_lim;
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	edc3 7a01 	vstr	s15, [r3, #4]
	params->up_lim = up_lim;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000ac4 	.word	0x20000ac4
 8000ff4:	20000af8 	.word	0x20000af8
 8000ff8:	20000af4 	.word	0x20000af4
 8000ffc:	20000afc 	.word	0x20000afc
 8001000:	200000b0 	.word	0x200000b0
 8001004:	20000090 	.word	0x20000090
 8001008:	200000a0 	.word	0x200000a0
 800100c:	2000009c 	.word	0x2000009c
 8001010:	20000094 	.word	0x20000094
 8001014:	20000ac8 	.word	0x20000ac8
 8001018:	20000098 	.word	0x20000098
 800101c:	3f333333 	.word	0x3f333333
 8001020:	3f333333 	.word	0x3f333333
 8001024:	be800000 	.word	0xbe800000
 8001028:	3ba3d70a 	.word	0x3ba3d70a
 800102c:	20000a88 	.word	0x20000a88

08001030 <Control_Panel_Struct_init>:

void Control_Panel_Struct_init(t_Control_Panel_Struct *params){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	params->down_lim = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
	params->mid_lim = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
	params->up_lim = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
	params->I_ref=0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
	params->DOWN_LIM=0.05f;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <Control_Panel_Struct_init+0x50>)
 800105c:	611a      	str	r2, [r3, #16]
	params->MID_LIM_UP=0.40f;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a08      	ldr	r2, [pc, #32]	; (8001084 <Control_Panel_Struct_init+0x54>)
 8001062:	615a      	str	r2, [r3, #20]
	params->MID_LIM_DOWN=0.55f;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <Control_Panel_Struct_init+0x58>)
 8001068:	619a      	str	r2, [r3, #24]
	params->UP_LIM=1.5f;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001070:	61da      	str	r2, [r3, #28]

}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	3d4ccccd 	.word	0x3d4ccccd
 8001084:	3ecccccd 	.word	0x3ecccccd
 8001088:	3f0ccccd 	.word	0x3f0ccccd

0800108c <Current_Ramp>:


void Current_Ramp(float *I_star, float *I_ref){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]

	 if(*I_star >= *I_ref){
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed93 7a00 	vldr	s14, [r3]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	db09      	blt.n	80010c0 <Current_Ramp+0x34>
			*I_ref += 0.00005f;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80010f8 <Current_Ramp+0x6c>
 80010b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	edc3 7a00 	vstr	s15, [r3]
		}
	 if(*I_star < *I_ref){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	ed93 7a00 	vldr	s14, [r3]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d400      	bmi.n	80010d8 <Current_Ramp+0x4c>
			*I_ref -= 0.00005f;
		}
}
 80010d6:	e009      	b.n	80010ec <Current_Ramp+0x60>
			*I_ref -= 0.00005f;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010f8 <Current_Ramp+0x6c>
 80010e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	edc3 7a00 	vstr	s15, [r3]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	3851b717 	.word	0x3851b717
 80010fc:	00000000 	.word	0x00000000

08001100 <init_filter>:

#include "LowPassFilter.h"

//funzione di inizializzazione della struttura del filtro passa basso
void init_filter(float T_s, float f_t, t_lpfilterStruct *f)
{
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	ed87 0a03 	vstr	s0, [r7, #12]
 800110c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001110:	6078      	str	r0, [r7, #4]
	f->I_a = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
	f->I_p = 0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
	f->U_a = 0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
	f->U_p = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	60da      	str	r2, [r3, #12]

	f->T_s = T_s;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	601a      	str	r2, [r3, #0]
	f->f_t = f_t;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	605a      	str	r2, [r3, #4]

	f->A0 = (2*_filt_PI*f_t)*T_s/(2+(2*_filt_PI*f_t)*T_s);
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f7ff f9d6 	bl	80004f0 <__aeabi_f2d>
 8001144:	a34e      	add	r3, pc, #312	; (adr r3, 8001280 <init_filter+0x180>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff fa29 	bl	80005a0 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4614      	mov	r4, r2
 8001154:	461d      	mov	r5, r3
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff f9ca 	bl	80004f0 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff fa1c 	bl	80005a0 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4614      	mov	r4, r2
 800116e:	461d      	mov	r5, r3
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	f7ff f9bd 	bl	80004f0 <__aeabi_f2d>
 8001176:	a342      	add	r3, pc, #264	; (adr r3, 8001280 <init_filter+0x180>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa10 	bl	80005a0 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4690      	mov	r8, r2
 8001186:	4699      	mov	r9, r3
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff f9b1 	bl	80004f0 <__aeabi_f2d>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4640      	mov	r0, r8
 8001194:	4649      	mov	r1, r9
 8001196:	f7ff fa03 	bl	80005a0 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011aa:	f7ff f843 	bl	8000234 <__adddf3>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff fb1d 	bl	80007f4 <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fbff 	bl	80009c4 <__aeabi_d2f>
 80011c6:	4602      	mov	r2, r0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
	f->A1 = f->A0;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	61da      	str	r2, [r3, #28]
	f->B0 = (2-(2*_filt_PI*f_t)*T_s)/(2+(2*_filt_PI*f_t)*T_s);
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f7ff f98b 	bl	80004f0 <__aeabi_f2d>
 80011da:	a329      	add	r3, pc, #164	; (adr r3, 8001280 <init_filter+0x180>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff f9de 	bl	80005a0 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	461d      	mov	r5, r3
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff f97f 	bl	80004f0 <__aeabi_f2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f9d1 	bl	80005a0 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	f04f 0000 	mov.w	r0, #0
 8001206:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800120a:	f7ff f811 	bl	8000230 <__aeabi_dsub>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4614      	mov	r4, r2
 8001214:	461d      	mov	r5, r3
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff f96a 	bl	80004f0 <__aeabi_f2d>
 800121c:	a318      	add	r3, pc, #96	; (adr r3, 8001280 <init_filter+0x180>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f9bd 	bl	80005a0 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4690      	mov	r8, r2
 800122c:	4699      	mov	r9, r3
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff f95e 	bl	80004f0 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4640      	mov	r0, r8
 800123a:	4649      	mov	r1, r9
 800123c:	f7ff f9b0 	bl	80005a0 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001250:	f7fe fff0 	bl	8000234 <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7ff faca 	bl	80007f4 <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fbac 	bl	80009c4 <__aeabi_d2f>
 800126c:	4602      	mov	r2, r0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	621a      	str	r2, [r3, #32]
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800127c:	f3af 8000 	nop.w
 8001280:	5443d6f4 	.word	0x5443d6f4
 8001284:	401921fb 	.word	0x401921fb

08001288 <filter_run>:

//funzione di calcolo uscita del filtro
float filter_run(float I_a, t_lpfilterStruct *f)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001292:	6038      	str	r0, [r7, #0]
	f->I_a = I_a;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]

	f->U_a = f->A1*f->I_a + f->A0*f->I_p + f->B0*f->U_p;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	ed93 7a07 	vldr	s14, [r3, #28]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	edd3 6a06 	vldr	s13, [r3, #24]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	edd3 6a08 	vldr	s13, [r3, #32]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80012ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	edc3 7a05 	vstr	s15, [r3, #20]

	//update
	f->I_p = f->I_a;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	609a      	str	r2, [r3, #8]
	f->U_p = f->U_a;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	60da      	str	r2, [r3, #12]

	return f->U_a;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	ee07 3a90 	vmov	s15, r3
}
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PIDfloat>:
#include "PID_float.h"
 
float PIDfloat(float xk, t_PI_Struct * params)
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	ed87 0a01 	vstr	s0, [r7, #4]
 8001308:	6038      	str	r0, [r7, #0]
	float tmp;
	params->IntegralMemory+=params->Ki*(xk+params->ek_old)*params->Ts*0.5f;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	edd3 6a03 	vldr	s13, [r3, #12]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	ed93 6a00 	vldr	s12, [r3]
 800131c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001320:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001324:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800132e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001332:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001336:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800133a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	edc3 7a05 	vstr	s15, [r3, #20]
	if (params->IntegralMemory>params->IntSatH) params->IntegralMemory=params->IntSatH;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	ed93 7a05 	vldr	s14, [r3, #20]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	dd03      	ble.n	8001362 <PIDfloat+0x64>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	615a      	str	r2, [r3, #20]
	if (params->IntegralMemory<params->IntSatL) params->IntegralMemory=params->IntSatL;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	ed93 7a05 	vldr	s14, [r3, #20]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800136e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	d503      	bpl.n	8001380 <PIDfloat+0x82>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	615a      	str	r2, [r3, #20]
	tmp=params->Kp*xk+params->IntegralMemory;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	ed93 7a02 	vldr	s14, [r3, #8]
 8001386:	edd7 7a01 	vldr	s15, [r7, #4]
 800138a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	edd3 7a05 	vldr	s15, [r3, #20]
 8001394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001398:	edc7 7a03 	vstr	s15, [r7, #12]

	if (tmp>params->OutSatH) tmp=params->OutSatH;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	edd3 7a06 	vldr	s15, [r3, #24]
 80013a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	dd02      	ble.n	80013b6 <PIDfloat+0xb8>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	60fb      	str	r3, [r7, #12]
	if (tmp<params->OutSatL) tmp=params->OutSatL;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80013bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d502      	bpl.n	80013d0 <PIDfloat+0xd2>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	60fb      	str	r3, [r7, #12]

	params->ek_old=xk;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
	return tmp;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	ee07 3a90 	vmov	s15, r3
}
 80013dc:	eeb0 0a67 	vmov.f32	s0, s15
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <InitPI_BC>:


void InitPI_BC(t_PI_Struct * params)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
    params->ek_old = 0;            // Previous sample
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
    params->duk = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
    params->Kp = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
    params->Ki = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
    params->IntegralMemory = 0;    // The integral memory
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
    params->OutSatH = 0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
    params->OutSatL = 0;           // Output saturations
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
    params->Ts = 0;                // Sampling time
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <read_ADC>:
int Reg_1;		//Variabile temporanea in cui memorizzo il valore del registro DR per ADC1
float Adc_1;		//ADC1
int Reg_2;		//Variabile temporanea in cui memorizzo il valore del registro DR per ADC2
float Adc_2;		//ADC2

void read_ADC(t_AdcStruct *params){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]


	if(ADC1->ISR &= ADC_ISR_EOC){    	//Andiamo a vedere se EOC è settato, se lo è leggo il registro DR.
 8001448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8088 	beq.w	800156e <read_ADC+0x12e>

		Reg_1 = ADC1->DR;		//Viene allocata sulla variabile Reg_1 il valore del registri DR
 800145e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	461a      	mov	r2, r3
 8001466:	4b45      	ldr	r3, [pc, #276]	; (800157c <read_ADC+0x13c>)
 8001468:	601a      	str	r2, [r3, #0]
		Reg_2 = ADC2->DR;		//Avendo letto DR vado a resettare EOC e la conversione può ripartire.
 800146a:	4b45      	ldr	r3, [pc, #276]	; (8001580 <read_ADC+0x140>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	461a      	mov	r2, r3
 8001470:	4b44      	ldr	r3, [pc, #272]	; (8001584 <read_ADC+0x144>)
 8001472:	601a      	str	r2, [r3, #0]

		Adc_1 = (Reg_1*V_REF)/(RIS_ADC-1);	//Viene calcolato il Valore letto in ADC1
 8001474:	4b41      	ldr	r3, [pc, #260]	; (800157c <read_ADC+0x13c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001480:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001588 <read_ADC+0x148>
 8001484:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001488:	eddf 6a40 	vldr	s13, [pc, #256]	; 800158c <read_ADC+0x14c>
 800148c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001490:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <read_ADC+0x150>)
 8001492:	edc3 7a00 	vstr	s15, [r3]
		Adc_2 = (Reg_2*V_REF)/(RIS_ADC-1);	//Viene calcolato il Valore letto in ADC2
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <read_ADC+0x144>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001588 <read_ADC+0x148>
 80014a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800158c <read_ADC+0x14c>
 80014ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b2:	4b38      	ldr	r3, [pc, #224]	; (8001594 <read_ADC+0x154>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]

		if(Adc_2 < V_REF/2)
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <read_ADC+0x154>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001598 <read_ADC+0x158>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	d516      	bpl.n	80014fa <read_ADC+0xba>
			Adc_2 = -CURRENT_FS*(((V_REF/2)-Adc_2)/(V_REF/2)) + OFFSET;
 80014cc:	4b31      	ldr	r3, [pc, #196]	; (8001594 <read_ADC+0x154>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001598 <read_ADC+0x158>
 80014d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014da:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001598 <read_ADC+0x158>
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80014e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ea:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800159c <read_ADC+0x15c>
 80014ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <read_ADC+0x154>)
 80014f4:	edc3 7a00 	vstr	s15, [r3]
 80014f8:	e015      	b.n	8001526 <read_ADC+0xe6>
		else
			Adc_2 = CURRENT_FS*(((Adc_2)-(V_REF/2))/(V_REF/2)) + OFFSET;
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <read_ADC+0x154>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001598 <read_ADC+0x158>
 8001504:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001508:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001598 <read_ADC+0x158>
 800150c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001510:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001518:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800159c <read_ADC+0x15c>
 800151c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <read_ADC+0x154>)
 8001522:	edc3 7a00 	vstr	s15, [r3]


		ADC1->CR |= ADC_CR_ADEN;
 8001526:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADEN;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <read_ADC+0x140>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <read_ADC+0x140>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6093      	str	r3, [r2, #8]
		ADC1->CR |= ADC_CR_ADSTART;	 //Settando ADSTART è possibile iniziare una nuova conversione, poichè setta nuovamente EOC.
 8001542:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6093      	str	r3, [r2, #8]
		ADC2->CR |= ADC_CR_ADSTART;	 //Settando ADSTART è possibile iniziare una nuova conversione, poichè setta nuovamente EOC.
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <read_ADC+0x140>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <read_ADC+0x140>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6093      	str	r3, [r2, #8]


		params->Adc_1 = Adc_1;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <read_ADC+0x150>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	601a      	str	r2, [r3, #0]
		params->Adc_2 = Adc_2;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <read_ADC+0x154>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	605a      	str	r2, [r3, #4]
	}
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000b00 	.word	0x20000b00
 8001580:	50000100 	.word	0x50000100
 8001584:	20000b08 	.word	0x20000b08
 8001588:	40533333 	.word	0x40533333
 800158c:	447fc000 	.word	0x447fc000
 8001590:	20000b04 	.word	0x20000b04
 8001594:	20000b0c 	.word	0x20000b0c
 8001598:	3fd33333 	.word	0x3fd33333
 800159c:	3e4ccccd 	.word	0x3e4ccccd

080015a0 <AdcStruct_init>:

void AdcStruct_init(t_AdcStruct *params){
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
		params->Adc_1 = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
		params->Adc_2 = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c8:	f003 f9e7 	bl	800499a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015cc:	f000 f872 	bl	80016b4 <SystemClock_Config>
  */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d0:	f000 fb76 	bl	8001cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015d4:	f000 fb42 	bl	8001c5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015d8:	f000 faf4 	bl	8001bc4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015dc:	f000 f8d4 	bl	8001788 <MX_ADC1_Init>
  MX_ADC2_Init();
 80015e0:	f000 f94e 	bl	8001880 <MX_ADC2_Init>
  MX_TIM1_Init();
 80015e4:	f000 f9f2 	bl	80019cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80015e8:	f000 fa84 	bl	8001af4 <MX_TIM2_Init>
  MX_DAC1_Init();
 80015ec:	f000 f9a8 	bl	8001940 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80015f0:	f001 fcda 	bl	8002fa8 <setup>

  HAL_TIM_PWM_Init(&htim1);	//Inizializzazione PWM H-Bridge Attuatore Lineare
 80015f4:	4829      	ldr	r0, [pc, #164]	; (800169c <main+0xd8>)
 80015f6:	f006 fbf5 	bl	8007de4 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2); //Inizializzazione PWM Servo Motors
 80015fa:	4829      	ldr	r0, [pc, #164]	; (80016a0 <main+0xdc>)
 80015fc:	f006 fbf2 	bl	8007de4 <HAL_TIM_PWM_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);			//Start PWM + PWM_N H-Bridge Attuatore Lineare
 8001600:	2100      	movs	r1, #0
 8001602:	4826      	ldr	r0, [pc, #152]	; (800169c <main+0xd8>)
 8001604:	f006 fc46 	bl	8007e94 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001608:	2100      	movs	r1, #0
 800160a:	4824      	ldr	r0, [pc, #144]	; (800169c <main+0xd8>)
 800160c:	f007 fc46 	bl	8008e9c <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);			//Start PWM Servo Motors
 8001610:	2104      	movs	r1, #4
 8001612:	4823      	ldr	r0, [pc, #140]	; (80016a0 <main+0xdc>)
 8001614:	f006 fc3e 	bl	8007e94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001618:	2108      	movs	r1, #8
 800161a:	4821      	ldr	r0, [pc, #132]	; (80016a0 <main+0xdc>)
 800161c:	f006 fc3a 	bl	8007e94 <HAL_TIM_PWM_Start>

  HAL_ADC_Start(&hadc1);	//Start ADC
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <main+0xe0>)
 8001622:	f003 fde1 	bl	80051e8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <main+0xe4>)
 8001628:	f003 fdde 	bl	80051e8 <HAL_ADC_Start>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);						//Start DAC
 800162c:	2100      	movs	r1, #0
 800162e:	481f      	ldr	r0, [pc, #124]	; (80016ac <main+0xe8>)
 8001630:	f004 fcd7 	bl	8005fe2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001634:	2110      	movs	r1, #16
 8001636:	481d      	ldr	r0, [pc, #116]	; (80016ac <main+0xe8>)
 8001638:	f004 fcd3 	bl	8005fe2 <HAL_DAC_Start>

  InitSystem();		//Inizializzazione Variabili di controllo e abilitazione modulazione PWM H-Bridge Attuatore Lineare
 800163c:	f003 f84a 	bl	80046d4 <InitSystem>

  HAL_TIM_Base_Start_IT(&htim1);	//Start Update Interrupt TIM1
 8001640:	4816      	ldr	r0, [pc, #88]	; (800169c <main+0xd8>)
 8001642:	f006 fb65 	bl	8007d10 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 8001646:	f001 fca5 	bl	8002f94 <loop>
    /* USER CODE END WHILE */
    if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_15))
 800164a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f005 fb23 	bl	8006c9c <HAL_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00f      	beq.n	800167c <main+0xb8>
    {
    	if(pwm_flag == 0){
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <main+0xec>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <main+0x82>
			pwm_flag = 1;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <main+0xec>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);			//Stop PWM + PWM_N H-Bridge Attuatore Lineare
 800166a:	2100      	movs	r1, #0
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <main+0xd8>)
 800166e:	f006 fd11 	bl	8008094 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001672:	2100      	movs	r1, #0
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <main+0xd8>)
 8001676:	f007 fcc5 	bl	8009004 <HAL_TIMEx_PWMN_Stop>
 800167a:	e7e4      	b.n	8001646 <main+0x82>
    	}
    }
    else
    {
    	if(pwm_flag == 1){
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <main+0xec>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d1e0      	bne.n	8001646 <main+0x82>
    		pwm_flag = 0;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <main+0xec>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
    		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);			//Start PWM + PWM_N H-Bridge Attuatore Lineare
 800168a:	2100      	movs	r1, #0
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <main+0xd8>)
 800168e:	f006 fc01 	bl	8007e94 <HAL_TIM_PWM_Start>
    		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001692:	2100      	movs	r1, #0
 8001694:	4801      	ldr	r0, [pc, #4]	; (800169c <main+0xd8>)
 8001696:	f007 fc01 	bl	8008e9c <HAL_TIMEx_PWMN_Start>
	loop();
 800169a:	e7d4      	b.n	8001646 <main+0x82>
 800169c:	20000cbc 	.word	0x20000cbc
 80016a0:	20000d08 	.word	0x20000d08
 80016a4:	20000bf0 	.word	0x20000bf0
 80016a8:	20000b84 	.word	0x20000b84
 80016ac:	20000b70 	.word	0x20000b70
 80016b0:	200000a4 	.word	0x200000a4

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0a4      	sub	sp, #144	; 0x90
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016be:	2238      	movs	r2, #56	; 0x38
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f009 f85c 	bl	800a780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2244      	movs	r2, #68	; 0x44
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f009 f84e 	bl	800a780 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f005 fb3b 	bl	8006d60 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ea:	2302      	movs	r3, #2
 80016ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f8:	2302      	movs	r3, #2
 80016fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016fc:	2302      	movs	r3, #2
 80016fe:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001700:	2304      	movs	r3, #4
 8001702:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001704:	2355      	movs	r3, #85	; 0x55
 8001706:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001720:	4618      	mov	r0, r3
 8001722:	f005 fbd1 	bl	8006ec8 <HAL_RCC_OscConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800172c:	f000 fb44 	bl	8001db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001730:	230f      	movs	r3, #15
 8001732:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001734:	2303      	movs	r3, #3
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800173c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001740:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001742:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001746:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001748:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800174c:	2104      	movs	r1, #4
 800174e:	4618      	mov	r0, r3
 8001750:	f005 fed2 	bl	80074f8 <HAL_RCC_ClockConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800175a:	f000 fb2d 	bl	8001db8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 800175e:	f248 0302 	movw	r3, #32770	; 0x8002
 8001762:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001764:	2304      	movs	r3, #4
 8001766:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001768:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800176c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	4618      	mov	r0, r3
 8001772:	f006 f8dd 	bl	8007930 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800177c:	f000 fb1c 	bl	8001db8 <Error_Handler>
  }
}
 8001780:	bf00      	nop
 8001782:	3790      	adds	r7, #144	; 0x90
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2220      	movs	r2, #32
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f008 ffed 	bl	800a780 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a6:	4b34      	ldr	r3, [pc, #208]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80017b6:	4b30      	ldr	r3, [pc, #192]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_ADC1_Init+0xf0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_ADC1_Init+0xf0>)
 8001804:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001808:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_ADC1_Init+0xf0>)
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001812:	4819      	ldr	r0, [pc, #100]	; (8001878 <MX_ADC1_Init+0xf0>)
 8001814:	f003 fb60 	bl	8004ed8 <HAL_ADC_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800181e:	f000 facb 	bl	8001db8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001822:	2306      	movs	r3, #6
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001826:	2300      	movs	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	4810      	ldr	r0, [pc, #64]	; (8001878 <MX_ADC1_Init+0xf0>)
 8001836:	f004 fa03 	bl	8005c40 <HAL_ADCEx_MultiModeConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001840:	f000 faba 	bl	8001db8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <MX_ADC1_Init+0xf4>)
 8001846:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001848:	2306      	movs	r3, #6
 800184a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001850:	237f      	movs	r3, #127	; 0x7f
 8001852:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001854:	2304      	movs	r3, #4
 8001856:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_ADC1_Init+0xf0>)
 8001862:	f003 fd7d 	bl	8005360 <HAL_ADC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800186c:	f000 faa4 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3730      	adds	r7, #48	; 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000bf0 	.word	0x20000bf0
 800187c:	1d500080 	.word	0x1d500080

08001880 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001886:	463b      	mov	r3, r7
 8001888:	2220      	movs	r2, #32
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f008 ff77 	bl	800a780 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <MX_ADC2_Init+0xb4>)
 8001894:	4a28      	ldr	r2, [pc, #160]	; (8001938 <MX_ADC2_Init+0xb8>)
 8001896:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <MX_ADC2_Init+0xb4>)
 800189a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800189e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018a2:	2208      	movs	r2, #8
 80018a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018ba:	2204      	movs	r2, #4
 80018bc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018f0:	4810      	ldr	r0, [pc, #64]	; (8001934 <MX_ADC2_Init+0xb4>)
 80018f2:	f003 faf1 	bl	8004ed8 <HAL_ADC_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80018fc:	f000 fa5c 	bl	8001db8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_ADC2_Init+0xbc>)
 8001902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001904:	2306      	movs	r3, #6
 8001906:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800190c:	237f      	movs	r3, #127	; 0x7f
 800190e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001910:	2304      	movs	r3, #4
 8001912:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_ADC2_Init+0xb4>)
 800191e:	f003 fd1f 	bl	8005360 <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001928:	f000 fa46 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000b84 	.word	0x20000b84
 8001938:	50000100 	.word	0x50000100
 800193c:	08600004 	.word	0x08600004

08001940 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001946:	463b      	mov	r3, r7
 8001948:	2230      	movs	r2, #48	; 0x30
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f008 ff17 	bl	800a780 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <MX_DAC1_Init+0x84>)
 8001954:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <MX_DAC1_Init+0x88>)
 8001956:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001958:	481a      	ldr	r0, [pc, #104]	; (80019c4 <MX_DAC1_Init+0x84>)
 800195a:	f004 fb20 	bl	8005f9e <HAL_DAC_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001964:	f000 fa28 	bl	8001db8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001968:	2302      	movs	r3, #2
 800196a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001984:	2301      	movs	r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	480c      	ldr	r0, [pc, #48]	; (80019c4 <MX_DAC1_Init+0x84>)
 8001994:	f004 fb78 	bl	8006088 <HAL_DAC_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800199e:	f000 fa0b 	bl	8001db8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80019a6:	463b      	mov	r3, r7
 80019a8:	2210      	movs	r2, #16
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_DAC1_Init+0x84>)
 80019ae:	f004 fb6b 	bl	8006088 <HAL_DAC_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_DAC1_Init+0x7c>
  {
    Error_Handler();
 80019b8:	f000 f9fe 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3730      	adds	r7, #48	; 0x30
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000b70 	.word	0x20000b70
 80019c8:	50000800 	.word	0x50000800

080019cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b098      	sub	sp, #96	; 0x60
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	615a      	str	r2, [r3, #20]
 80019f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2234      	movs	r2, #52	; 0x34
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f008 fec1 	bl	800a780 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a00:	4a3b      	ldr	r2, [pc, #236]	; (8001af0 <MX_TIM1_Init+0x124>)
 8001a02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a04:	4b39      	ldr	r3, [pc, #228]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001a10:	4b36      	ldr	r3, [pc, #216]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a12:	f242 1233 	movw	r2, #8499	; 0x2133
 8001a16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b34      	ldr	r3, [pc, #208]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a1e:	4b33      	ldr	r3, [pc, #204]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a2a:	4830      	ldr	r0, [pc, #192]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a2c:	f006 f9da 	bl	8007de4 <HAL_TIM_PWM_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a36:	f000 f9bf 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4827      	ldr	r0, [pc, #156]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a4e:	f007 fb37 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a58:	f000 f9ae 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5c:	2360      	movs	r3, #96	; 0x60
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a64:	2300      	movs	r3, #0
 8001a66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481a      	ldr	r0, [pc, #104]	; (8001aec <MX_TIM1_Init+0x120>)
 8001a82:	f006 fd1d 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a8c:	f000 f994 	bl	8001db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8001a9c:	2332      	movs	r3, #50	; 0x32
 8001a9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <MX_TIM1_Init+0x120>)
 8001ace:	f007 fb79 	bl	80091c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001ad8:	f000 f96e 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <MX_TIM1_Init+0x120>)
 8001ade:	f002 fad1 	bl	8004084 <HAL_TIM_MspPostInit>

}
 8001ae2:	bf00      	nop
 8001ae4:	3760      	adds	r7, #96	; 0x60
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000cbc 	.word	0x20000cbc
 8001af0:	40012c00 	.word	0x40012c00

08001af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b06:	463b      	mov	r3, r7
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1699;
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001b22:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001b26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001b30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b42:	481f      	ldr	r0, [pc, #124]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001b44:	f006 f94e 	bl	8007de4 <HAL_TIM_PWM_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001b4e:	f000 f933 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4817      	ldr	r0, [pc, #92]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001b62:	f007 faad 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001b6c:	f000 f924 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b70:	2360      	movs	r3, #96	; 0x60
 8001b72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	2204      	movs	r2, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	480e      	ldr	r0, [pc, #56]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001b88:	f006 fc9a 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001b92:	f000 f911 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001ba2:	f006 fc8d 	bl	80084c0 <HAL_TIM_PWM_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001bac:	f000 f904 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <MX_TIM2_Init+0xcc>)
 8001bb2:	f002 fa67 	bl	8004084 <HAL_TIM_MspPostInit>

}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	; 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000d08 	.word	0x20000d08

08001bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bca:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <MX_USART2_UART_Init+0x94>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c0e:	f007 fbe4 	bl	80093da <HAL_UART_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c18:	f000 f8ce 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c20:	f008 fc75 	bl	800a50e <HAL_UARTEx_SetTxFifoThreshold>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c2a:	f000 f8c5 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4808      	ldr	r0, [pc, #32]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c32:	f008 fcaa 	bl	800a58a <HAL_UARTEx_SetRxFifoThreshold>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c3c:	f000 f8bc 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_USART2_UART_Init+0x90>)
 8001c42:	f008 fc2b 	bl	800a49c <HAL_UARTEx_DisableFifoMode>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c4c:	f000 f8b4 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000d54 	.word	0x20000d54
 8001c58:	40004400 	.word	0x40004400

08001c5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <MX_DMA_Init+0x60>)
 8001c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c66:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <MX_DMA_Init+0x60>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6493      	str	r3, [r2, #72]	; 0x48
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_DMA_Init+0x60>)
 8001c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_DMA_Init+0x60>)
 8001c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <MX_DMA_Init+0x60>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6493      	str	r3, [r2, #72]	; 0x48
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <MX_DMA_Init+0x60>)
 8001c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	200b      	movs	r0, #11
 8001c98:	f004 f94d 	bl	8005f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c9c:	200b      	movs	r0, #11
 8001c9e:	f004 f964 	bl	8005f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	200c      	movs	r0, #12
 8001ca8:	f004 f945 	bl	8005f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001cac:	200c      	movs	r0, #12
 8001cae:	f004 f95c 	bl	8005f6a <HAL_NVIC_EnableIRQ>

}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <MX_GPIO_Init+0xc4>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <MX_GPIO_Init+0xc4>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce2:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <MX_GPIO_Init+0xc4>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <MX_GPIO_Init+0xc4>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <MX_GPIO_Init+0xc4>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <MX_GPIO_Init+0xc4>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <MX_GPIO_Init+0xc4>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <MX_GPIO_Init+0xc4>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <MX_GPIO_Init+0xc4>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_B_Pin|EN_A_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2111      	movs	r1, #17
 8001d22:	4819      	ldr	r0, [pc, #100]	; (8001d88 <MX_GPIO_Init+0xc8>)
 8001d24:	f004 ffd2 	bl	8006ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_GPIO_Init+0xcc>)
 8001d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4814      	ldr	r0, [pc, #80]	; (8001d90 <MX_GPIO_Init+0xd0>)
 8001d3e:	f004 fe2b 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_B_Pin EN_A_Pin */
  GPIO_InitStruct.Pin = EN_B_Pin|EN_A_Pin;
 8001d42:	2311      	movs	r3, #17
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <MX_GPIO_Init+0xc8>)
 8001d5a:	f004 fe1d 	bl	8006998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4619      	mov	r1, r3
 8001d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d76:	f004 fe0f 	bl	8006998 <HAL_GPIO_Init>

}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	10110000 	.word	0x10110000
 8001d90:	48000800 	.word	0x48000800

08001d94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da4:	d104      	bne.n	8001db0 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    /* Toggle LED2 */
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001da6:	2120      	movs	r1, #32
 8001da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dac:	f004 ffa6 	bl	8006cfc <HAL_GPIO_TogglePin>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <_ZN3ros3MsgC1Ev+0x1c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	0800ad14 	.word	0x0800ad14

08001e08 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
      data()
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ffe8 	bl	8001de8 <_ZN3ros3MsgC1Ev>
 8001e18:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff ffcf 	bl	8001dc6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	0800acfc 	.word	0x0800acfc

08001e38 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	b2ca      	uxtb	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0a19      	lsrs	r1, r3, #8
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	b2ca      	uxtb	r2, r1
 8001e64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	0c19      	lsrs	r1, r3, #16
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3302      	adds	r3, #2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	b2ca      	uxtb	r2, r1
 8001e76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	0e19      	lsrs	r1, r3, #24
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3303      	adds	r3, #3
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	b2ca      	uxtb	r2, r1
 8001e88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a19      	lsrs	r1, r3, #8
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	b2ca      	uxtb	r2, r1
 8001eae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	0c19      	lsrs	r1, r3, #16
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b2ca      	uxtb	r2, r1
 8001ec0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0e19      	lsrs	r1, r3, #24
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3303      	adds	r3, #3
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	b2ca      	uxtb	r2, r1
 8001ed2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001eda:	68fb      	ldr	r3, [r7, #12]
    }
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	440b      	add	r3, r1
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3302      	adds	r3, #2
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	440b      	add	r3, r1
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3303      	adds	r3, #3
 8001f38:	6839      	ldr	r1, [r7, #0]
 8001f3a:	440b      	add	r3, r1
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	061b      	lsls	r3, r3, #24
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	440b      	add	r3, r1
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3302      	adds	r3, #2
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	440b      	add	r3, r1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3303      	adds	r3, #3
 8001f8e:	6839      	ldr	r1, [r7, #0]
 8001f90:	440b      	add	r3, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
     return offset;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    }
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	0800aa2c 	.word	0x0800aa2c

08001fcc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	0800aa3c 	.word	0x0800aa3c

08001fe8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fef8 	bl	8001de8 <_ZN3ros3MsgC1Ev>
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	809a      	strh	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a06      	ldr	r2, [pc, #24]	; (800202c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002014:	611a      	str	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
    {
    }
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	0800ace4 	.word	0x0800ace4
 800202c:	0800aa60 	.word	0x0800aa60

08002030 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	8899      	ldrh	r1, [r3, #4]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	889b      	ldrh	r3, [r3, #4]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b299      	uxth	r1, r3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4413      	add	r3, r2
 800205c:	b2ca      	uxtb	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3302      	adds	r3, #2
 8002064:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe f8d4 	bl	8000218 <strlen>
 8002070:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	69b9      	ldr	r1, [r7, #24]
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f82a 	bl	80030d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3304      	adds	r3, #4
 8002084:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	18d0      	adds	r0, r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4619      	mov	r1, r3
 8002094:	f008 fb66 	bl	800a764 <memcpy>
      offset += length_topic_name;
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4413      	add	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe f8b7 	bl	8000218 <strlen>
 80020aa:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	6979      	ldr	r1, [r7, #20]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 f80d 	bl	80030d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	18d0      	adds	r0, r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4619      	mov	r1, r3
 80020ce:	f008 fb49 	bl	800a764 <memcpy>
      offset += length_message_type;
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	4413      	add	r3, r2
 80020d8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f89a 	bl	8000218 <strlen>
 80020e4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	6939      	ldr	r1, [r7, #16]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fff0 	bl	80030d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3304      	adds	r3, #4
 80020f8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	18d0      	adds	r0, r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4619      	mov	r1, r3
 8002108:	f008 fb2c 	bl	800a764 <memcpy>
      offset += length_md5sum;
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	4413      	add	r3, r2
 8002122:	b2ca      	uxtb	r2, r1
 8002124:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	0a19      	lsrs	r1, r3, #8
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	4413      	add	r3, r2
 8002132:	b2ca      	uxtb	r2, r1
 8002134:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	0c19      	lsrs	r1, r3, #16
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3302      	adds	r3, #2
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	4413      	add	r3, r2
 8002142:	b2ca      	uxtb	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0e19      	lsrs	r1, r3, #24
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3303      	adds	r3, #3
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	4413      	add	r3, r2
 8002152:	b2ca      	uxtb	r2, r1
 8002154:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3304      	adds	r3, #4
 800215a:	61fb      	str	r3, [r7, #28]
      return offset;
 800215c:	69fb      	ldr	r3, [r7, #28]
    }
 800215e:	4618      	mov	r0, r3
 8002160:	3720      	adds	r7, #32
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002166:	b580      	push	{r7, lr}
 8002168:	b08a      	sub	sp, #40	; 0x28
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	889b      	ldrh	r3, [r3, #4]
 8002186:	b21a      	sxth	r2, r3
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	3301      	adds	r3, #1
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	440b      	add	r3, r1
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	b21b      	sxth	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b21b      	sxth	r3, r3
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	3302      	adds	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	441a      	add	r2, r3
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 ffac 	bl	8003110 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	3304      	adds	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4413      	add	r3, r2
 80021c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d20c      	bcs.n	80021e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	441a      	add	r2, r3
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	3b01      	subs	r3, #1
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	440b      	add	r3, r1
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	3301      	adds	r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	e7ec      	b.n	80021c2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4413      	add	r3, r2
 80021ee:	3b01      	subs	r3, #1
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	441a      	add	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	4413      	add	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	441a      	add	r2, r3
 8002212:	f107 0310 	add.w	r3, r7, #16
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f000 ff79 	bl	8003110 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	3304      	adds	r3, #4
 8002222:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	6a3a      	ldr	r2, [r7, #32]
 8002230:	429a      	cmp	r2, r3
 8002232:	d20c      	bcs.n	800224e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	441a      	add	r2, r3
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	3b01      	subs	r3, #1
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	440b      	add	r3, r1
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	3301      	adds	r3, #1
 800224a:	623b      	str	r3, [r7, #32]
 800224c:	e7ec      	b.n	8002228 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	3b01      	subs	r3, #1
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	4413      	add	r3, r2
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	3b01      	subs	r3, #1
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	441a      	add	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	441a      	add	r2, r3
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f000 ff46 	bl	8003110 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	3304      	adds	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	429a      	cmp	r2, r3
 8002298:	d20c      	bcs.n	80022b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	441a      	add	r2, r3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	440b      	add	r3, r1
 80022a8:	7812      	ldrb	r2, [r2, #0]
 80022aa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e7ec      	b.n	800228e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4413      	add	r3, r2
 80022ba:	3b01      	subs	r3, #1
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	441a      	add	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4413      	add	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	440a      	add	r2, r1
 80022e4:	7812      	ldrb	r2, [r2, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	3301      	adds	r3, #1
 80022f0:	6839      	ldr	r1, [r7, #0]
 80022f2:	440b      	add	r3, r1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	3302      	adds	r3, #2
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	440b      	add	r3, r1
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	4313      	orrs	r3, r2
 800230c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	3303      	adds	r3, #3
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	440b      	add	r3, r1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	061b      	lsls	r3, r3, #24
 800231c:	4313      	orrs	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	3304      	adds	r3, #4
 800232a:	61bb      	str	r3, [r7, #24]
     return offset;
 800232c:	69bb      	ldr	r3, [r7, #24]
    }
 800232e:	4618      	mov	r0, r3
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	0800aa64 	.word	0x0800aa64

08002354 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	0800aa80 	.word	0x0800aa80

08002370 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fd34 	bl	8001de8 <_ZN3ros3MsgC1Ev>
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	711a      	strb	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002390:	609a      	str	r2, [r3, #8]
    {
    }
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	0800accc 	.word	0x0800accc
 80023a0:	0800aa60 	.word	0x0800aa60

080023a4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	7912      	ldrb	r2, [r2, #4]
 80023bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3301      	adds	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fd ff25 	bl	8000218 <strlen>
 80023ce:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fe7b 	bl	80030d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3304      	adds	r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	18d0      	adds	r0, r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f008 f9b7 	bl	800a764 <memcpy>
      offset += length_msg;
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4413      	add	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
      return offset;
 80023fe:	68fb      	ldr	r3, [r7, #12]
    }
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	4413      	add	r3, r2
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	3301      	adds	r3, #1
 8002426:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	441a      	add	r2, r3
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fe6b 	bl	8003110 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	3304      	adds	r3, #4
 800243e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	d20c      	bcs.n	800246a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	441a      	add	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3b01      	subs	r3, #1
 800245a:	6839      	ldr	r1, [r7, #0]
 800245c:	440b      	add	r3, r1
 800245e:	7812      	ldrb	r2, [r2, #0]
 8002460:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e7ec      	b.n	8002444 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	3b01      	subs	r3, #1
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	4413      	add	r3, r2
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	3b01      	subs	r3, #1
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
     return offset;
 800248e:	693b      	ldr	r3, [r7, #16]
    }
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	0800aaa4 	.word	0x0800aaa4

080024b4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	0800aab8 	.word	0x0800aab8

080024d0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fc84 	bl	8001de8 <_ZN3ros3MsgC1Ev>
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	0800acb4 	.word	0x0800acb4

08002518 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	b2ca      	uxtb	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	0a19      	lsrs	r1, r3, #8
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	3301      	adds	r3, #1
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	4413      	add	r3, r2
 8002542:	b2ca      	uxtb	r2, r1
 8002544:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0c19      	lsrs	r1, r3, #16
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	3302      	adds	r3, #2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	4413      	add	r3, r2
 8002554:	b2ca      	uxtb	r2, r1
 8002556:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	0e19      	lsrs	r1, r3, #24
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	3303      	adds	r3, #3
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	b2ca      	uxtb	r2, r1
 8002568:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	3304      	adds	r3, #4
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002570:	2300      	movs	r3, #0
 8002572:	623b      	str	r3, [r7, #32]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	6a3a      	ldr	r2, [r7, #32]
 800257a:	429a      	cmp	r2, r3
 800257c:	d22b      	bcs.n	80025d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800258c:	6939      	ldr	r1, [r7, #16]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4413      	add	r3, r2
 8002594:	b2ca      	uxtb	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	0a19      	lsrs	r1, r3, #8
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3301      	adds	r3, #1
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	b2ca      	uxtb	r2, r1
 80025a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	0c19      	lsrs	r1, r3, #16
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	3302      	adds	r3, #2
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	b2ca      	uxtb	r2, r1
 80025b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	0e19      	lsrs	r1, r3, #24
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	3303      	adds	r3, #3
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	b2ca      	uxtb	r2, r1
 80025c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	3304      	adds	r3, #4
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	3301      	adds	r3, #1
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	e7ce      	b.n	8002574 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6919      	ldr	r1, [r3, #16]
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	b2ca      	uxtb	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	0a19      	lsrs	r1, r3, #8
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	3301      	adds	r3, #1
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	b2ca      	uxtb	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	0c19      	lsrs	r1, r3, #16
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	3302      	adds	r3, #2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	4413      	add	r3, r2
 8002604:	b2ca      	uxtb	r2, r1
 8002606:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	0e19      	lsrs	r1, r3, #24
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	3303      	adds	r3, #3
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	b2ca      	uxtb	r2, r1
 8002618:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	3304      	adds	r3, #4
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	429a      	cmp	r2, r3
 800262c:	d22b      	bcs.n	8002686 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	b2ca      	uxtb	r2, r1
 8002646:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	0a19      	lsrs	r1, r3, #8
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	3301      	adds	r3, #1
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	4413      	add	r3, r2
 8002654:	b2ca      	uxtb	r2, r1
 8002656:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	0c19      	lsrs	r1, r3, #16
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	3302      	adds	r3, #2
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	4413      	add	r3, r2
 8002664:	b2ca      	uxtb	r2, r1
 8002666:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	0e19      	lsrs	r1, r3, #24
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	3303      	adds	r3, #3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	4413      	add	r3, r2
 8002674:	b2ca      	uxtb	r2, r1
 8002676:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	3304      	adds	r3, #4
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3301      	adds	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	e7ce      	b.n	8002624 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69d9      	ldr	r1, [r3, #28]
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	b2ca      	uxtb	r2, r1
 8002692:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	0a19      	lsrs	r1, r3, #8
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	3301      	adds	r3, #1
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	4413      	add	r3, r2
 80026a2:	b2ca      	uxtb	r2, r1
 80026a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	0c19      	lsrs	r1, r3, #16
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	3302      	adds	r3, #2
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	b2ca      	uxtb	r2, r1
 80026b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	0e19      	lsrs	r1, r3, #24
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	3303      	adds	r3, #3
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	4413      	add	r3, r2
 80026c6:	b2ca      	uxtb	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	3304      	adds	r3, #4
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d228      	bcs.n	8002730 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fd fd94 	bl	8000218 <strlen>
 80026f0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	6979      	ldr	r1, [r7, #20]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fcea 	bl	80030d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	3304      	adds	r3, #4
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	18d0      	adds	r0, r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4619      	mov	r1, r3
 800271c:	f008 f822 	bl	800a764 <memcpy>
      offset += length_stringsi;
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	4413      	add	r3, r2
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	3301      	adds	r3, #1
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e7d1      	b.n	80026d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002732:	4618      	mov	r0, r3
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800273a:	b580      	push	{r7, lr}
 800273c:	b08e      	sub	sp, #56	; 0x38
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002754:	3301      	adds	r3, #1
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	4413      	add	r3, r2
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	6a3a      	ldr	r2, [r7, #32]
 8002760:	4313      	orrs	r3, r2
 8002762:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	3302      	adds	r3, #2
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4413      	add	r3, r2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	4313      	orrs	r3, r2
 8002774:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002778:	3303      	adds	r3, #3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	4313      	orrs	r3, r2
 8002786:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	3304      	adds	r3, #4
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	6a3a      	ldr	r2, [r7, #32]
 8002794:	429a      	cmp	r2, r3
 8002796:	d90a      	bls.n	80027ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4619      	mov	r1, r3
 80027a2:	4610      	mov	r0, r2
 80027a4:	f007 fff4 	bl	800a790 <realloc>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a3a      	ldr	r2, [r7, #32]
 80027b2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80027b4:	2300      	movs	r3, #0
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027be:	429a      	cmp	r2, r3
 80027c0:	d236      	bcs.n	8002830 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ca:	6839      	ldr	r1, [r7, #0]
 80027cc:	440a      	add	r2, r1
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	3301      	adds	r3, #1
 80027da:	6839      	ldr	r1, [r7, #0]
 80027dc:	440b      	add	r3, r1
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	3302      	adds	r3, #2
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	440b      	add	r3, r1
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	3303      	adds	r3, #3
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	440b      	add	r3, r1
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002812:	3304      	adds	r3, #4
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	3301      	adds	r3, #1
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
 800282e:	e7c3      	b.n	80027b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283c:	3301      	adds	r3, #1
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	4313      	orrs	r3, r2
 800284a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284e:	3302      	adds	r3, #2
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	4313      	orrs	r3, r2
 800285c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	3303      	adds	r3, #3
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	4413      	add	r3, r2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	4313      	orrs	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	3304      	adds	r3, #4
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	429a      	cmp	r2, r3
 800287e:	d90a      	bls.n	8002896 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f007 ff80 	bl	800a790 <realloc>
 8002890:	4602      	mov	r2, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d236      	bcs.n	8002918 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	440a      	add	r2, r1
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c0:	3301      	adds	r3, #1
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	440b      	add	r3, r1
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d2:	3302      	adds	r3, #2
 80028d4:	6839      	ldr	r1, [r7, #0]
 80028d6:	440b      	add	r3, r1
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	3303      	adds	r3, #3
 80028e6:	6839      	ldr	r1, [r7, #0]
 80028e8:	440b      	add	r3, r1
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80028f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fa:	3304      	adds	r3, #4
 80028fc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	3214      	adds	r2, #20
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	3301      	adds	r3, #1
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002916:	e7c3      	b.n	80028a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	4413      	add	r3, r2
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	3301      	adds	r3, #1
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	4413      	add	r3, r2
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002936:	3302      	adds	r3, #2
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4413      	add	r3, r2
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	3303      	adds	r3, #3
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295a:	3304      	adds	r3, #4
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	429a      	cmp	r2, r3
 8002966:	d90a      	bls.n	800297e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f007 ff0c 	bl	800a790 <realloc>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298e:	429a      	cmp	r2, r3
 8002990:	d23f      	bcs.n	8002a12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	441a      	add	r2, r3
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fbb6 	bl	8003110 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a6:	3304      	adds	r3, #4
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d20c      	bcs.n	80029d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	441a      	add	r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	440b      	add	r3, r1
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	3301      	adds	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	e7ec      	b.n	80029ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80029d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	3b01      	subs	r3, #1
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80029e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e6:	3b01      	subs	r3, #1
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	441a      	add	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80029f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	3220      	adds	r2, #32
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a10:	e7ba      	b.n	8002988 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002a14:	4618      	mov	r0, r3
 8002a16:	3738      	adds	r7, #56	; 0x38
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	0800abf0 	.word	0x0800abf0

08002a38 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	0800aadc 	.word	0x0800aadc

08002a54 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	611a      	str	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68d8      	ldr	r0, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6891      	ldr	r1, [r2, #8]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	4798      	blx	r3
 8002aa0:	4603      	mov	r3, r0
  };
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
  }
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <_ZN13STM32HardwareC1Ev+0x34>)
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	20000d54 	.word	0x20000d54

08002b20 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f804 	bl	8002b36 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f006 fd16 	bl	800957c <HAL_UART_Receive_DMA>
    }
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b64:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ffa8 	bl	8002ac2 <_ZN13STM32Hardware10getRdmaIndEv>
 8002b72:	4603      	mov	r3, r0
 8002b74:	429c      	cmp	r4, r3
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b88:	1c59      	adds	r1, r3, #1
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	791b      	ldrb	r3, [r3, #4]
 8002b96:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    }
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
	...

08002bb4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d108      	bne.n	8002bda <_ZN13STM32Hardware5flushEv+0x26>
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	f083 0301 	eor.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <_ZN13STM32Hardware5flushEv+0x26>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <_ZN13STM32Hardware5flushEv+0x28>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d03f      	beq.n	8002c60 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d031      	beq.n	8002c5a <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d20a      	bcs.n	8002c1c <_ZN13STM32Hardware5flushEv+0x68>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	e006      	b.n	8002c2a <_ZN13STM32Hardware5flushEv+0x76>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	89fa      	ldrh	r2, [r7, #14]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f006 fc1b 	bl	800947c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002c5a:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	200000a8 	.word	0x200000a8

08002c6c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
      int n = length;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c82:	bfa8      	it	ge
 8002c84:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002c88:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002c90:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4293      	cmp	r3, r2
 8002c98:	bf28      	it	cs
 8002c9a:	4613      	movcs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ca4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f007 fd57 	bl	800a764 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d00b      	beq.n	8002cea <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	18d1      	adds	r1, r2, r3
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f007 fd3d 	bl	800a764 <memcpy>
      }

      flush();
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff ff62 	bl	8002bb4 <_ZN13STM32Hardware5flushEv>
    }
 8002cf0:	bf00      	nop
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	f001 feb0 	bl	8004a64 <HAL_GetTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
      data(0)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f864 	bl	8001de8 <_ZN3ros3MsgC1Ev>
 8002d20:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	809a      	strh	r2, [r3, #4]
    {
    }
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	0800ac70 	.word	0x0800ac70

08002d3c <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d50:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002d52:	8939      	ldrh	r1, [r7, #8]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	b2ca      	uxtb	r2, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002d5e:	893b      	ldrh	r3, [r7, #8]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	b299      	uxth	r1, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3301      	adds	r3, #1
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b2ca      	uxtb	r2, r1
 8002d6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3302      	adds	r3, #2
 8002d74:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d76:	68fb      	ldr	r3, [r7, #12]
    }
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d96:	893a      	ldrh	r2, [r7, #8]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	440b      	add	r3, r1
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	4313      	orrs	r3, r2
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002da8:	893b      	ldrh	r3, [r7, #8]
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3301      	adds	r3, #1
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	440b      	add	r3, r1
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002dc2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3302      	adds	r3, #2
 8002dce:	60fb      	str	r3, [r7, #12]
     return offset;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    }
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <_ZN8std_msgs5Int167getTypeEv>:

    const char * getType(){ return "std_msgs/Int16"; };
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	0800ab00 	.word	0x0800ab00

08002dfc <_ZN8std_msgs5Int166getMD5Ev>:
    const char * getMD5(){ return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	0800ab10 	.word	0x0800ab10

08002e18 <_ZN11coorsa_rfsm14SetpointUpdateC1Ev>:
      typedef int8_t _LIM_type;
      _LIM_type LIM;
      typedef float _value_type;
      _value_type value;

    SetpointUpdate():
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
      LIM(0),
      value(0)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe ffe0 	bl	8001de8 <_ZN3ros3MsgC1Ev>
 8002e28:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <_ZN11coorsa_rfsm14SetpointUpdateC1Ev+0x30>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	711a      	strb	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
    {
    }
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	0800ac58 	.word	0x0800ac58

08002e4c <_ZNK11coorsa_rfsm14SetpointUpdate9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_LIM;
      u_LIM.real = this->LIM;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002e60:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_LIM.base >> (8 * 0)) & 0xFF;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	7c3a      	ldrb	r2, [r7, #16]
 8002e6a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->LIM);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_value;
      u_value.real = this->value;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_value.base >> (8 * 0)) & 0xFF;
 8002e78:	68f9      	ldr	r1, [r7, #12]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	b2ca      	uxtb	r2, r1
 8002e82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_value.base >> (8 * 1)) & 0xFF;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	0a19      	lsrs	r1, r3, #8
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	b2ca      	uxtb	r2, r1
 8002e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_value.base >> (8 * 2)) & 0xFF;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	0c19      	lsrs	r1, r3, #16
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b2ca      	uxtb	r2, r1
 8002ea2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_value.base >> (8 * 3)) & 0xFF;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	0e19      	lsrs	r1, r3, #24
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	3303      	adds	r3, #3
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	b2ca      	uxtb	r2, r1
 8002eb2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->value);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]
      return offset;
 8002eba:	697b      	ldr	r3, [r7, #20]
    }
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN11coorsa_rfsm14SetpointUpdate11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
      union {
        int8_t real;
        uint8_t base;
      } u_LIM;
      u_LIM.base = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	743b      	strb	r3, [r7, #16]
      u_LIM.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eda:	7c3a      	ldrb	r2, [r7, #16]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	440b      	add	r3, r1
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	743b      	strb	r3, [r7, #16]
      this->LIM = u_LIM.real;
 8002eea:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->LIM);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
      union {
        float real;
        uint32_t base;
      } u_value;
      u_value.base = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	440a      	add	r2, r1
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	6839      	ldr	r1, [r7, #0]
 8002f12:	440b      	add	r3, r1
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3302      	adds	r3, #2
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	440b      	add	r3, r1
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
      u_value.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3303      	adds	r3, #3
 8002f34:	6839      	ldr	r1, [r7, #0]
 8002f36:	440b      	add	r3, r1
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	061b      	lsls	r3, r3, #24
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
      this->value = u_value.real;
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->value);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	617b      	str	r3, [r7, #20]
     return offset;
 8002f4c:	697b      	ldr	r3, [r7, #20]
    }
 8002f4e:	4618      	mov	r0, r3
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <_ZN11coorsa_rfsm14SetpointUpdate7getTypeEv>:

    const char * getType(){ return "coorsa_rfsm/SetpointUpdate"; };
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <_ZN11coorsa_rfsm14SetpointUpdate7getTypeEv+0x18>)
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	0800ab34 	.word	0x0800ab34

08002f78 <_ZN11coorsa_rfsm14SetpointUpdate6getMD5Ev>:
    const char * getMD5(){ return "a5435513701bc6bab9ada8288fb59da4"; };
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <_ZN11coorsa_rfsm14SetpointUpdate6getMD5Ev+0x18>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	0800ab50 	.word	0x0800ab50

08002f94 <loop>:

int i,state;


void loop(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <loop+0x10>)
 8002f9a:	f000 f9c7 	bl	800332c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	//HAL_Delay(500);				//Aspetto 0.5s
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200000d4 	.word	0x200000d4

08002fa8 <setup>:

void setup(void){
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	WaitingForResult = 0;
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <setup+0x34>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
	state = 0;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <setup+0x38>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
	nh.initNode();			//Inizializzo il nodo
 8002fb8:	480a      	ldr	r0, [pc, #40]	; (8002fe4 <setup+0x3c>)
 8002fba:	f000 fb90 	bl	80036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);	//Pubblico su chatter
 8002fbe:	490a      	ldr	r1, [pc, #40]	; (8002fe8 <setup+0x40>)
 8002fc0:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <setup+0x3c>)
 8002fc2:	f000 fba9 	bl	8003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(sub);		//Sottoscrivo a command
 8002fc6:	4909      	ldr	r1, [pc, #36]	; (8002fec <setup+0x44>)
 8002fc8:	4806      	ldr	r0, [pc, #24]	; (8002fe4 <setup+0x3c>)
 8002fca:	f000 fbd5 	bl	8003778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>
	nh.subscribe(subsp);
 8002fce:	4908      	ldr	r1, [pc, #32]	; (8002ff0 <setup+0x48>)
 8002fd0:	4804      	ldr	r0, [pc, #16]	; (8002fe4 <setup+0x3c>)
 8002fd2:	f000 fbfc 	bl	80037ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_>
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200000b0 	.word	0x200000b0
 8002fe0:	20000a70 	.word	0x20000a70
 8002fe4:	200000d4 	.word	0x200000d4
 8002fe8:	20000a18 	.word	0x20000a18
 8002fec:	20000a2c 	.word	0x20000a2c
 8002ff0:	20000a48 	.word	0x20000a48

08002ff4 <sendMess>:


void sendMess(int mess){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	RosMess.data = mess;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	b21a      	sxth	r2, r3
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <sendMess+0x28>)
 8003002:	809a      	strh	r2, [r3, #4]

	chatter.publish(&RosMess);				//Lo pubblico sul chatter
 8003004:	4905      	ldr	r1, [pc, #20]	; (800301c <sendMess+0x28>)
 8003006:	4806      	ldr	r0, [pc, #24]	; (8003020 <sendMess+0x2c>)
 8003008:	f7ff fd3b 	bl	8002a82 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 800300c:	4805      	ldr	r0, [pc, #20]	; (8003024 <sendMess+0x30>)
 800300e:	f000 f98d 	bl	800332c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000a68 	.word	0x20000a68
 8003020:	20000a18 	.word	0x20000a18
 8003024:	200000d4 	.word	0x200000d4

08003028 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE>:

void SetpointUpdateHandler(const coorsa_rfsm::SetpointUpdate& msg){
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

	if(msg.value > 2.5f || msg.value < 0.1f) return;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	edd3 7a02 	vldr	s15, [r3, #8]
 8003036:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800303a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003042:	dc25      	bgt.n	8003090 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x68>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	edd3 7a02 	vldr	s15, [r3, #8]
 800304a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800309c <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x74>
 800304e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d41b      	bmi.n	8003090 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x68>

	if(msg.LIM == 0){
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x42>
		ControlPanel.MID_LIM_DOWN = msg.value;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x78>)
 8003068:	6193      	str	r3, [r2, #24]
	}
	if(msg.LIM == 1){
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d103      	bne.n	800307c <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x54>
		ControlPanel.MID_LIM_UP = msg.value;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x78>)
 800307a:	6153      	str	r3, [r2, #20]
	}
	if(msg.LIM == 2){
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d105      	bne.n	8003092 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x6a>
		ControlPanel.UP_LIM = msg.value;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4a05      	ldr	r2, [pc, #20]	; (80030a0 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x78>)
 800308c:	61d3      	str	r3, [r2, #28]
 800308e:	e000      	b.n	8003092 <_Z21SetpointUpdateHandlerRKN11coorsa_rfsm14SetpointUpdateE+0x6a>
	if(msg.value > 2.5f || msg.value < 0.1f) return;
 8003090:	bf00      	nop
	}
}
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	3dcccccd 	.word	0x3dcccccd
 80030a0:	200000b4 	.word	0x200000b4

080030a4 <_Z11cmdCallbackRKN8std_msgs5Int16E>:

void cmdCallback(const std_msgs::Int16& msg){	//Callback del subscriber
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

	WaitingForResult = 1;
 80030ac:	4b07      	ldr	r3, [pc, #28]	; (80030cc <_Z11cmdCallbackRKN8std_msgs5Int16E+0x28>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
	Mess = msg.data;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <_Z11cmdCallbackRKN8std_msgs5Int16E+0x2c>)
 80030bc:	601a      	str	r2, [r3, #0]
	//sendMess(msg.data);	//Giro il messaggio al chatter
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	200000b0 	.word	0x200000b0
 80030d0:	200000ac 	.word	0x200000ac

080030d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d80d      	bhi.n	8003104 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	fa22 f103 	lsr.w	r1, r2, r3
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	b2ca      	uxtb	r2, r1
 80030fa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3301      	adds	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e7ee      	b.n	80030e2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d811      	bhi.n	800314e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6839      	ldr	r1, [r7, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	440a      	add	r2, r1
 8003134:	7812      	ldrb	r2, [r2, #0]
 8003136:	4611      	mov	r1, r2
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	00d2      	lsls	r2, r2, #3
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3301      	adds	r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e7ea      	b.n	8003124 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	0800aca0 	.word	0x0800aca0

0800317c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ffe8 	bl	800315c <_ZN3ros15NodeHandleBase_C1Ev>
 800318c:	4a3a      	ldr	r2, [pc, #232]	; (8003278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3304      	adds	r3, #4
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fca6 	bl	8002ae8 <_ZN13STM32HardwareC1Ev>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f990 	bl	80024d0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b18      	cmp	r3, #24
 80031b8:	d80b      	bhi.n	80031d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	2200      	movs	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	3301      	adds	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e7f0      	b.n	80031b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b18      	cmp	r3, #24
 80031da:	d80a      	bhi.n	80031f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80031e4:	2100      	movs	r1, #0
 80031e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	3301      	adds	r3, #1
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	e7f1      	b.n	80031d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d20a      	bcs.n	8003214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e7f0      	b.n	80031f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321e:	d20a      	bcs.n	8003236 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4413      	add	r3, r2
 8003226:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3301      	adds	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	e7f0      	b.n	8003218 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800ac44 	.word	0x0800ac44

0800327c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	4a04      	ldr	r2, [pc, #16]	; (8003298 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	0800ac88 	.word	0x0800ac88

0800329c <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ffe5 	bl	800327c <_ZN3ros11Subscriber_C1Ev>
 80032b2:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei+0x44>)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	330c      	adds	r3, #12
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fd27 	bl	8002d10 <_ZN8std_msgs5Int16C1Ev>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	615a      	str	r2, [r3, #20]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
  };
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	0800ac2c 	.word	0x0800ac2c

080032e4 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ffc1 	bl	800327c <_ZN3ros11Subscriber_C1Ev>
 80032fa:	4a0b      	ldr	r2, [pc, #44]	; (8003328 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEC1EPKcPFvRKS2_Ei+0x44>)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	330c      	adds	r3, #12
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fd87 	bl	8002e18 <_ZN11coorsa_rfsm14SetpointUpdateC1Ev>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	61da      	str	r2, [r3, #28]
    topic_ = topic_name;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	609a      	str	r2, [r3, #8]
  };
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	0800ac14 	.word	0x0800ac14

0800332c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fcdd 	bl	8002cf8 <_ZN13STM32Hardware4timeEv>
 800333e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800334e:	4293      	cmp	r3, r2
 8003350:	d903      	bls.n	800335a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	429a      	cmp	r2, r3
 800336e:	d903      	bls.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800337e:	2b00      	cmp	r3, #0
 8003380:	d014      	beq.n	80033ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fcb6 	bl	8002cf8 <_ZN13STM32Hardware4timeEv>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad2      	subs	r2, r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003398:	429a      	cmp	r2, r3
 800339a:	bf8c      	ite	hi
 800339c:	2301      	movhi	r3, #1
 800339e:	2300      	movls	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 80033a6:	f06f 0301 	mvn.w	r3, #1
 80033aa:	e194      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      int data = hardware_.read();
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fbd1 	bl	8002b58 <_ZN13STM32Hardware4readEv>
 80033b6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f2c0 8174 	blt.w	80036a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
        break;
      checksum_ += data;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	441a      	add	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80033d6:	2b07      	cmp	r3, #7
 80033d8:	d11e      	bne.n	8003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80033e0:	1c59      	adds	r1, r3, #1
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	b2d1      	uxtb	r1, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	460a      	mov	r2, r1
 80033f2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1b4      	bne.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2208      	movs	r2, #8
 8003412:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003416:	e7af      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800341e:	2b00      	cmp	r3, #0
 8003420:	d128      	bne.n	8003474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2bff      	cmp	r3, #255	; 0xff
 8003426:	d10d      	bne.n	8003444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f103 0214 	add.w	r2, r3, #20
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003442:	e799      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fc55 	bl	8002cf8 <_ZN13STM32Hardware4timeEv>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f241 3288 	movw	r2, #5000	; 0x1388
 8003458:	4293      	cmp	r3, r2
 800345a:	bf8c      	ite	hi
 800345c:	2301      	movhi	r3, #1
 800345e:	2300      	movls	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d088      	beq.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800346e:	f06f 0301 	mvn.w	r3, #1
 8003472:	e130      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800347a:	2b01      	cmp	r3, #1
 800347c:	d118      	bne.n	80034b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2bfe      	cmp	r3, #254	; 0xfe
 8003482:	d107      	bne.n	8003494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003492:	e771      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f47f af68 	bne.w	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f9bb 	bl	8003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80034ae:	e763      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d113      	bne.n	80034e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80034e0:	e74a      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d110      	bne.n	800350e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	441a      	add	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800350c:	e734      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003514:	2b04      	cmp	r3, #4
 8003516:	d116      	bne.n	8003546 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800351e:	425a      	negs	r2, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	bf58      	it	pl
 8003526:	4253      	negpl	r3, r2
 8003528:	2bff      	cmp	r3, #255	; 0xff
 800352a:	d107      	bne.n	800353c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800353a:	e71d      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003544:	e718      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800354c:	2b05      	cmp	r3, #5
 800354e:	d10f      	bne.n	8003570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800356e:	e703      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003576:	2b06      	cmp	r3, #6
 8003578:	d117      	bne.n	80035aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	441a      	add	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2207      	movs	r2, #7
 8003590:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800359a:	2b00      	cmp	r3, #0
 800359c:	f47f aeec 	bne.w	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2208      	movs	r2, #8
 80035a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035a8:	e6e6      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	f47f aee1 	bne.w	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80035c4:	425a      	negs	r2, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	bf58      	it	pl
 80035cc:	4253      	negpl	r3, r2
 80035ce:	2bff      	cmp	r3, #255	; 0xff
 80035d0:	f47f aed2 	bne.w	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d110      	bne.n	8003600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f920 	bl	8003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f93b 	bl	8003860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80035fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035fe:	e06a      	b.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003606:	2b0a      	cmp	r3, #10
 8003608:	d107      	bne.n	800361a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
          {
            syncTime(message_in);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fa04 	bl	8003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003618:	e6ae      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003620:	2b06      	cmp	r3, #6
 8003622:	d10e      	bne.n	8003642 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
          {
            req_param_resp.deserialize(message_in);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f7ff f881 	bl	800273a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003640:	e69a      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003648:	2b0b      	cmp	r3, #11
 800364a:	d104      	bne.n	8003656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
          {
            configured_ = false;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003654:	e690      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800365c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f43f ae84 	beq.w	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003676:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003680:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800368a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80036a2:	4611      	mov	r1, r2
 80036a4:	4798      	blx	r3
    while (true)
 80036a6:	e667      	b.n	8003378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80036a8:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00f      	beq.n	80036d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d906      	bls.n	80036d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
    {
      requestSyncTime();
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8ac 	bl	8003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 80036d4:	2300      	movs	r3, #0
  }
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
    hardware_.init();
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fa18 	bl	8002b20 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b18      	cmp	r3, #24
 800372a:	dc1e      	bgt.n	800376a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d111      	bne.n	8003762 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	60da      	str	r2, [r3, #12]
        return true;
 800375e:	2301      	movs	r3, #1
 8003760:	e004      	b.n	800376c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3301      	adds	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e7dd      	b.n	8003726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800376a:	2300      	movs	r3, #0
  }
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b18      	cmp	r3, #24
 800378a:	dc19      	bgt.n	80037c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800379c:	6839      	ldr	r1, [r7, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	605a      	str	r2, [r3, #4]
        return true;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e004      	b.n	80037c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e7e2      	b.n	8003786 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int16EvEEEEbRT_+0xe>
      }
    }
    return false;
 80037c0:	2300      	movs	r3, #0
  }
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b18      	cmp	r3, #24
 80037e0:	dc19      	bgt.n	8003816 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80037f2:	6839      	ldr	r1, [r7, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	605a      	str	r2, [r3, #4]
        return true;
 800380a:	2301      	movs	r3, #1
 800380c:	e004      	b.n	8003818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3301      	adds	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e7e2      	b.n	80037dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEEEEbRT_+0xe>
    return false;
 8003816:	2300      	movs	r3, #0
  }
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fae9 	bl	8001e08 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f107 020c 	add.w	r2, r7, #12
 8003840:	210a      	movs	r1, #10
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
    rt_time = hardware_.time();
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fa54 	bl	8002cf8 <_ZN13STM32Hardware4timeEv>
 8003850:	4602      	mov	r2, r0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003858:	bf00      	nop
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b08b      	sub	sp, #44	; 0x2c
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003868:	f107 030c 	add.w	r3, r7, #12
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fbbb 	bl	8001fe8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	2b18      	cmp	r3, #24
 800387a:	dc63      	bgt.n	8003944 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d056      	beq.n	800393c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3308      	adds	r3, #8
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4608      	mov	r0, r1
 80038dc:	4798      	blx	r3
 80038de:	4603      	mov	r3, r0
 80038e0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4608      	mov	r0, r1
 800390a:	4798      	blx	r3
 800390c:	4603      	mov	r3, r0
 800390e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003914:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681c      	ldr	r4, [r3, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff f8bd 	bl	8002aaa <_ZN3ros9Publisher15getEndpointTypeEv>
 8003930:	4601      	mov	r1, r0
 8003932:	f107 030c 	add.w	r3, r7, #12
 8003936:	461a      	mov	r2, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	3301      	adds	r3, #1
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
 8003942:	e798      	b.n	8003876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	2b18      	cmp	r3, #24
 800394c:	dc5f      	bgt.n	8003a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d053      	beq.n	8003a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003962:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	b29b      	uxth	r3, r3
 800396e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003974:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3308      	adds	r3, #8
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4608      	mov	r0, r1
 80039a0:	4798      	blx	r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039aa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	330c      	adds	r3, #12
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4798      	blx	r3
 80039c8:	4603      	mov	r3, r0
 80039ca:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80039cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039d0:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681c      	ldr	r4, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039dc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3304      	adds	r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4608      	mov	r0, r1
 80039f8:	4798      	blx	r3
 80039fa:	4601      	mov	r1, r0
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	461a      	mov	r2, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	3301      	adds	r3, #1
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0c:	e79c      	b.n	8003948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003a16:	bf00      	nop
 8003a18:	372c      	adds	r7, #44	; 0x2c
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd90      	pop	{r4, r7, pc}
	...

08003a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe f9ea 	bl	8001e08 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f95d 	bl	8002cf8 <_ZN13STM32Hardware4timeEv>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003a4a:	f107 0308 	add.w	r3, r7, #8
 8003a4e:	6839      	ldr	r1, [r7, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fa49 	bl	8001ee8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4915      	ldr	r1, [pc, #84]	; (8003ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a5c:	fba1 1303 	umull	r1, r3, r1, r3
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	4413      	add	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003a66:	6939      	ldr	r1, [r7, #16]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a6c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a76:	fb00 f303 	mul.w	r3, r0, r3
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	4a0d      	ldr	r2, [pc, #52]	; (8003ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	440b      	add	r3, r1
 8003a84:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8a4 	bl	8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f92d 	bl	8002cf8 <_ZN13STM32Hardware4timeEv>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003aa6:	bf00      	nop
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	10624dd3 	.word	0x10624dd3
 8003ab4:	000f4240 	.word	0x000f4240

08003ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b63      	cmp	r3, #99	; 0x63
 8003ac8:	dd09      	ble.n	8003ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003ad0:	f083 0301 	eor.w	r3, r3, #1
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e077      	b.n	8003bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003aea:	3207      	adds	r2, #7
 8003aec:	4611      	mov	r1, r2
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
 8003af2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	22fe      	movs	r2, #254	; 0xfe
 8003b00:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	121b      	asrs	r3, r3, #8
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003b28:	4413      	add	r3, r2
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	121b      	asrs	r3, r3, #8
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b52:	2305      	movs	r3, #5
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3306      	adds	r3, #6
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	dc0d      	bgt.n	8003b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	4413      	add	r3, r2
 8003b66:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	3301      	adds	r3, #1
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e7ec      	b.n	8003b56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3307      	adds	r3, #7
 8003b80:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	425a      	negs	r2, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	bf58      	it	pl
 8003b8c:	4253      	negpl	r3, r2
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	6179      	str	r1, [r7, #20]
 8003b96:	43d2      	mvns	r2, r2
 8003b98:	b2d1      	uxtb	r1, r2
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	460a      	mov	r2, r1
 8003ba0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003baa:	dc0a      	bgt.n	8003bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1d18      	adds	r0, r3, #4
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f7ff f857 	bl	8002c6c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	e005      	b.n	8003bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003bc2:	4905      	ldr	r1, [pc, #20]	; (8003bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f849 	bl	8003c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	0800ab74 	.word	0x0800ab74

08003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff f884 	bl	8002cf8 <_ZN13STM32Hardware4timeEv>
 8003bf0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4915      	ldr	r1, [pc, #84]	; (8003c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003bfa:	fba1 1303 	umull	r1, r3, r1, r3
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	1e5a      	subs	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c12:	fba3 0302 	umull	r0, r3, r3, r2
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c1c:	fb00 f303 	mul.w	r3, r0, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	1aca      	subs	r2, r1, r3
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f000 fe54 	bl	80048f0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	10624dd3 	.word	0x10624dd3
 8003c54:	000f4240 	.word	0x000f4240
 8003c58:	3b9aca00 	.word	0x3b9aca00

08003c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	2103      	movs	r1, #3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f804 	bl	8003c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	460b      	mov	r3, r1
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003c86:	f107 0314 	add.w	r3, r7, #20
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fb70 	bl	8002370 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f107 0214 	add.w	r2, r7, #20
 8003ca2:	2107      	movs	r1, #7
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	4798      	blx	r3
  }
 8003ca8:	bf00      	nop
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <_Z41__static_initialization_and_destruction_0ii>:
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d11f      	bne.n	8003d00 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d11a      	bne.n	8003d00 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;								//Handler del nodo ros
 8003cca:	480f      	ldr	r0, [pc, #60]	; (8003d08 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003ccc:	f7ff fa56 	bl	800317c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 str_msg;								//Messaggio che viene pubblicato dal /chatter
 8003cd0:	480e      	ldr	r0, [pc, #56]	; (8003d0c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cd2:	f7ff f81d 	bl	8002d10 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher chatter("Pantograph_res", &str_msg);		//Definisco il chatter
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cda:	490d      	ldr	r1, [pc, #52]	; (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003cdc:	480d      	ldr	r0, [pc, #52]	; (8003d14 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003cde:	f7fe feb9 	bl	8002a54 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int16> sub("Pantograph_cmd",cmdCallback);	//Definisco il command (la Subscriber è un template sul tipo di messaggio)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003ce6:	490d      	ldr	r1, [pc, #52]	; (8003d1c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003ce8:	480d      	ldr	r0, [pc, #52]	; (8003d20 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003cea:	f7ff fad7 	bl	800329c <_ZN3ros10SubscriberIN8std_msgs5Int16EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<coorsa_rfsm::SetpointUpdate> subsp("Setpoint_update",SetpointUpdateHandler);
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003cf2:	490d      	ldr	r1, [pc, #52]	; (8003d28 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003cf4:	480d      	ldr	r0, [pc, #52]	; (8003d2c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003cf6:	f7ff faf5 	bl	80032e4 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvEC1EPKcPFvRKS2_Ei>
std_msgs::Int16 RosMess;
 8003cfa:	480d      	ldr	r0, [pc, #52]	; (8003d30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003cfc:	f7ff f808 	bl	8002d10 <_ZN8std_msgs5Int16C1Ev>
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200000d4 	.word	0x200000d4
 8003d0c:	20000a10 	.word	0x20000a10
 8003d10:	0800abb0 	.word	0x0800abb0
 8003d14:	20000a18 	.word	0x20000a18
 8003d18:	080030a5 	.word	0x080030a5
 8003d1c:	0800abc0 	.word	0x0800abc0
 8003d20:	20000a2c 	.word	0x20000a2c
 8003d24:	08003029 	.word	0x08003029
 8003d28:	0800abd0 	.word	0x0800abd0
 8003d2c:	20000a48 	.word	0x20000a48
 8003d30:	20000a68 	.word	0x20000a68

08003d34 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	330c      	adds	r3, #12
 8003d42:	6839      	ldr	r1, [r7, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff f8bf 	bl	8002ec8 <_ZN11coorsa_rfsm14SetpointUpdate11deserializeEPh>
    this->cb_(msg);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	320c      	adds	r2, #12
 8003d52:	4610      	mov	r0, r2
 8003d54:	4798      	blx	r3
  }
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
  }
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	330c      	adds	r3, #12
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff f8ea 	bl	8002f5c <_ZN11coorsa_rfsm14SetpointUpdate7getTypeEv>
 8003d88:	4603      	mov	r3, r0
  }
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN3ros10SubscriberIN11coorsa_rfsm14SetpointUpdateEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff f8ea 	bl	8002f78 <_ZN11coorsa_rfsm14SetpointUpdate6getMD5Ev>
 8003da4:	4603      	mov	r3, r0
  }
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_ZN3ros10SubscriberIN8std_msgs5Int16EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe ffe0 	bl	8002d84 <_ZN8std_msgs5Int1611deserializeEPh>
    this->cb_(msg);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	320c      	adds	r2, #12
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4798      	blx	r3
  }
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
  }
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <_ZN3ros10SubscriberIN8std_msgs5Int16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe ffef 	bl	8002de0 <_ZN8std_msgs5Int167getTypeEv>
 8003e02:	4603      	mov	r3, r0
  }
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_ZN3ros10SubscriberIN8std_msgs5Int16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	330c      	adds	r3, #12
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe ffef 	bl	8002dfc <_ZN8std_msgs5Int166getMD5Ev>
 8003e1e:	4603      	mov	r3, r0
  }
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_GLOBAL__sub_I_Mess>:
 8003e42:	b580      	push	{r7, lr}
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7ff ff30 	bl	8003cb0 <_Z41__static_initialization_and_destruction_0ii>
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_MspInit+0x44>)
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <HAL_MspInit+0x44>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6613      	str	r3, [r2, #96]	; 0x60
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_MspInit+0x44>)
 8003e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_MspInit+0x44>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_MspInit+0x44>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_MspInit+0x44>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003e8a:	f003 f80d 	bl	8006ea8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000

08003e9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	; 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	f107 031c 	add.w	r3, r7, #28
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ebc:	d12d      	bne.n	8003f1a <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003ebe:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_ADC_MspInit+0xec>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <HAL_ADC_MspInit+0xec>)
 8003ec6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003ec8:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <HAL_ADC_MspInit+0xec>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10b      	bne.n	8003ee8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003ed0:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed4:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003ed6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003edc:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee8:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003eee:	f043 0304 	orr.w	r3, r3, #4
 8003ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f00:	2302      	movs	r3, #2
 8003f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f04:	2303      	movs	r3, #3
 8003f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f0c:	f107 031c 	add.w	r3, r7, #28
 8003f10:	4619      	mov	r1, r3
 8003f12:	481f      	ldr	r0, [pc, #124]	; (8003f90 <HAL_ADC_MspInit+0xf4>)
 8003f14:	f002 fd40 	bl	8006998 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003f18:	e032      	b.n	8003f80 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <HAL_ADC_MspInit+0xf8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d12d      	bne.n	8003f80 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <HAL_ADC_MspInit+0xec>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <HAL_ADC_MspInit+0xec>)
 8003f2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <HAL_ADC_MspInit+0xec>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d10b      	bne.n	8003f4e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003f3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <HAL_ADC_MspInit+0xf0>)
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f66:	2302      	movs	r3, #2
 8003f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f72:	f107 031c 	add.w	r3, r7, #28
 8003f76:	4619      	mov	r1, r3
 8003f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f7c:	f002 fd0c 	bl	8006998 <HAL_GPIO_Init>
}
 8003f80:	bf00      	nop
 8003f82:	3730      	adds	r7, #48	; 0x30
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000a74 	.word	0x20000a74
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	48000800 	.word	0x48000800
 8003f94:	50000100 	.word	0x50000100

08003f98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	f107 0314 	add.w	r3, r7, #20
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a15      	ldr	r2, [pc, #84]	; (800400c <HAL_DAC_MspInit+0x74>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d124      	bne.n	8004004 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <HAL_DAC_MspInit+0x78>)
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	4a14      	ldr	r2, [pc, #80]	; (8004010 <HAL_DAC_MspInit+0x78>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_DAC_MspInit+0x78>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <HAL_DAC_MspInit+0x78>)
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <HAL_DAC_MspInit+0x78>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <HAL_DAC_MspInit+0x78>)
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003fea:	2330      	movs	r3, #48	; 0x30
 8003fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff6:	f107 0314 	add.w	r3, r7, #20
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004000:	f002 fcca 	bl	8006998 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004004:	bf00      	nop
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	50000800 	.word	0x50000800
 8004010:	40021000 	.word	0x40021000

08004014 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a16      	ldr	r2, [pc, #88]	; (800407c <HAL_TIM_PWM_MspInit+0x68>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d114      	bne.n	8004050 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004026:	4b16      	ldr	r3, [pc, #88]	; (8004080 <HAL_TIM_PWM_MspInit+0x6c>)
 8004028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402a:	4a15      	ldr	r2, [pc, #84]	; (8004080 <HAL_TIM_PWM_MspInit+0x6c>)
 800402c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004030:	6613      	str	r3, [r2, #96]	; 0x60
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_TIM_PWM_MspInit+0x6c>)
 8004034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800403e:	2200      	movs	r2, #0
 8004040:	2100      	movs	r1, #0
 8004042:	2019      	movs	r0, #25
 8004044:	f001 ff77 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004048:	2019      	movs	r0, #25
 800404a:	f001 ff8e 	bl	8005f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800404e:	e010      	b.n	8004072 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d10b      	bne.n	8004072 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_TIM_PWM_MspInit+0x6c>)
 800405c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405e:	4a08      	ldr	r2, [pc, #32]	; (8004080 <HAL_TIM_PWM_MspInit+0x6c>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6593      	str	r3, [r2, #88]	; 0x58
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_TIM_PWM_MspInit+0x6c>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40021000 	.word	0x40021000

08004084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a31      	ldr	r2, [pc, #196]	; (8004168 <HAL_TIM_MspPostInit+0xe4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d139      	bne.n	800411a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_TIM_MspPostInit+0xe8>)
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	4a30      	ldr	r2, [pc, #192]	; (800416c <HAL_TIM_MspPostInit+0xe8>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b2:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_TIM_MspPostInit+0xe8>)
 80040b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040be:	4b2b      	ldr	r3, [pc, #172]	; (800416c <HAL_TIM_MspPostInit+0xe8>)
 80040c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c2:	4a2a      	ldr	r2, [pc, #168]	; (800416c <HAL_TIM_MspPostInit+0xe8>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ca:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_TIM_MspPostInit+0xe8>)
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040d6:	2301      	movs	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040da:	2302      	movs	r3, #2
 80040dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e2:	2300      	movs	r3, #0
 80040e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80040e6:	2302      	movs	r3, #2
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ea:	f107 0314 	add.w	r3, r7, #20
 80040ee:	4619      	mov	r1, r3
 80040f0:	481f      	ldr	r0, [pc, #124]	; (8004170 <HAL_TIM_MspPostInit+0xec>)
 80040f2:	f002 fc51 	bl	8006998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004102:	2300      	movs	r3, #0
 8004104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004106:	2306      	movs	r3, #6
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410a:	f107 0314 	add.w	r3, r7, #20
 800410e:	4619      	mov	r1, r3
 8004110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004114:	f002 fc40 	bl	8006998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004118:	e021      	b.n	800415e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d11c      	bne.n	800415e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_TIM_MspPostInit+0xe8>)
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	4a10      	ldr	r2, [pc, #64]	; (800416c <HAL_TIM_MspPostInit+0xe8>)
 800412a:	f043 0302 	orr.w	r3, r3, #2
 800412e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_TIM_MspPostInit+0xe8>)
 8004132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800413c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004142:	2302      	movs	r3, #2
 8004144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414a:	2300      	movs	r3, #0
 800414c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800414e:	2301      	movs	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	4619      	mov	r1, r3
 8004158:	4806      	ldr	r0, [pc, #24]	; (8004174 <HAL_TIM_MspPostInit+0xf0>)
 800415a:	f002 fc1d 	bl	8006998 <HAL_GPIO_Init>
}
 800415e:	bf00      	nop
 8004160:	3728      	adds	r7, #40	; 0x28
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40021000 	.word	0x40021000
 8004170:	48000800 	.word	0x48000800
 8004174:	48000400 	.word	0x48000400

08004178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	f107 0314 	add.w	r3, r7, #20
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a46      	ldr	r2, [pc, #280]	; (80042b0 <HAL_UART_MspInit+0x138>)
 8004196:	4293      	cmp	r3, r2
 8004198:	f040 8085 	bne.w	80042a6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800419c:	4b45      	ldr	r3, [pc, #276]	; (80042b4 <HAL_UART_MspInit+0x13c>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	4a44      	ldr	r2, [pc, #272]	; (80042b4 <HAL_UART_MspInit+0x13c>)
 80041a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a6:	6593      	str	r3, [r2, #88]	; 0x58
 80041a8:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <HAL_UART_MspInit+0x13c>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b4:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <HAL_UART_MspInit+0x13c>)
 80041b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b8:	4a3e      	ldr	r2, [pc, #248]	; (80042b4 <HAL_UART_MspInit+0x13c>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041c0:	4b3c      	ldr	r3, [pc, #240]	; (80042b4 <HAL_UART_MspInit+0x13c>)
 80041c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80041cc:	230c      	movs	r3, #12
 80041ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d0:	2302      	movs	r3, #2
 80041d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d8:	2300      	movs	r3, #0
 80041da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041dc:	2307      	movs	r3, #7
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	4619      	mov	r1, r3
 80041e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041ea:	f002 fbd5 	bl	8006998 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80041ee:	4b32      	ldr	r3, [pc, #200]	; (80042b8 <HAL_UART_MspInit+0x140>)
 80041f0:	4a32      	ldr	r2, [pc, #200]	; (80042bc <HAL_UART_MspInit+0x144>)
 80041f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80041f4:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <HAL_UART_MspInit+0x140>)
 80041f6:	221a      	movs	r2, #26
 80041f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041fa:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <HAL_UART_MspInit+0x140>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004200:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_UART_MspInit+0x140>)
 8004202:	2200      	movs	r2, #0
 8004204:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <HAL_UART_MspInit+0x140>)
 8004208:	2280      	movs	r2, #128	; 0x80
 800420a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800420c:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <HAL_UART_MspInit+0x140>)
 800420e:	2200      	movs	r2, #0
 8004210:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <HAL_UART_MspInit+0x140>)
 8004214:	2200      	movs	r2, #0
 8004216:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004218:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <HAL_UART_MspInit+0x140>)
 800421a:	2220      	movs	r2, #32
 800421c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800421e:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <HAL_UART_MspInit+0x140>)
 8004220:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004224:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004226:	4824      	ldr	r0, [pc, #144]	; (80042b8 <HAL_UART_MspInit+0x140>)
 8004228:	f002 f8dc 	bl	80063e4 <HAL_DMA_Init>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8004232:	f7fd fdc1 	bl	8001db8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <HAL_UART_MspInit+0x140>)
 800423a:	679a      	str	r2, [r3, #120]	; 0x78
 800423c:	4a1e      	ldr	r2, [pc, #120]	; (80042b8 <HAL_UART_MspInit+0x140>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_UART_MspInit+0x148>)
 8004244:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <HAL_UART_MspInit+0x14c>)
 8004246:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_UART_MspInit+0x148>)
 800424a:	221b      	movs	r2, #27
 800424c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800424e:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <HAL_UART_MspInit+0x148>)
 8004250:	2210      	movs	r2, #16
 8004252:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_UART_MspInit+0x148>)
 8004256:	2200      	movs	r2, #0
 8004258:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800425a:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <HAL_UART_MspInit+0x148>)
 800425c:	2280      	movs	r2, #128	; 0x80
 800425e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004260:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <HAL_UART_MspInit+0x148>)
 8004262:	2200      	movs	r2, #0
 8004264:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004266:	4b16      	ldr	r3, [pc, #88]	; (80042c0 <HAL_UART_MspInit+0x148>)
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800426c:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <HAL_UART_MspInit+0x148>)
 800426e:	2200      	movs	r2, #0
 8004270:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <HAL_UART_MspInit+0x148>)
 8004274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004278:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800427a:	4811      	ldr	r0, [pc, #68]	; (80042c0 <HAL_UART_MspInit+0x148>)
 800427c:	f002 f8b2 	bl	80063e4 <HAL_DMA_Init>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8004286:	f7fd fd97 	bl	8001db8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <HAL_UART_MspInit+0x148>)
 800428e:	675a      	str	r2, [r3, #116]	; 0x74
 8004290:	4a0b      	ldr	r2, [pc, #44]	; (80042c0 <HAL_UART_MspInit+0x148>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004296:	2200      	movs	r2, #0
 8004298:	2100      	movs	r1, #0
 800429a:	2026      	movs	r0, #38	; 0x26
 800429c:	f001 fe4b 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042a0:	2026      	movs	r0, #38	; 0x26
 80042a2:	f001 fe62 	bl	8005f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042a6:	bf00      	nop
 80042a8:	3728      	adds	r7, #40	; 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40004400 	.word	0x40004400
 80042b4:	40021000 	.word	0x40021000
 80042b8:	20000b10 	.word	0x20000b10
 80042bc:	40020008 	.word	0x40020008
 80042c0:	20000c5c 	.word	0x20000c5c
 80042c4:	4002001c 	.word	0x4002001c

080042c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042da:	e7fe      	b.n	80042da <HardFault_Handler+0x4>

080042dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042e0:	e7fe      	b.n	80042e0 <MemManage_Handler+0x4>

080042e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042e6:	e7fe      	b.n	80042e6 <BusFault_Handler+0x4>

080042e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042ec:	e7fe      	b.n	80042ec <UsageFault_Handler+0x4>

080042ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800431c:	f000 fb90 	bl	8004a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	bd80      	pop	{r7, pc}

08004324 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004328:	4802      	ldr	r0, [pc, #8]	; (8004334 <DMA1_Channel1_IRQHandler+0x10>)
 800432a:	f002 f9e5 	bl	80066f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000b10 	.word	0x20000b10

08004338 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800433c:	4802      	ldr	r0, [pc, #8]	; (8004348 <DMA1_Channel2_IRQHandler+0x10>)
 800433e:	f002 f9db 	bl	80066f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000c5c 	.word	0x20000c5c

0800434c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */


	down_lim = Mess & (1);
 8004350:	4bb5      	ldr	r3, [pc, #724]	; (8004628 <TIM1_UP_TIM16_IRQHandler+0x2dc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	4ab4      	ldr	r2, [pc, #720]	; (800462c <TIM1_UP_TIM16_IRQHandler+0x2e0>)
 800435a:	6013      	str	r3, [r2, #0]

	mid_lim = Mess & (2);
 800435c:	4bb2      	ldr	r3, [pc, #712]	; (8004628 <TIM1_UP_TIM16_IRQHandler+0x2dc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	4ab2      	ldr	r2, [pc, #712]	; (8004630 <TIM1_UP_TIM16_IRQHandler+0x2e4>)
 8004366:	6013      	str	r3, [r2, #0]

	up_lim = Mess & (4);
 8004368:	4baf      	ldr	r3, [pc, #700]	; (8004628 <TIM1_UP_TIM16_IRQHandler+0x2dc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	4ab0      	ldr	r2, [pc, #704]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 8004372:	6013      	str	r3, [r2, #0]

	read_ADC(&Adc);  //Lettura periferica ADC
 8004374:	48b0      	ldr	r0, [pc, #704]	; (8004638 <TIM1_UP_TIM16_IRQHandler+0x2ec>)
 8004376:	f7fd f863 	bl	8001440 <read_ADC>
	Adc_Pot = Adc.Adc_1;	//Lettura Potenziometro Attuatore Lineare
 800437a:	4baf      	ldr	r3, [pc, #700]	; (8004638 <TIM1_UP_TIM16_IRQHandler+0x2ec>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4aaf      	ldr	r2, [pc, #700]	; (800463c <TIM1_UP_TIM16_IRQHandler+0x2f0>)
 8004380:	6013      	str	r3, [r2, #0]
	I_sense = Adc.Adc_2;	//Lettura sensote di Corrente Attuatore Lineare
 8004382:	4bad      	ldr	r3, [pc, #692]	; (8004638 <TIM1_UP_TIM16_IRQHandler+0x2ec>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4aae      	ldr	r2, [pc, #696]	; (8004640 <TIM1_UP_TIM16_IRQHandler+0x2f4>)
 8004388:	6013      	str	r3, [r2, #0]
	Out_Filter = filter_run(I_sense, &Low_Pass);
 800438a:	4bad      	ldr	r3, [pc, #692]	; (8004640 <TIM1_UP_TIM16_IRQHandler+0x2f4>)
 800438c:	edd3 7a00 	vldr	s15, [r3]
 8004390:	48ac      	ldr	r0, [pc, #688]	; (8004644 <TIM1_UP_TIM16_IRQHandler+0x2f8>)
 8004392:	eeb0 0a67 	vmov.f32	s0, s15
 8004396:	f7fc ff77 	bl	8001288 <filter_run>
 800439a:	eef0 7a40 	vmov.f32	s15, s0
 800439e:	4baa      	ldr	r3, [pc, #680]	; (8004648 <TIM1_UP_TIM16_IRQHandler+0x2fc>)
 80043a0:	edc3 7a00 	vstr	s15, [r3]


	Control_Panel(down_lim, mid_lim, up_lim, Adc_Pot, &ControlPanel);
 80043a4:	4ba1      	ldr	r3, [pc, #644]	; (800462c <TIM1_UP_TIM16_IRQHandler+0x2e0>)
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	4ba1      	ldr	r3, [pc, #644]	; (8004630 <TIM1_UP_TIM16_IRQHandler+0x2e4>)
 80043aa:	6819      	ldr	r1, [r3, #0]
 80043ac:	4ba1      	ldr	r3, [pc, #644]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4ba2      	ldr	r3, [pc, #648]	; (800463c <TIM1_UP_TIM16_IRQHandler+0x2f0>)
 80043b2:	edd3 7a00 	vldr	s15, [r3]
 80043b6:	4ba5      	ldr	r3, [pc, #660]	; (800464c <TIM1_UP_TIM16_IRQHandler+0x300>)
 80043b8:	eeb0 0a67 	vmov.f32	s0, s15
 80043bc:	f7fc fcce 	bl	8000d5c <Control_Panel>

	I_ref = ControlPanel.I_ref;
 80043c0:	4ba2      	ldr	r3, [pc, #648]	; (800464c <TIM1_UP_TIM16_IRQHandler+0x300>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4aa2      	ldr	r2, [pc, #648]	; (8004650 <TIM1_UP_TIM16_IRQHandler+0x304>)
 80043c6:	6013      	str	r3, [r2, #0]
	down_lim = ControlPanel.down_lim;
 80043c8:	4ba0      	ldr	r3, [pc, #640]	; (800464c <TIM1_UP_TIM16_IRQHandler+0x300>)
 80043ca:	edd3 7a00 	vldr	s15, [r3]
 80043ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d2:	ee17 2a90 	vmov	r2, s15
 80043d6:	4b95      	ldr	r3, [pc, #596]	; (800462c <TIM1_UP_TIM16_IRQHandler+0x2e0>)
 80043d8:	601a      	str	r2, [r3, #0]
	mid_lim = ControlPanel.mid_lim;
 80043da:	4b9c      	ldr	r3, [pc, #624]	; (800464c <TIM1_UP_TIM16_IRQHandler+0x300>)
 80043dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80043e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043e4:	ee17 2a90 	vmov	r2, s15
 80043e8:	4b91      	ldr	r3, [pc, #580]	; (8004630 <TIM1_UP_TIM16_IRQHandler+0x2e4>)
 80043ea:	601a      	str	r2, [r3, #0]
	up_lim = ControlPanel.up_lim;
 80043ec:	4b97      	ldr	r3, [pc, #604]	; (800464c <TIM1_UP_TIM16_IRQHandler+0x300>)
 80043ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80043f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043f6:	ee17 2a90 	vmov	r2, s15
 80043fa:	4b8e      	ldr	r3, [pc, #568]	; (8004634 <TIM1_UP_TIM16_IRQHandler+0x2e8>)
 80043fc:	601a      	str	r2, [r3, #0]

	I_error = I_ref-Out_Filter;  //Calcolo errore in ingresso al regolatore PI
 80043fe:	4b94      	ldr	r3, [pc, #592]	; (8004650 <TIM1_UP_TIM16_IRQHandler+0x304>)
 8004400:	ed93 7a00 	vldr	s14, [r3]
 8004404:	4b90      	ldr	r3, [pc, #576]	; (8004648 <TIM1_UP_TIM16_IRQHandler+0x2fc>)
 8004406:	edd3 7a00 	vldr	s15, [r3]
 800440a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800440e:	4b91      	ldr	r3, [pc, #580]	; (8004654 <TIM1_UP_TIM16_IRQHandler+0x308>)
 8004410:	edc3 7a00 	vstr	s15, [r3]

	if(I_error <= 0.005f && I_error >= -0.005f){  //Dead-Zone
 8004414:	4b8f      	ldr	r3, [pc, #572]	; (8004654 <TIM1_UP_TIM16_IRQHandler+0x308>)
 8004416:	edd3 7a00 	vldr	s15, [r3]
 800441a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8004658 <TIM1_UP_TIM16_IRQHandler+0x30c>
 800441e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004426:	d80d      	bhi.n	8004444 <TIM1_UP_TIM16_IRQHandler+0xf8>
 8004428:	4b8a      	ldr	r3, [pc, #552]	; (8004654 <TIM1_UP_TIM16_IRQHandler+0x308>)
 800442a:	edd3 7a00 	vldr	s15, [r3]
 800442e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800465c <TIM1_UP_TIM16_IRQHandler+0x310>
 8004432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	db03      	blt.n	8004444 <TIM1_UP_TIM16_IRQHandler+0xf8>
		I_error = 0.0f;
 800443c:	4b85      	ldr	r3, [pc, #532]	; (8004654 <TIM1_UP_TIM16_IRQHandler+0x308>)
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
	}

	V_star = PIDfloat(I_error, &I_PI);	//Calcolo tensione di uscita regolatore PI
 8004444:	4b83      	ldr	r3, [pc, #524]	; (8004654 <TIM1_UP_TIM16_IRQHandler+0x308>)
 8004446:	edd3 7a00 	vldr	s15, [r3]
 800444a:	4885      	ldr	r0, [pc, #532]	; (8004660 <TIM1_UP_TIM16_IRQHandler+0x314>)
 800444c:	eeb0 0a67 	vmov.f32	s0, s15
 8004450:	f7fc ff55 	bl	80012fe <PIDfloat>
 8004454:	eef0 7a40 	vmov.f32	s15, s0
 8004458:	4b82      	ldr	r3, [pc, #520]	; (8004664 <TIM1_UP_TIM16_IRQHandler+0x318>)
 800445a:	edc3 7a00 	vstr	s15, [r3]
	DutyCycle = V_star/2 + 0.5f;	//Calcolo Duty Cycle scalato e traslato (V_star: [-1,1] -> [0,1])
 800445e:	4b81      	ldr	r3, [pc, #516]	; (8004664 <TIM1_UP_TIM16_IRQHandler+0x318>)
 8004460:	ed93 7a00 	vldr	s14, [r3]
 8004464:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800446c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004470:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004474:	4b7c      	ldr	r3, [pc, #496]	; (8004668 <TIM1_UP_TIM16_IRQHandler+0x31c>)
 8004476:	edc3 7a00 	vstr	s15, [r3]

	if(DutyCycle >= 0.90f){
 800447a:	4b7b      	ldr	r3, [pc, #492]	; (8004668 <TIM1_UP_TIM16_IRQHandler+0x31c>)
 800447c:	edd3 7a00 	vldr	s15, [r3]
 8004480:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800466c <TIM1_UP_TIM16_IRQHandler+0x320>
 8004484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448c:	db02      	blt.n	8004494 <TIM1_UP_TIM16_IRQHandler+0x148>
		DutyCycle = 0.90f;
 800448e:	4b76      	ldr	r3, [pc, #472]	; (8004668 <TIM1_UP_TIM16_IRQHandler+0x31c>)
 8004490:	4a77      	ldr	r2, [pc, #476]	; (8004670 <TIM1_UP_TIM16_IRQHandler+0x324>)
 8004492:	601a      	str	r2, [r3, #0]
	}

	if(DutyCycle <= 0.1f){
 8004494:	4b74      	ldr	r3, [pc, #464]	; (8004668 <TIM1_UP_TIM16_IRQHandler+0x31c>)
 8004496:	edd3 7a00 	vldr	s15, [r3]
 800449a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004674 <TIM1_UP_TIM16_IRQHandler+0x328>
 800449e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a6:	d802      	bhi.n	80044ae <TIM1_UP_TIM16_IRQHandler+0x162>
		DutyCycle = 0.1f;
 80044a8:	4b6f      	ldr	r3, [pc, #444]	; (8004668 <TIM1_UP_TIM16_IRQHandler+0x31c>)
 80044aa:	4a73      	ldr	r2, [pc, #460]	; (8004678 <TIM1_UP_TIM16_IRQHandler+0x32c>)
 80044ac:	601a      	str	r2, [r3, #0]
	}

	TIM1->CCR1 = DutyCycle*8499; //Impostazione Duty Cycle PWM Attuatore Lineare (DutyCycle*CounterPeriod)
 80044ae:	4b6e      	ldr	r3, [pc, #440]	; (8004668 <TIM1_UP_TIM16_IRQHandler+0x31c>)
 80044b0:	edd3 7a00 	vldr	s15, [r3]
 80044b4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800467c <TIM1_UP_TIM16_IRQHandler+0x330>
 80044b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044bc:	4b70      	ldr	r3, [pc, #448]	; (8004680 <TIM1_UP_TIM16_IRQHandler+0x334>)
 80044be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c2:	ee17 2a90 	vmov	r2, s15
 80044c6:	635a      	str	r2, [r3, #52]	; 0x34
	////////////////////////////////////////

	// 0° = k = 25
	// 90° = k = 75
	// 180° = k = 125
	Servo_Angle_1 = Mess & (64);
 80044c8:	4b57      	ldr	r3, [pc, #348]	; (8004628 <TIM1_UP_TIM16_IRQHandler+0x2dc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	4a6c      	ldr	r2, [pc, #432]	; (8004684 <TIM1_UP_TIM16_IRQHandler+0x338>)
 80044d2:	6013      	str	r3, [r2, #0]
	Servo_Angle_2 = Mess & (128);
 80044d4:	4b54      	ldr	r3, [pc, #336]	; (8004628 <TIM1_UP_TIM16_IRQHandler+0x2dc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	4a6a      	ldr	r2, [pc, #424]	; (8004688 <TIM1_UP_TIM16_IRQHandler+0x33c>)
 80044de:	6013      	str	r3, [r2, #0]

	if(Servo_Angle_1 == 64 && k>=75){	//POSIZIONE A: 90°
 80044e0:	4b68      	ldr	r3, [pc, #416]	; (8004684 <TIM1_UP_TIM16_IRQHandler+0x338>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	d12e      	bne.n	8004546 <TIM1_UP_TIM16_IRQHandler+0x1fa>
 80044e8:	4b68      	ldr	r3, [pc, #416]	; (800468c <TIM1_UP_TIM16_IRQHandler+0x340>)
 80044ea:	edd3 7a00 	vldr	s15, [r3]
 80044ee:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004690 <TIM1_UP_TIM16_IRQHandler+0x344>
 80044f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fa:	db24      	blt.n	8004546 <TIM1_UP_TIM16_IRQHandler+0x1fa>
		k -= 0.005f;
 80044fc:	4b63      	ldr	r3, [pc, #396]	; (800468c <TIM1_UP_TIM16_IRQHandler+0x340>)
 80044fe:	edd3 7a00 	vldr	s15, [r3]
 8004502:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004658 <TIM1_UP_TIM16_IRQHandler+0x30c>
 8004506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800450a:	4b60      	ldr	r3, [pc, #384]	; (800468c <TIM1_UP_TIM16_IRQHandler+0x340>)
 800450c:	edc3 7a00 	vstr	s15, [r3]
		j += 0.005f;
 8004510:	4b60      	ldr	r3, [pc, #384]	; (8004694 <TIM1_UP_TIM16_IRQHandler+0x348>)
 8004512:	edd3 7a00 	vldr	s15, [r3]
 8004516:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004658 <TIM1_UP_TIM16_IRQHandler+0x30c>
 800451a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800451e:	4b5d      	ldr	r3, [pc, #372]	; (8004694 <TIM1_UP_TIM16_IRQHandler+0x348>)
 8004520:	edc3 7a00 	vstr	s15, [r3]
		if(k <= 75 && WaitingForResult){
 8004524:	4b59      	ldr	r3, [pc, #356]	; (800468c <TIM1_UP_TIM16_IRQHandler+0x340>)
 8004526:	edd3 7a00 	vldr	s15, [r3]
 800452a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004690 <TIM1_UP_TIM16_IRQHandler+0x344>
 800452e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004536:	d806      	bhi.n	8004546 <TIM1_UP_TIM16_IRQHandler+0x1fa>
 8004538:	4b57      	ldr	r3, [pc, #348]	; (8004698 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <TIM1_UP_TIM16_IRQHandler+0x1fa>
		down_flag = 1;
 8004540:	4b56      	ldr	r3, [pc, #344]	; (800469c <TIM1_UP_TIM16_IRQHandler+0x350>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]
		}
	}

	if(Servo_Angle_2 == 128 && k<=120){	//POSIZIONE B: 180°
 8004546:	4b50      	ldr	r3, [pc, #320]	; (8004688 <TIM1_UP_TIM16_IRQHandler+0x33c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b80      	cmp	r3, #128	; 0x80
 800454c:	d12e      	bne.n	80045ac <TIM1_UP_TIM16_IRQHandler+0x260>
 800454e:	4b4f      	ldr	r3, [pc, #316]	; (800468c <TIM1_UP_TIM16_IRQHandler+0x340>)
 8004550:	edd3 7a00 	vldr	s15, [r3]
 8004554:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80046a0 <TIM1_UP_TIM16_IRQHandler+0x354>
 8004558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004560:	d824      	bhi.n	80045ac <TIM1_UP_TIM16_IRQHandler+0x260>
		k += 0.005f;
 8004562:	4b4a      	ldr	r3, [pc, #296]	; (800468c <TIM1_UP_TIM16_IRQHandler+0x340>)
 8004564:	edd3 7a00 	vldr	s15, [r3]
 8004568:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004658 <TIM1_UP_TIM16_IRQHandler+0x30c>
 800456c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004570:	4b46      	ldr	r3, [pc, #280]	; (800468c <TIM1_UP_TIM16_IRQHandler+0x340>)
 8004572:	edc3 7a00 	vstr	s15, [r3]
		j -= 0.005f;
 8004576:	4b47      	ldr	r3, [pc, #284]	; (8004694 <TIM1_UP_TIM16_IRQHandler+0x348>)
 8004578:	edd3 7a00 	vldr	s15, [r3]
 800457c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004658 <TIM1_UP_TIM16_IRQHandler+0x30c>
 8004580:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004584:	4b43      	ldr	r3, [pc, #268]	; (8004694 <TIM1_UP_TIM16_IRQHandler+0x348>)
 8004586:	edc3 7a00 	vstr	s15, [r3]
		if(k >= 95 && WaitingForResult){
 800458a:	4b40      	ldr	r3, [pc, #256]	; (800468c <TIM1_UP_TIM16_IRQHandler+0x340>)
 800458c:	edd3 7a00 	vldr	s15, [r3]
 8004590:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80046a4 <TIM1_UP_TIM16_IRQHandler+0x358>
 8004594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459c:	db06      	blt.n	80045ac <TIM1_UP_TIM16_IRQHandler+0x260>
 800459e:	4b3e      	ldr	r3, [pc, #248]	; (8004698 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <TIM1_UP_TIM16_IRQHandler+0x260>
		up_flag = 1;
 80045a6:	4b40      	ldr	r3, [pc, #256]	; (80046a8 <TIM1_UP_TIM16_IRQHandler+0x35c>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
		}
	}

	TIM2->CCR2 = j;		//Impostazione Duty Cycle PWM Servomotori
 80045ac:	4b39      	ldr	r3, [pc, #228]	; (8004694 <TIM1_UP_TIM16_IRQHandler+0x348>)
 80045ae:	edd3 7a00 	vldr	s15, [r3]
 80045b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ba:	ee17 2a90 	vmov	r2, s15
 80045be:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = k;
 80045c0:	4b32      	ldr	r3, [pc, #200]	; (800468c <TIM1_UP_TIM16_IRQHandler+0x340>)
 80045c2:	edd3 7a00 	vldr	s15, [r3]
 80045c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	ee17 2a90 	vmov	r2, s15
 80045d2:	63da      	str	r2, [r3, #60]	; 0x3c

	if(down_flag == 1 && WaitingForResult){
 80045d4:	4b31      	ldr	r3, [pc, #196]	; (800469c <TIM1_UP_TIM16_IRQHandler+0x350>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d10d      	bne.n	80045f8 <TIM1_UP_TIM16_IRQHandler+0x2ac>
 80045dc:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d009      	beq.n	80045f8 <TIM1_UP_TIM16_IRQHandler+0x2ac>
		WaitingForResult = 0;
 80045e4:	4b2c      	ldr	r3, [pc, #176]	; (8004698 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
		down_flag = 0;
 80045ea:	4b2c      	ldr	r3, [pc, #176]	; (800469c <TIM1_UP_TIM16_IRQHandler+0x350>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
		sendMess(256);
 80045f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80045f4:	f7fe fcfe 	bl	8002ff4 <sendMess>
	}

	if(up_flag == 1 && WaitingForResult){
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <TIM1_UP_TIM16_IRQHandler+0x35c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10d      	bne.n	800461c <TIM1_UP_TIM16_IRQHandler+0x2d0>
 8004600:	4b25      	ldr	r3, [pc, #148]	; (8004698 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <TIM1_UP_TIM16_IRQHandler+0x2d0>
		WaitingForResult = 0;
 8004608:	4b23      	ldr	r3, [pc, #140]	; (8004698 <TIM1_UP_TIM16_IRQHandler+0x34c>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
		up_flag = 0;
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <TIM1_UP_TIM16_IRQHandler+0x35c>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
		sendMess(512);
 8004614:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004618:	f7fe fcec 	bl	8002ff4 <sendMess>
	}


  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800461c:	4823      	ldr	r0, [pc, #140]	; (80046ac <TIM1_UP_TIM16_IRQHandler+0x360>)
 800461e:	f003 fdcf 	bl	80081c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	200000ac 	.word	0x200000ac
 800462c:	20000a94 	.word	0x20000a94
 8004630:	20000a98 	.word	0x20000a98
 8004634:	20000a9c 	.word	0x20000a9c
 8004638:	20000e0c 	.word	0x20000e0c
 800463c:	20000a7c 	.word	0x20000a7c
 8004640:	20000a80 	.word	0x20000a80
 8004644:	20000e14 	.word	0x20000e14
 8004648:	20000a84 	.word	0x20000a84
 800464c:	200000b4 	.word	0x200000b4
 8004650:	20000a88 	.word	0x20000a88
 8004654:	20000a90 	.word	0x20000a90
 8004658:	3ba3d70a 	.word	0x3ba3d70a
 800465c:	bba3d70a 	.word	0xbba3d70a
 8004660:	20000de0 	.word	0x20000de0
 8004664:	20000a8c 	.word	0x20000a8c
 8004668:	20000a78 	.word	0x20000a78
 800466c:	3f666666 	.word	0x3f666666
 8004670:	3f666666 	.word	0x3f666666
 8004674:	3dcccccd 	.word	0x3dcccccd
 8004678:	3dcccccd 	.word	0x3dcccccd
 800467c:	4604cc00 	.word	0x4604cc00
 8004680:	40012c00 	.word	0x40012c00
 8004684:	20000aa8 	.word	0x20000aa8
 8004688:	20000aac 	.word	0x20000aac
 800468c:	20000aa0 	.word	0x20000aa0
 8004690:	42960000 	.word	0x42960000
 8004694:	20000aa4 	.word	0x20000aa4
 8004698:	200000b0 	.word	0x200000b0
 800469c:	20000ab4 	.word	0x20000ab4
 80046a0:	42f00000 	.word	0x42f00000
 80046a4:	42be0000 	.word	0x42be0000
 80046a8:	20000ab0 	.word	0x20000ab0
 80046ac:	20000cbc 	.word	0x20000cbc

080046b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046b4:	4802      	ldr	r0, [pc, #8]	; (80046c0 <USART2_IRQHandler+0x10>)
 80046b6:	f004 ffe9 	bl	800968c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000d54 	.word	0x20000d54

080046c4 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80046c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80046cc:	f002 fb30 	bl	8006d30 <HAL_GPIO_EXTI_IRQHandler>
}
 80046d0:	bf00      	nop
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <InitSystem>:


void InitSystem(void){
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, EN_A_Pin|EN_B_Pin, GPIO_PIN_SET);
 80046d8:	2201      	movs	r2, #1
 80046da:	2111      	movs	r1, #17
 80046dc:	483e      	ldr	r0, [pc, #248]	; (80047d8 <InitSystem+0x104>)
 80046de:	f002 faf5 	bl	8006ccc <HAL_GPIO_WritePin>
	DutyCycle = 0.5f;
 80046e2:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <InitSystem+0x108>)
 80046e4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80046e8:	601a      	str	r2, [r3, #0]
	k = 75;
 80046ea:	4b3d      	ldr	r3, [pc, #244]	; (80047e0 <InitSystem+0x10c>)
 80046ec:	4a3d      	ldr	r2, [pc, #244]	; (80047e4 <InitSystem+0x110>)
 80046ee:	601a      	str	r2, [r3, #0]
	j = 75;
 80046f0:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <InitSystem+0x114>)
 80046f2:	4a3c      	ldr	r2, [pc, #240]	; (80047e4 <InitSystem+0x110>)
 80046f4:	601a      	str	r2, [r3, #0]
	TIM2->CCR2 = k;
 80046f6:	4b3a      	ldr	r3, [pc, #232]	; (80047e0 <InitSystem+0x10c>)
 80046f8:	edd3 7a00 	vldr	s15, [r3]
 80046fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004704:	ee17 2a90 	vmov	r2, s15
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = j;
 800470a:	4b37      	ldr	r3, [pc, #220]	; (80047e8 <InitSystem+0x114>)
 800470c:	edd3 7a00 	vldr	s15, [r3]
 8004710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004718:	ee17 2a90 	vmov	r2, s15
 800471c:	63da      	str	r2, [r3, #60]	; 0x3c
	AdcStruct_init(&Adc);  //Init struct ADC
 800471e:	4833      	ldr	r0, [pc, #204]	; (80047ec <InitSystem+0x118>)
 8004720:	f7fc ff3e 	bl	80015a0 <AdcStruct_init>
	init_filter(0.0001f, 0.5f, &Low_Pass);	//Init struct Low_Pass_Filter
 8004724:	4832      	ldr	r0, [pc, #200]	; (80047f0 <InitSystem+0x11c>)
 8004726:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800472a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80047f4 <InitSystem+0x120>
 800472e:	f7fc fce7 	bl	8001100 <init_filter>
	Control_Panel_Struct_init(&ControlPanel);
 8004732:	4831      	ldr	r0, [pc, #196]	; (80047f8 <InitSystem+0x124>)
 8004734:	f7fc fc7c 	bl	8001030 <Control_Panel_Struct_init>
	InitPI_BC(&I_PI);
 8004738:	4830      	ldr	r0, [pc, #192]	; (80047fc <InitSystem+0x128>)
 800473a:	f7fc fe56 	bl	80013ea <InitPI_BC>

	I_PI.Kp = 25;	//Impostazione parametri PI anello di corrente
 800473e:	4b2f      	ldr	r3, [pc, #188]	; (80047fc <InitSystem+0x128>)
 8004740:	4a2f      	ldr	r2, [pc, #188]	; (8004800 <InitSystem+0x12c>)
 8004742:	609a      	str	r2, [r3, #8]
	I_PI.Ki = 70;
 8004744:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <InitSystem+0x128>)
 8004746:	4a2f      	ldr	r2, [pc, #188]	; (8004804 <InitSystem+0x130>)
 8004748:	60da      	str	r2, [r3, #12]
	I_PI.Ts = 0.0001f;
 800474a:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <InitSystem+0x128>)
 800474c:	4a2e      	ldr	r2, [pc, #184]	; (8004808 <InitSystem+0x134>)
 800474e:	629a      	str	r2, [r3, #40]	; 0x28
	I_PI.IntegralMemory = 0;
 8004750:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <InitSystem+0x128>)
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	615a      	str	r2, [r3, #20]
	I_PI.OutSatH = 1;
 8004758:	4b28      	ldr	r3, [pc, #160]	; (80047fc <InitSystem+0x128>)
 800475a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800475e:	619a      	str	r2, [r3, #24]
	I_PI.OutSatL = -I_PI.OutSatH;
 8004760:	4b26      	ldr	r3, [pc, #152]	; (80047fc <InitSystem+0x128>)
 8004762:	edd3 7a06 	vldr	s15, [r3, #24]
 8004766:	eef1 7a67 	vneg.f32	s15, s15
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <InitSystem+0x128>)
 800476c:	edc3 7a07 	vstr	s15, [r3, #28]
	I_PI.IntSatH = 1;
 8004770:	4b22      	ldr	r3, [pc, #136]	; (80047fc <InitSystem+0x128>)
 8004772:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004776:	621a      	str	r2, [r3, #32]
	I_PI.IntSatL = -I_PI.IntSatH;
 8004778:	4b20      	ldr	r3, [pc, #128]	; (80047fc <InitSystem+0x128>)
 800477a:	edd3 7a08 	vldr	s15, [r3, #32]
 800477e:	eef1 7a67 	vneg.f32	s15, s15
 8004782:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <InitSystem+0x128>)
 8004784:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	Pos_PI.Kp = 30;	//Impostazione parametri PI anello di posizione
 8004788:	4b20      	ldr	r3, [pc, #128]	; (800480c <InitSystem+0x138>)
 800478a:	4a21      	ldr	r2, [pc, #132]	; (8004810 <InitSystem+0x13c>)
 800478c:	609a      	str	r2, [r3, #8]
	Pos_PI.Ki = 0;
 800478e:	4b1f      	ldr	r3, [pc, #124]	; (800480c <InitSystem+0x138>)
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	60da      	str	r2, [r3, #12]
	Pos_PI.Ts = 0.0001f;
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <InitSystem+0x138>)
 8004798:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <InitSystem+0x134>)
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
	Pos_PI.IntegralMemory = 0;
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <InitSystem+0x138>)
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	615a      	str	r2, [r3, #20]
	Pos_PI.OutSatH = 1;
 80047a4:	4b19      	ldr	r3, [pc, #100]	; (800480c <InitSystem+0x138>)
 80047a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047aa:	619a      	str	r2, [r3, #24]
	Pos_PI.OutSatL = -I_PI.OutSatH;
 80047ac:	4b13      	ldr	r3, [pc, #76]	; (80047fc <InitSystem+0x128>)
 80047ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80047b2:	eef1 7a67 	vneg.f32	s15, s15
 80047b6:	4b15      	ldr	r3, [pc, #84]	; (800480c <InitSystem+0x138>)
 80047b8:	edc3 7a07 	vstr	s15, [r3, #28]
	Pos_PI.IntSatH = 1;
 80047bc:	4b13      	ldr	r3, [pc, #76]	; (800480c <InitSystem+0x138>)
 80047be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047c2:	621a      	str	r2, [r3, #32]
	Pos_PI.IntSatL = -I_PI.IntSatH;
 80047c4:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <InitSystem+0x128>)
 80047c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80047ca:	eef1 7a67 	vneg.f32	s15, s15
 80047ce:	4b0f      	ldr	r3, [pc, #60]	; (800480c <InitSystem+0x138>)
 80047d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

}
 80047d4:	bf00      	nop
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	48000400 	.word	0x48000400
 80047dc:	20000a78 	.word	0x20000a78
 80047e0:	20000aa0 	.word	0x20000aa0
 80047e4:	42960000 	.word	0x42960000
 80047e8:	20000aa4 	.word	0x20000aa4
 80047ec:	20000e0c 	.word	0x20000e0c
 80047f0:	20000e14 	.word	0x20000e14
 80047f4:	38d1b717 	.word	0x38d1b717
 80047f8:	200000b4 	.word	0x200000b4
 80047fc:	20000de0 	.word	0x20000de0
 8004800:	41c80000 	.word	0x41c80000
 8004804:	428c0000 	.word	0x428c0000
 8004808:	38d1b717 	.word	0x38d1b717
 800480c:	20000ac8 	.word	0x20000ac8
 8004810:	41f00000 	.word	0x41f00000

08004814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
	return 1;
 8004818:	2301      	movs	r3, #1
}
 800481a:	4618      	mov	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <_kill>:

int _kill(int pid, int sig)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800482e:	f005 ff6f 	bl	800a710 <__errno>
 8004832:	4603      	mov	r3, r0
 8004834:	2216      	movs	r2, #22
 8004836:	601a      	str	r2, [r3, #0]
	return -1;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <_exit>:

void _exit (int status)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800484c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ffe7 	bl	8004824 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004856:	e7fe      	b.n	8004856 <_exit+0x12>

08004858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004860:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <_sbrk+0x5c>)
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <_sbrk+0x60>)
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <_sbrk+0x64>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004874:	4b11      	ldr	r3, [pc, #68]	; (80048bc <_sbrk+0x64>)
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <_sbrk+0x68>)
 8004878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <_sbrk+0x64>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4413      	add	r3, r2
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	429a      	cmp	r2, r3
 8004886:	d207      	bcs.n	8004898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004888:	f005 ff42 	bl	800a710 <__errno>
 800488c:	4603      	mov	r3, r0
 800488e:	220c      	movs	r2, #12
 8004890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004896:	e009      	b.n	80048ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004898:	4b08      	ldr	r3, [pc, #32]	; (80048bc <_sbrk+0x64>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <_sbrk+0x64>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4413      	add	r3, r2
 80048a6:	4a05      	ldr	r2, [pc, #20]	; (80048bc <_sbrk+0x64>)
 80048a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20008000 	.word	0x20008000
 80048b8:	00000400 	.word	0x00000400
 80048bc:	20000ab8 	.word	0x20000ab8
 80048c0:	20000e50 	.word	0x20000e50

080048c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <SystemInit+0x28>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	4a07      	ldr	r2, [pc, #28]	; (80048ec <SystemInit+0x28>)
 80048d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048d8:	4b04      	ldr	r3, [pc, #16]	; (80048ec <SystemInit+0x28>)
 80048da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048de:	609a      	str	r2, [r3, #8]
#endif
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	e000ed00 	.word	0xe000ed00

080048f0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	0a5a      	lsrs	r2, r3, #9
 8004900:	490f      	ldr	r1, [pc, #60]	; (8004940 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004902:	fba1 1202 	umull	r1, r2, r1, r2
 8004906:	09d2      	lsrs	r2, r2, #7
 8004908:	490e      	ldr	r1, [pc, #56]	; (8004944 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800490a:	fb01 f202 	mul.w	r2, r1, r2
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	0a5b      	lsrs	r3, r3, #9
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	09db      	lsrs	r3, r3, #7
 8004920:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	441a      	add	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	00044b83 	.word	0x00044b83
 8004944:	3b9aca00 	.word	0x3b9aca00

08004948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004948:	480d      	ldr	r0, [pc, #52]	; (8004980 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800494a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800494c:	480d      	ldr	r0, [pc, #52]	; (8004984 <LoopForever+0x6>)
  ldr r1, =_edata
 800494e:	490e      	ldr	r1, [pc, #56]	; (8004988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <LoopForever+0xe>)
  movs r3, #0
 8004952:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004954:	e002      	b.n	800495c <LoopCopyDataInit>

08004956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800495a:	3304      	adds	r3, #4

0800495c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800495c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800495e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004960:	d3f9      	bcc.n	8004956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004962:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004964:	4c0b      	ldr	r4, [pc, #44]	; (8004994 <LoopForever+0x16>)
  movs r3, #0
 8004966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004968:	e001      	b.n	800496e <LoopFillZerobss>

0800496a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800496a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800496c:	3204      	adds	r2, #4

0800496e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800496e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004970:	d3fb      	bcc.n	800496a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004972:	f7ff ffa7 	bl	80048c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004976:	f005 fed1 	bl	800a71c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800497a:	f7fc fe23 	bl	80015c4 <main>

0800497e <LoopForever>:

LoopForever:
    b LoopForever
 800497e:	e7fe      	b.n	800497e <LoopForever>
  ldr   r0, =_estack
 8004980:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004988:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800498c:	0800ad68 	.word	0x0800ad68
  ldr r2, =_sbss
 8004990:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004994:	20000e4c 	.word	0x20000e4c

08004998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004998:	e7fe      	b.n	8004998 <ADC1_2_IRQHandler>

0800499a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049a4:	2003      	movs	r0, #3
 80049a6:	f001 fabb 	bl	8005f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049aa:	2000      	movs	r0, #0
 80049ac:	f000 f80e 	bl	80049cc <HAL_InitTick>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	71fb      	strb	r3, [r7, #7]
 80049ba:	e001      	b.n	80049c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80049bc:	f7ff fa4a 	bl	8003e54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049c0:	79fb      	ldrb	r3, [r7, #7]

}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80049d8:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <HAL_InitTick+0x68>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d022      	beq.n	8004a26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80049e0:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <HAL_InitTick+0x6c>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_InitTick+0x68>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80049ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 fac6 	bl	8005f86 <HAL_SYSTICK_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10f      	bne.n	8004a20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b0f      	cmp	r3, #15
 8004a04:	d809      	bhi.n	8004a1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a06:	2200      	movs	r2, #0
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a0e:	f001 fa92 	bl	8005f36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <HAL_InitTick+0x70>)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e007      	b.n	8004a2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
 8004a1e:	e004      	b.n	8004a2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
 8004a24:	e001      	b.n	8004a2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000008 	.word	0x20000008
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	20000004 	.word	0x20000004

08004a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_IncTick+0x1c>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_IncTick+0x20>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <HAL_IncTick+0x1c>)
 8004a50:	6013      	str	r3, [r2, #0]
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	20000e38 	.word	0x20000e38
 8004a60:	20000008 	.word	0x20000008

08004a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return uwTick;
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <HAL_GetTick+0x14>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000e38 	.word	0x20000e38

08004a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a84:	f7ff ffee 	bl	8004a64 <HAL_GetTick>
 8004a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a94:	d004      	beq.n	8004aa0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_Delay+0x40>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004aa0:	bf00      	nop
 8004aa2:	f7ff ffdf 	bl	8004a64 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d8f7      	bhi.n	8004aa2 <HAL_Delay+0x26>
  {
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000008 	.word	0x20000008

08004ac0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	609a      	str	r2, [r3, #8]
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	609a      	str	r2, [r3, #8]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3360      	adds	r3, #96	; 0x60
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <LL_ADC_SetOffset+0x44>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	03fff000 	.word	0x03fff000

08004b70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3360      	adds	r3, #96	; 0x60
 8004b7e:	461a      	mov	r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3360      	adds	r3, #96	; 0x60
 8004bac:	461a      	mov	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b087      	sub	sp, #28
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3360      	adds	r3, #96	; 0x60
 8004be2:	461a      	mov	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3360      	adds	r3, #96	; 0x60
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	615a      	str	r2, [r3, #20]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3330      	adds	r3, #48	; 0x30
 8004c74:	461a      	mov	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	0a1b      	lsrs	r3, r3, #8
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	4413      	add	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	211f      	movs	r1, #31
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	0e9b      	lsrs	r3, r3, #26
 8004c9c:	f003 011f 	and.w	r1, r3, #31
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	431a      	orrs	r2, r3
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3314      	adds	r3, #20
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	0e5b      	lsrs	r3, r3, #25
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	4413      	add	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	0d1b      	lsrs	r3, r3, #20
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2107      	movs	r1, #7
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	401a      	ands	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	0d1b      	lsrs	r3, r3, #20
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004d00:	431a      	orrs	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	401a      	ands	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f003 0318 	and.w	r3, r3, #24
 8004d36:	4908      	ldr	r1, [pc, #32]	; (8004d58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004d38:	40d9      	lsrs	r1, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	400b      	ands	r3, r1
 8004d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d42:	431a      	orrs	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	0007ffff 	.word	0x0007ffff

08004d5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 031f 	and.w	r3, r3, #31
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6093      	str	r3, [r2, #8]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db0:	d101      	bne.n	8004db6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004dd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004dd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e00:	d101      	bne.n	8004e06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e28:	f043 0201 	orr.w	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <LL_ADC_IsEnabled+0x18>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <LL_ADC_IsEnabled+0x1a>
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d101      	bne.n	8004ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d101      	bne.n	8004ec8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ed8:	b590      	push	{r4, r7, lr}
 8004eda:	b089      	sub	sp, #36	; 0x24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e16b      	b.n	80051ca <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d109      	bne.n	8004f14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fe ffcb 	bl	8003e9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff3f 	bl	8004d9c <LL_ADC_IsDeepPowerDownEnabled>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff ff25 	bl	8004d78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff5a 	bl	8004dec <LL_ADC_IsInternalRegulatorEnabled>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d113      	bne.n	8004f66 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff ff3e 	bl	8004dc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004f48:	4ba2      	ldr	r3, [pc, #648]	; (80051d4 <HAL_ADC_Init+0x2fc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	4aa2      	ldr	r2, [pc, #648]	; (80051d8 <HAL_ADC_Init+0x300>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	099b      	lsrs	r3, r3, #6
 8004f56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f58:	e002      	b.n	8004f60 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f9      	bne.n	8004f5a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff ff3e 	bl	8004dec <LL_ADC_IsInternalRegulatorEnabled>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10d      	bne.n	8004f92 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7a:	f043 0210 	orr.w	r2, r3, #16
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ff77 	bl	8004e8a <LL_ADC_REG_IsConversionOngoing>
 8004f9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f040 8106 	bne.w	80051b8 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 8102 	bne.w	80051b8 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004fbc:	f043 0202 	orr.w	r2, r3, #2
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff ff37 	bl	8004e3c <LL_ADC_IsEnabled>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d111      	bne.n	8004ff8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fd4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004fd8:	f7ff ff30 	bl	8004e3c <LL_ADC_IsEnabled>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	487f      	ldr	r0, [pc, #508]	; (80051dc <HAL_ADC_Init+0x304>)
 8004fe0:	f7ff ff2c 	bl	8004e3c <LL_ADC_IsEnabled>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4323      	orrs	r3, r4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d105      	bne.n	8004ff8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	487b      	ldr	r0, [pc, #492]	; (80051e0 <HAL_ADC_Init+0x308>)
 8004ff4:	f7ff fd64 	bl	8004ac0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	7f5b      	ldrb	r3, [r3, #29]
 8004ffc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005002:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005008:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800500e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005016:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005022:	2b01      	cmp	r3, #1
 8005024:	d106      	bne.n	8005034 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	3b01      	subs	r3, #1
 800502c:	045b      	lsls	r3, r3, #17
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d009      	beq.n	8005050 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	4b63      	ldr	r3, [pc, #396]	; (80051e4 <HAL_ADC_Init+0x30c>)
 8005058:	4013      	ands	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	69b9      	ldr	r1, [r7, #24]
 8005060:	430b      	orrs	r3, r1
 8005062:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ff03 	bl	8004e8a <LL_ADC_REG_IsConversionOngoing>
 8005084:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ff10 	bl	8004eb0 <LL_ADC_INJ_IsConversionOngoing>
 8005090:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d16d      	bne.n	8005174 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d16a      	bne.n	8005174 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80050a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ba:	f023 0302 	bic.w	r3, r3, #2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	69b9      	ldr	r1, [r7, #24]
 80050c4:	430b      	orrs	r3, r1
 80050c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d017      	beq.n	8005100 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80050ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6911      	ldr	r1, [r2, #16]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	430b      	orrs	r3, r1
 80050fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80050fe:	e013      	b.n	8005128 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800510e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005124:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512e:	2b01      	cmp	r3, #1
 8005130:	d118      	bne.n	8005164 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800513c:	f023 0304 	bic.w	r3, r3, #4
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800514e:	4311      	orrs	r1, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005154:	430a      	orrs	r2, r1
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	611a      	str	r2, [r3, #16]
 8005162:	e007      	b.n	8005174 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d10c      	bne.n	8005196 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	f023 010f 	bic.w	r1, r3, #15
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	1e5a      	subs	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
 8005194:	e007      	b.n	80051a6 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 020f 	bic.w	r2, r2, #15
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	f043 0201 	orr.w	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80051b6:	e007      	b.n	80051c8 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051bc:	f043 0210 	orr.w	r2, r3, #16
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80051c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3724      	adds	r7, #36	; 0x24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd90      	pop	{r4, r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000000 	.word	0x20000000
 80051d8:	053e2d63 	.word	0x053e2d63
 80051dc:	50000100 	.word	0x50000100
 80051e0:	50000300 	.word	0x50000300
 80051e4:	fff04007 	.word	0xfff04007

080051e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051f0:	4859      	ldr	r0, [pc, #356]	; (8005358 <HAL_ADC_Start+0x170>)
 80051f2:	f7ff fdb3 	bl	8004d5c <LL_ADC_GetMultimode>
 80051f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fe44 	bl	8004e8a <LL_ADC_REG_IsConversionOngoing>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 809f 	bne.w	8005348 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_ADC_Start+0x30>
 8005214:	2302      	movs	r3, #2
 8005216:	e09a      	b.n	800534e <HAL_ADC_Start+0x166>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fc8d 	bl	8005b40 <ADC_Enable>
 8005226:	4603      	mov	r3, r0
 8005228:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f040 8086 	bne.w	800533e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005236:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a44      	ldr	r2, [pc, #272]	; (800535c <HAL_ADC_Start+0x174>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d002      	beq.n	8005256 <HAL_ADC_Start+0x6e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	e001      	b.n	800525a <HAL_ADC_Start+0x72>
 8005256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	4293      	cmp	r3, r2
 8005260:	d002      	beq.n	8005268 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005280:	d106      	bne.n	8005290 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005286:	f023 0206 	bic.w	r2, r3, #6
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	661a      	str	r2, [r3, #96]	; 0x60
 800528e:	e002      	b.n	8005296 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	221c      	movs	r2, #28
 800529c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2c      	ldr	r2, [pc, #176]	; (800535c <HAL_ADC_Start+0x174>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d002      	beq.n	80052b6 <HAL_ADC_Start+0xce>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	e001      	b.n	80052ba <HAL_ADC_Start+0xd2>
 80052b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	4293      	cmp	r3, r2
 80052c0:	d008      	beq.n	80052d4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d002      	beq.n	80052d4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b09      	cmp	r3, #9
 80052d2:	d114      	bne.n	80052fe <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fdb3 	bl	8004e62 <LL_ADC_REG_StartConversion>
 80052fc:	e026      	b.n	800534c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005302:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <HAL_ADC_Start+0x174>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d002      	beq.n	800531a <HAL_ADC_Start+0x132>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	e001      	b.n	800531e <HAL_ADC_Start+0x136>
 800531a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800531e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00f      	beq.n	800534c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005330:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005334:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	65da      	str	r2, [r3, #92]	; 0x5c
 800533c:	e006      	b.n	800534c <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005346:	e001      	b.n	800534c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005348:	2302      	movs	r3, #2
 800534a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	50000300 	.word	0x50000300
 800535c:	50000100 	.word	0x50000100

08005360 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b0b6      	sub	sp, #216	; 0xd8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x22>
 800537e:	2302      	movs	r3, #2
 8005380:	e3c7      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x7b2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fd7b 	bl	8004e8a <LL_ADC_REG_IsConversionOngoing>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	f040 83ac 	bne.w	8005af4 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	f7ff fc5b 	bl	8004c64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fd69 	bl	8004e8a <LL_ADC_REG_IsConversionOngoing>
 80053b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fd75 	bl	8004eb0 <LL_ADC_INJ_IsConversionOngoing>
 80053c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80053ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f040 81d9 	bne.w	8005786 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80053d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 81d4 	bne.w	8005786 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e6:	d10f      	bne.n	8005408 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2200      	movs	r2, #0
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7ff fc62 	bl	8004cbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff fc1c 	bl	8004c3e <LL_ADC_SetSamplingTimeCommonConfig>
 8005406:	e00e      	b.n	8005426 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6819      	ldr	r1, [r3, #0]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	461a      	mov	r2, r3
 8005416:	f7ff fc51 	bl	8004cbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fc0c 	bl	8004c3e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	08db      	lsrs	r3, r3, #3
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d022      	beq.n	800548e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6919      	ldr	r1, [r3, #16]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005458:	f7ff fb66 	bl	8004b28 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	6919      	ldr	r1, [r3, #16]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	461a      	mov	r2, r3
 800546a:	f7ff fbb2 	bl	8004bd2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6919      	ldr	r1, [r3, #16]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	7f1b      	ldrb	r3, [r3, #28]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d102      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x124>
 800547e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005482:	e000      	b.n	8005486 <HAL_ADC_ConfigChannel+0x126>
 8005484:	2300      	movs	r3, #0
 8005486:	461a      	mov	r2, r3
 8005488:	f7ff fbbe 	bl	8004c08 <LL_ADC_SetOffsetSaturation>
 800548c:	e17b      	b.n	8005786 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fb6b 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 800549a:	4603      	mov	r3, r0
 800549c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <HAL_ADC_ConfigChannel+0x15a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fb60 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 80054b0:	4603      	mov	r3, r0
 80054b2:	0e9b      	lsrs	r3, r3, #26
 80054b4:	f003 021f 	and.w	r2, r3, #31
 80054b8:	e01e      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x198>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fb55 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054d0:	fa93 f3a3 	rbit	r3, r3
 80054d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80054d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80054e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80054e8:	2320      	movs	r3, #32
 80054ea:	e004      	b.n	80054f6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80054ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054f0:	fab3 f383 	clz	r3, r3
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <HAL_ADC_ConfigChannel+0x1b0>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	0e9b      	lsrs	r3, r3, #26
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	e018      	b.n	8005542 <HAL_ADC_ConfigChannel+0x1e2>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005518:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800551c:	fa93 f3a3 	rbit	r3, r3
 8005520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800552c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005534:	2320      	movs	r3, #32
 8005536:	e004      	b.n	8005542 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8005538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800553c:	fab3 f383 	clz	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	429a      	cmp	r2, r3
 8005544:	d106      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fb24 	bl	8004b9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2101      	movs	r1, #1
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fb08 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 8005560:	4603      	mov	r3, r0
 8005562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x220>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2101      	movs	r1, #1
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fafd 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 8005576:	4603      	mov	r3, r0
 8005578:	0e9b      	lsrs	r3, r3, #26
 800557a:	f003 021f 	and.w	r2, r3, #31
 800557e:	e01e      	b.n	80055be <HAL_ADC_ConfigChannel+0x25e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2101      	movs	r1, #1
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff faf2 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 800558c:	4603      	mov	r3, r0
 800558e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800559e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80055a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80055ae:	2320      	movs	r3, #32
 80055b0:	e004      	b.n	80055bc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80055b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x276>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	0e9b      	lsrs	r3, r3, #26
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	e018      	b.n	8005608 <HAL_ADC_ConfigChannel+0x2a8>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80055ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80055f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80055fa:	2320      	movs	r3, #32
 80055fc:	e004      	b.n	8005608 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80055fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005602:	fab3 f383 	clz	r3, r3
 8005606:	b2db      	uxtb	r3, r3
 8005608:	429a      	cmp	r2, r3
 800560a:	d106      	bne.n	800561a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2200      	movs	r2, #0
 8005612:	2101      	movs	r1, #1
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fac1 	bl	8004b9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2102      	movs	r1, #2
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff faa5 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 8005626:	4603      	mov	r3, r0
 8005628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <HAL_ADC_ConfigChannel+0x2e6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2102      	movs	r1, #2
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fa9a 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 800563c:	4603      	mov	r3, r0
 800563e:	0e9b      	lsrs	r3, r3, #26
 8005640:	f003 021f 	and.w	r2, r3, #31
 8005644:	e01e      	b.n	8005684 <HAL_ADC_ConfigChannel+0x324>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2102      	movs	r1, #2
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff fa8f 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 8005652:	4603      	mov	r3, r0
 8005654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800565c:	fa93 f3a3 	rbit	r3, r3
 8005660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800566c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005674:	2320      	movs	r3, #32
 8005676:	e004      	b.n	8005682 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005678:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800567c:	fab3 f383 	clz	r3, r3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <HAL_ADC_ConfigChannel+0x33c>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0e9b      	lsrs	r3, r3, #26
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	e016      	b.n	80056ca <HAL_ADC_ConfigChannel+0x36a>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056a8:	fa93 f3a3 	rbit	r3, r3
 80056ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80056ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80056b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80056bc:	2320      	movs	r3, #32
 80056be:	e004      	b.n	80056ca <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80056c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d106      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	2102      	movs	r1, #2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff fa60 	bl	8004b9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2103      	movs	r1, #3
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fa44 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x3a8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2103      	movs	r1, #3
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff fa39 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 80056fe:	4603      	mov	r3, r0
 8005700:	0e9b      	lsrs	r3, r3, #26
 8005702:	f003 021f 	and.w	r2, r3, #31
 8005706:	e017      	b.n	8005738 <HAL_ADC_ConfigChannel+0x3d8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2103      	movs	r1, #3
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fa2e 	bl	8004b70 <LL_ADC_GetOffsetChannel>
 8005714:	4603      	mov	r3, r0
 8005716:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800571a:	fa93 f3a3 	rbit	r3, r3
 800571e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005722:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800572a:	2320      	movs	r3, #32
 800572c:	e003      	b.n	8005736 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800572e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005730:	fab3 f383 	clz	r3, r3
 8005734:	b2db      	uxtb	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x3f0>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	0e9b      	lsrs	r3, r3, #26
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	e011      	b.n	8005774 <HAL_ADC_ConfigChannel+0x414>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005758:	fa93 f3a3 	rbit	r3, r3
 800575c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800575e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005760:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005768:	2320      	movs	r3, #32
 800576a:	e003      	b.n	8005774 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800576c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576e:	fab3 f383 	clz	r3, r3
 8005772:	b2db      	uxtb	r3, r3
 8005774:	429a      	cmp	r2, r3
 8005776:	d106      	bne.n	8005786 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2200      	movs	r2, #0
 800577e:	2103      	movs	r1, #3
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff fa0b 	bl	8004b9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fb56 	bl	8004e3c <LL_ADC_IsEnabled>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 8140 	bne.w	8005a18 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6819      	ldr	r1, [r3, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	461a      	mov	r2, r3
 80057a6:	f7ff fab5 	bl	8004d14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	4a8f      	ldr	r2, [pc, #572]	; (80059ec <HAL_ADC_ConfigChannel+0x68c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	f040 8131 	bne.w	8005a18 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10b      	bne.n	80057de <HAL_ADC_ConfigChannel+0x47e>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	0e9b      	lsrs	r3, r3, #26
 80057cc:	3301      	adds	r3, #1
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	2b09      	cmp	r3, #9
 80057d4:	bf94      	ite	ls
 80057d6:	2301      	movls	r3, #1
 80057d8:	2300      	movhi	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e019      	b.n	8005812 <HAL_ADC_ConfigChannel+0x4b2>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e6:	fa93 f3a3 	rbit	r3, r3
 80057ea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80057ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80057f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80057f6:	2320      	movs	r3, #32
 80057f8:	e003      	b.n	8005802 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80057fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057fc:	fab3 f383 	clz	r3, r3
 8005800:	b2db      	uxtb	r3, r3
 8005802:	3301      	adds	r3, #1
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2b09      	cmp	r3, #9
 800580a:	bf94      	ite	ls
 800580c:	2301      	movls	r3, #1
 800580e:	2300      	movhi	r3, #0
 8005810:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005812:	2b00      	cmp	r3, #0
 8005814:	d079      	beq.n	800590a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <HAL_ADC_ConfigChannel+0x4d2>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	0e9b      	lsrs	r3, r3, #26
 8005828:	3301      	adds	r3, #1
 800582a:	069b      	lsls	r3, r3, #26
 800582c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005830:	e015      	b.n	800585e <HAL_ADC_ConfigChannel+0x4fe>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583a:	fa93 f3a3 	rbit	r3, r3
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005842:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800584a:	2320      	movs	r3, #32
 800584c:	e003      	b.n	8005856 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800584e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005850:	fab3 f383 	clz	r3, r3
 8005854:	b2db      	uxtb	r3, r3
 8005856:	3301      	adds	r3, #1
 8005858:	069b      	lsls	r3, r3, #26
 800585a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <HAL_ADC_ConfigChannel+0x51e>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	0e9b      	lsrs	r3, r3, #26
 8005870:	3301      	adds	r3, #1
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2101      	movs	r1, #1
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	e017      	b.n	80058ae <HAL_ADC_ConfigChannel+0x54e>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005886:	fa93 f3a3 	rbit	r3, r3
 800588a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800588c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005896:	2320      	movs	r3, #32
 8005898:	e003      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800589a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589c:	fab3 f383 	clz	r3, r3
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	3301      	adds	r3, #1
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	2101      	movs	r1, #1
 80058aa:	fa01 f303 	lsl.w	r3, r1, r3
 80058ae:	ea42 0103 	orr.w	r1, r2, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <HAL_ADC_ConfigChannel+0x574>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	0e9b      	lsrs	r3, r3, #26
 80058c4:	3301      	adds	r3, #1
 80058c6:	f003 021f 	and.w	r2, r3, #31
 80058ca:	4613      	mov	r3, r2
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	4413      	add	r3, r2
 80058d0:	051b      	lsls	r3, r3, #20
 80058d2:	e018      	b.n	8005906 <HAL_ADC_ConfigChannel+0x5a6>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	fa93 f3a3 	rbit	r3, r3
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80058e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80058ec:	2320      	movs	r3, #32
 80058ee:	e003      	b.n	80058f8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	fab3 f383 	clz	r3, r3
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	3301      	adds	r3, #1
 80058fa:	f003 021f 	and.w	r2, r3, #31
 80058fe:	4613      	mov	r3, r2
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	4413      	add	r3, r2
 8005904:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005906:	430b      	orrs	r3, r1
 8005908:	e081      	b.n	8005a0e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005912:	2b00      	cmp	r3, #0
 8005914:	d107      	bne.n	8005926 <HAL_ADC_ConfigChannel+0x5c6>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	0e9b      	lsrs	r3, r3, #26
 800591c:	3301      	adds	r3, #1
 800591e:	069b      	lsls	r3, r3, #26
 8005920:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005924:	e015      	b.n	8005952 <HAL_ADC_ConfigChannel+0x5f2>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	fa93 f3a3 	rbit	r3, r3
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800593e:	2320      	movs	r3, #32
 8005940:	e003      	b.n	800594a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	fab3 f383 	clz	r3, r3
 8005948:	b2db      	uxtb	r3, r3
 800594a:	3301      	adds	r3, #1
 800594c:	069b      	lsls	r3, r3, #26
 800594e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x612>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	0e9b      	lsrs	r3, r3, #26
 8005964:	3301      	adds	r3, #1
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	2101      	movs	r1, #1
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	e017      	b.n	80059a2 <HAL_ADC_ConfigChannel+0x642>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	fa93 f3a3 	rbit	r3, r3
 800597e:	61fb      	str	r3, [r7, #28]
  return result;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800598a:	2320      	movs	r3, #32
 800598c:	e003      	b.n	8005996 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	fab3 f383 	clz	r3, r3
 8005994:	b2db      	uxtb	r3, r3
 8005996:	3301      	adds	r3, #1
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	ea42 0103 	orr.w	r1, r2, r3
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10d      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x66e>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	0e9b      	lsrs	r3, r3, #26
 80059b8:	3301      	adds	r3, #1
 80059ba:	f003 021f 	and.w	r2, r3, #31
 80059be:	4613      	mov	r3, r2
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	4413      	add	r3, r2
 80059c4:	3b1e      	subs	r3, #30
 80059c6:	051b      	lsls	r3, r3, #20
 80059c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059cc:	e01e      	b.n	8005a0c <HAL_ADC_ConfigChannel+0x6ac>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	fa93 f3a3 	rbit	r3, r3
 80059da:	613b      	str	r3, [r7, #16]
  return result;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d104      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80059e6:	2320      	movs	r3, #32
 80059e8:	e006      	b.n	80059f8 <HAL_ADC_ConfigChannel+0x698>
 80059ea:	bf00      	nop
 80059ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	fab3 f383 	clz	r3, r3
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	3301      	adds	r3, #1
 80059fa:	f003 021f 	and.w	r2, r3, #31
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	3b1e      	subs	r3, #30
 8005a06:	051b      	lsls	r3, r3, #20
 8005a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	6892      	ldr	r2, [r2, #8]
 8005a12:	4619      	mov	r1, r3
 8005a14:	f7ff f952 	bl	8004cbc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b3f      	ldr	r3, [pc, #252]	; (8005b1c <HAL_ADC_ConfigChannel+0x7bc>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d070      	beq.n	8005b06 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a24:	483e      	ldr	r0, [pc, #248]	; (8005b20 <HAL_ADC_ConfigChannel+0x7c0>)
 8005a26:	f7ff f871 	bl	8004b0c <LL_ADC_GetCommonPathInternalCh>
 8005a2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a3c      	ldr	r2, [pc, #240]	; (8005b24 <HAL_ADC_ConfigChannel+0x7c4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_ADC_ConfigChannel+0x6e2>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a3a      	ldr	r2, [pc, #232]	; (8005b28 <HAL_ADC_ConfigChannel+0x7c8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d126      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d120      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a56:	d156      	bne.n	8005b06 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a60:	4619      	mov	r1, r3
 8005a62:	482f      	ldr	r0, [pc, #188]	; (8005b20 <HAL_ADC_ConfigChannel+0x7c0>)
 8005a64:	f7ff f83f 	bl	8004ae6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005a68:	4b30      	ldr	r3, [pc, #192]	; (8005b2c <HAL_ADC_ConfigChannel+0x7cc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	099b      	lsrs	r3, r3, #6
 8005a6e:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <HAL_ADC_ConfigChannel+0x7d0>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	099a      	lsrs	r2, r3, #6
 8005a76:	4613      	mov	r3, r2
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a80:	e002      	b.n	8005a88 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f9      	bne.n	8005a82 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a8e:	e03a      	b.n	8005b06 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a27      	ldr	r2, [pc, #156]	; (8005b34 <HAL_ADC_ConfigChannel+0x7d4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d113      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x762>
 8005a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10d      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a23      	ldr	r2, [pc, #140]	; (8005b38 <HAL_ADC_ConfigChannel+0x7d8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d02a      	beq.n	8005b06 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4819      	ldr	r0, [pc, #100]	; (8005b20 <HAL_ADC_ConfigChannel+0x7c0>)
 8005abc:	f7ff f813 	bl	8004ae6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ac0:	e021      	b.n	8005b06 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1d      	ldr	r2, [pc, #116]	; (8005b3c <HAL_ADC_ConfigChannel+0x7dc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d11c      	bne.n	8005b06 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005acc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d116      	bne.n	8005b06 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <HAL_ADC_ConfigChannel+0x7d8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d011      	beq.n	8005b06 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ae6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005aea:	4619      	mov	r1, r3
 8005aec:	480c      	ldr	r0, [pc, #48]	; (8005b20 <HAL_ADC_ConfigChannel+0x7c0>)
 8005aee:	f7fe fffa 	bl	8004ae6 <LL_ADC_SetCommonPathInternalCh>
 8005af2:	e008      	b.n	8005b06 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005b0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	37d8      	adds	r7, #216	; 0xd8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	80080000 	.word	0x80080000
 8005b20:	50000300 	.word	0x50000300
 8005b24:	c3210000 	.word	0xc3210000
 8005b28:	90c00010 	.word	0x90c00010
 8005b2c:	20000000 	.word	0x20000000
 8005b30:	053e2d63 	.word	0x053e2d63
 8005b34:	c7520000 	.word	0xc7520000
 8005b38:	50000100 	.word	0x50000100
 8005b3c:	cb840000 	.word	0xcb840000

08005b40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff f975 	bl	8004e3c <LL_ADC_IsEnabled>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d146      	bne.n	8005be6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <ADC_Enable+0xb0>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6a:	f043 0210 	orr.w	r2, r3, #16
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e032      	b.n	8005be8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff f944 	bl	8004e14 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b8c:	f7fe ff6a 	bl	8004a64 <HAL_GetTick>
 8005b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b92:	e021      	b.n	8005bd8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff f94f 	bl	8004e3c <LL_ADC_IsEnabled>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d104      	bne.n	8005bae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff f933 	bl	8004e14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bae:	f7fe ff59 	bl	8004a64 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d90d      	bls.n	8005bd8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc0:	f043 0210 	orr.w	r2, r3, #16
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bcc:	f043 0201 	orr.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e007      	b.n	8005be8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d1d6      	bne.n	8005b94 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	8000003f 	.word	0x8000003f

08005bf4 <LL_ADC_IsEnabled>:
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <LL_ADC_IsEnabled+0x18>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <LL_ADC_IsEnabled+0x1a>
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <LL_ADC_REG_IsConversionOngoing>:
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d101      	bne.n	8005c32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005c40:	b590      	push	{r4, r7, lr}
 8005c42:	b0a1      	sub	sp, #132	; 0x84
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d101      	bne.n	8005c5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e087      	b.n	8005d6e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c6e:	d102      	bne.n	8005c76 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005c70:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	e001      	b.n	8005c7a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005c76:	2300      	movs	r3, #0
 8005c78:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10b      	bne.n	8005c98 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c84:	f043 0220 	orr.w	r2, r3, #32
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e06a      	b.n	8005d6e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff ffbd 	bl	8005c1a <LL_ADC_REG_IsConversionOngoing>
 8005ca0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff ffb7 	bl	8005c1a <LL_ADC_REG_IsConversionOngoing>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d14c      	bne.n	8005d4c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d149      	bne.n	8005d4c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005cb8:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005cba:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d028      	beq.n	8005d16 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	6859      	ldr	r1, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cd6:	035b      	lsls	r3, r3, #13
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cde:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ce0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005ce4:	f7ff ff86 	bl	8005bf4 <LL_ADC_IsEnabled>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	4823      	ldr	r0, [pc, #140]	; (8005d78 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005cec:	f7ff ff82 	bl	8005bf4 <LL_ADC_IsEnabled>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4323      	orrs	r3, r4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d133      	bne.n	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005d00:	f023 030f 	bic.w	r3, r3, #15
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	6811      	ldr	r1, [r2, #0]
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	6892      	ldr	r2, [r2, #8]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d12:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d14:	e024      	b.n	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d20:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d22:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005d26:	f7ff ff65 	bl	8005bf4 <LL_ADC_IsEnabled>
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4812      	ldr	r0, [pc, #72]	; (8005d78 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005d2e:	f7ff ff61 	bl	8005bf4 <LL_ADC_IsEnabled>
 8005d32:	4603      	mov	r3, r0
 8005d34:	4323      	orrs	r3, r4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d112      	bne.n	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005d42:	f023 030f 	bic.w	r3, r3, #15
 8005d46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005d48:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d4a:	e009      	b.n	8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	f043 0220 	orr.w	r2, r3, #32
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005d5e:	e000      	b.n	8005d62 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3784      	adds	r7, #132	; 0x84
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd90      	pop	{r4, r7, pc}
 8005d76:	bf00      	nop
 8005d78:	50000100 	.word	0x50000100
 8005d7c:	50000300 	.word	0x50000300

08005d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005db2:	4a04      	ldr	r2, [pc, #16]	; (8005dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	60d3      	str	r3, [r2, #12]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000ed00 	.word	0xe000ed00

08005dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	f003 0307 	and.w	r3, r3, #7
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	db0b      	blt.n	8005e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	f003 021f 	and.w	r2, r3, #31
 8005dfc:	4907      	ldr	r1, [pc, #28]	; (8005e1c <__NVIC_EnableIRQ+0x38>)
 8005dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2001      	movs	r0, #1
 8005e06:	fa00 f202 	lsl.w	r2, r0, r2
 8005e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	e000e100 	.word	0xe000e100

08005e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	6039      	str	r1, [r7, #0]
 8005e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	db0a      	blt.n	8005e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	490c      	ldr	r1, [pc, #48]	; (8005e6c <__NVIC_SetPriority+0x4c>)
 8005e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3e:	0112      	lsls	r2, r2, #4
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	440b      	add	r3, r1
 8005e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e48:	e00a      	b.n	8005e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	4908      	ldr	r1, [pc, #32]	; (8005e70 <__NVIC_SetPriority+0x50>)
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	3b04      	subs	r3, #4
 8005e58:	0112      	lsls	r2, r2, #4
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	761a      	strb	r2, [r3, #24]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	e000e100 	.word	0xe000e100
 8005e70:	e000ed00 	.word	0xe000ed00

08005e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b089      	sub	sp, #36	; 0x24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f1c3 0307 	rsb	r3, r3, #7
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	bf28      	it	cs
 8005e92:	2304      	movcs	r3, #4
 8005e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	2b06      	cmp	r3, #6
 8005e9c:	d902      	bls.n	8005ea4 <NVIC_EncodePriority+0x30>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	3b03      	subs	r3, #3
 8005ea2:	e000      	b.n	8005ea6 <NVIC_EncodePriority+0x32>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ebc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec6:	43d9      	mvns	r1, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ecc:	4313      	orrs	r3, r2
         );
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3724      	adds	r7, #36	; 0x24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005eec:	d301      	bcc.n	8005ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e00f      	b.n	8005f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ef2:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <SysTick_Config+0x40>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005efa:	210f      	movs	r1, #15
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f00:	f7ff ff8e 	bl	8005e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f04:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <SysTick_Config+0x40>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f0a:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <SysTick_Config+0x40>)
 8005f0c:	2207      	movs	r2, #7
 8005f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	e000e010 	.word	0xe000e010

08005f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff29 	bl	8005d80 <__NVIC_SetPriorityGrouping>
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f44:	f7ff ff40 	bl	8005dc8 <__NVIC_GetPriorityGrouping>
 8005f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	6978      	ldr	r0, [r7, #20]
 8005f50:	f7ff ff90 	bl	8005e74 <NVIC_EncodePriority>
 8005f54:	4602      	mov	r2, r0
 8005f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff ff5f 	bl	8005e20 <__NVIC_SetPriority>
}
 8005f62:	bf00      	nop
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	4603      	mov	r3, r0
 8005f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff ff33 	bl	8005de4 <__NVIC_EnableIRQ>
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff ffa4 	bl	8005edc <SysTick_Config>
 8005f94:	4603      	mov	r3, r0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b082      	sub	sp, #8
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e014      	b.n	8005fda <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	791b      	ldrb	r3, [r3, #4]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fd ffe9 	bl	8003f98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	795b      	ldrb	r3, [r3, #5]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_DAC_Start+0x16>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e043      	b.n	8006080 <HAL_DAC_Start+0x9e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6819      	ldr	r1, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2201      	movs	r2, #1
 8006012:	409a      	lsls	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800601c:	2001      	movs	r0, #1
 800601e:	f7fe fd2d 	bl	8004a7c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10f      	bne.n	8006048 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006032:	2b02      	cmp	r3, #2
 8006034:	d11d      	bne.n	8006072 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	e014      	b.n	8006072 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2102      	movs	r1, #2
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	429a      	cmp	r2, r3
 8006060:	d107      	bne.n	8006072 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0202 	orr.w	r2, r2, #2
 8006070:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	; 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	795b      	ldrb	r3, [r3, #5]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_DAC_ConfigChannel+0x1c>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e196      	b.n	80063d2 <HAL_DAC_ConfigChannel+0x34a>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2202      	movs	r2, #2
 80060ae:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d174      	bne.n	80061a2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d137      	bne.n	800612e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80060be:	f7fe fcd1 	bl	8004a64 <HAL_GetTick>
 80060c2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80060c4:	e011      	b.n	80060ea <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80060c6:	f7fe fccd 	bl	8004a64 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d90a      	bls.n	80060ea <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f043 0208 	orr.w	r2, r3, #8
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2203      	movs	r2, #3
 80060e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e173      	b.n	80063d2 <HAL_DAC_ConfigChannel+0x34a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e6      	bne.n	80060c6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80060f8:	2001      	movs	r0, #1
 80060fa:	f7fe fcbf 	bl	8004a7c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006106:	641a      	str	r2, [r3, #64]	; 0x40
 8006108:	e01e      	b.n	8006148 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800610a:	f7fe fcab 	bl	8004a64 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	d90a      	bls.n	800612e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f043 0208 	orr.w	r2, r3, #8
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2203      	movs	r2, #3
 8006128:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e151      	b.n	80063d2 <HAL_DAC_ConfigChannel+0x34a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006134:	2b00      	cmp	r3, #0
 8006136:	dbe8      	blt.n	800610a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8006138:	2001      	movs	r0, #1
 800613a:	f7fe fc9f 	bl	8004a7c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006146:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006158:	fa01 f303 	lsl.w	r3, r1, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	ea02 0103 	and.w	r1, r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	409a      	lsls	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	21ff      	movs	r1, #255	; 0xff
 8006184:	fa01 f303 	lsl.w	r3, r1, r3
 8006188:	43db      	mvns	r3, r3
 800618a:	ea02 0103 	and.w	r1, r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	409a      	lsls	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d11d      	bne.n	80061e6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	221f      	movs	r2, #31
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c2:	4013      	ands	r3, r2
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	4313      	orrs	r3, r2
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2207      	movs	r2, #7
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fe:	4013      	ands	r3, r2
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800620e:	2300      	movs	r3, #0
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	e011      	b.n	8006238 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006220:	2301      	movs	r3, #1
 8006222:	623b      	str	r3, [r7, #32]
 8006224:	e008      	b.n	8006238 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800622e:	2301      	movs	r3, #1
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	e001      	b.n	8006238 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006234:	2300      	movs	r3, #0
 8006236:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	4313      	orrs	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625a:	4013      	ands	r3, r2
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	791b      	ldrb	r3, [r3, #4]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d102      	bne.n	800626c <HAL_DAC_ConfigChannel+0x1e4>
 8006266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800626a:	e000      	b.n	800626e <HAL_DAC_ConfigChannel+0x1e6>
 800626c:	2300      	movs	r3, #0
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4313      	orrs	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43db      	mvns	r3, r3
 8006284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006286:	4013      	ands	r3, r2
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	795b      	ldrb	r3, [r3, #5]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d102      	bne.n	8006298 <HAL_DAC_ConfigChannel+0x210>
 8006292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006296:	e000      	b.n	800629a <HAL_DAC_ConfigChannel+0x212>
 8006298:	2300      	movs	r3, #0
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4313      	orrs	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d114      	bne.n	80062da <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80062b0:	f001 fac0 	bl	8007834 <HAL_RCC_GetHCLKFreq>
 80062b4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4a48      	ldr	r2, [pc, #288]	; (80063dc <HAL_DAC_ConfigChannel+0x354>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d904      	bls.n	80062c8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
 80062c6:	e00f      	b.n	80062e8 <HAL_DAC_ConfigChannel+0x260>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4a45      	ldr	r2, [pc, #276]	; (80063e0 <HAL_DAC_ConfigChannel+0x358>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d90a      	bls.n	80062e6 <HAL_DAC_ConfigChannel+0x25e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
 80062d8:	e006      	b.n	80062e8 <HAL_DAC_ConfigChannel+0x260>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e0:	4313      	orrs	r3, r2
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	e000      	b.n	80062e8 <HAL_DAC_ConfigChannel+0x260>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80062e6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f6:	4313      	orrs	r3, r2
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6819      	ldr	r1, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	43da      	mvns	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	400a      	ands	r2, r1
 800631e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43db      	mvns	r3, r3
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	4013      	ands	r3, r2
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006352:	4313      	orrs	r3, r2
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	22c0      	movs	r2, #192	; 0xc0
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	43da      	mvns	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	400a      	ands	r2, r1
 8006378:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	089b      	lsrs	r3, r3, #2
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	089b      	lsrs	r3, r3, #2
 800638c:	021b      	lsls	r3, r3, #8
 800638e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80063a8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	ea02 0103 	and.w	r1, r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	409a      	lsls	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3728      	adds	r7, #40	; 0x28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	09896800 	.word	0x09896800
 80063e0:	04c4b400 	.word	0x04c4b400

080063e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e08d      	b.n	8006512 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	4b47      	ldr	r3, [pc, #284]	; (800651c <HAL_DMA_Init+0x138>)
 80063fe:	429a      	cmp	r2, r3
 8006400:	d80f      	bhi.n	8006422 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	4b45      	ldr	r3, [pc, #276]	; (8006520 <HAL_DMA_Init+0x13c>)
 800640a:	4413      	add	r3, r2
 800640c:	4a45      	ldr	r2, [pc, #276]	; (8006524 <HAL_DMA_Init+0x140>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	091b      	lsrs	r3, r3, #4
 8006414:	009a      	lsls	r2, r3, #2
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a42      	ldr	r2, [pc, #264]	; (8006528 <HAL_DMA_Init+0x144>)
 800641e:	641a      	str	r2, [r3, #64]	; 0x40
 8006420:	e00e      	b.n	8006440 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	4b40      	ldr	r3, [pc, #256]	; (800652c <HAL_DMA_Init+0x148>)
 800642a:	4413      	add	r3, r2
 800642c:	4a3d      	ldr	r2, [pc, #244]	; (8006524 <HAL_DMA_Init+0x140>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	009a      	lsls	r2, r3, #2
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a3c      	ldr	r2, [pc, #240]	; (8006530 <HAL_DMA_Init+0x14c>)
 800643e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800647c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa1e 	bl	80068d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064a0:	d102      	bne.n	80064a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80064bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d010      	beq.n	80064e8 <HAL_DMA_Init+0x104>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d80c      	bhi.n	80064e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa3e 	bl	8006950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80064e4:	605a      	str	r2, [r3, #4]
 80064e6:	e008      	b.n	80064fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40020407 	.word	0x40020407
 8006520:	bffdfff8 	.word	0xbffdfff8
 8006524:	cccccccd 	.word	0xcccccccd
 8006528:	40020000 	.word	0x40020000
 800652c:	bffdfbf8 	.word	0xbffdfbf8
 8006530:	40020400 	.word	0x40020400

08006534 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_DMA_Start_IT+0x20>
 8006550:	2302      	movs	r3, #2
 8006552:	e066      	b.n	8006622 <HAL_DMA_Start_IT+0xee>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d155      	bne.n	8006614 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0201 	bic.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f962 	bl	8006856 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	2b00      	cmp	r3, #0
 8006598:	d008      	beq.n	80065ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 020e 	orr.w	r2, r2, #14
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e00f      	b.n	80065cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0204 	bic.w	r2, r2, #4
 80065ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 020a 	orr.w	r2, r2, #10
 80065ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006600:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	e005      	b.n	8006620 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800661c:	2302      	movs	r3, #2
 800661e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006620:	7dfb      	ldrb	r3, [r7, #23]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d00d      	beq.n	800665e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2204      	movs	r2, #4
 8006646:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
 800665c:	e047      	b.n	80066ee <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 020e 	bic.w	r2, r2, #14
 800666c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0201 	bic.w	r2, r2, #1
 800667c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800668c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	f003 021f 	and.w	r2, r3, #31
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	2101      	movs	r1, #1
 800669c:	fa01 f202 	lsl.w	r2, r1, r2
 80066a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00c      	beq.n	80066ce <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80066cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
    }
  }
  return status;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	2204      	movs	r2, #4
 800671a:	409a      	lsls	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4013      	ands	r3, r2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d026      	beq.n	8006772 <HAL_DMA_IRQHandler+0x7a>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d021      	beq.n	8006772 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d107      	bne.n	800674c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0204 	bic.w	r2, r2, #4
 800674a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006750:	f003 021f 	and.w	r2, r3, #31
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	2104      	movs	r1, #4
 800675a:	fa01 f202 	lsl.w	r2, r1, r2
 800675e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006764:	2b00      	cmp	r3, #0
 8006766:	d071      	beq.n	800684c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006770:	e06c      	b.n	800684c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2202      	movs	r2, #2
 800677c:	409a      	lsls	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02e      	beq.n	80067e4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d029      	beq.n	80067e4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10b      	bne.n	80067b6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 020a 	bic.w	r2, r2, #10
 80067ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	f003 021f 	and.w	r2, r3, #31
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	2102      	movs	r1, #2
 80067c4:	fa01 f202 	lsl.w	r2, r1, r2
 80067c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d038      	beq.n	800684c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80067e2:	e033      	b.n	800684c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e8:	f003 031f 	and.w	r3, r3, #31
 80067ec:	2208      	movs	r2, #8
 80067ee:	409a      	lsls	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4013      	ands	r3, r2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d02a      	beq.n	800684e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d025      	beq.n	800684e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 020e 	bic.w	r2, r2, #14
 8006810:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	f003 021f 	and.w	r2, r3, #31
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	2101      	movs	r1, #1
 8006820:	fa01 f202 	lsl.w	r2, r1, r2
 8006824:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800684c:	bf00      	nop
 800684e:	bf00      	nop
}
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	607a      	str	r2, [r7, #4]
 8006862:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800686c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800687e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	f003 021f 	and.w	r2, r3, #31
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	2101      	movs	r1, #1
 800688e:	fa01 f202 	lsl.w	r2, r1, r2
 8006892:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	2b10      	cmp	r3, #16
 80068a2:	d108      	bne.n	80068b6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80068b4:	e007      	b.n	80068c6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b16      	ldr	r3, [pc, #88]	; (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d802      	bhi.n	80068ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e001      	b.n	80068f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80068ee:	4b15      	ldr	r3, [pc, #84]	; (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80068f0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	3b08      	subs	r3, #8
 80068fe:	4a12      	ldr	r2, [pc, #72]	; (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006900:	fba2 2303 	umull	r2, r3, r2, r3
 8006904:	091b      	lsrs	r3, r3, #4
 8006906:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690c:	089b      	lsrs	r3, r3, #2
 800690e:	009a      	lsls	r2, r3, #2
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	461a      	mov	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a0b      	ldr	r2, [pc, #44]	; (800694c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800691e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	2201      	movs	r2, #1
 8006928:	409a      	lsls	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40020407 	.word	0x40020407
 8006940:	40020800 	.word	0x40020800
 8006944:	40020820 	.word	0x40020820
 8006948:	cccccccd 	.word	0xcccccccd
 800694c:	40020880 	.word	0x40020880

08006950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	461a      	mov	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a08      	ldr	r2, [pc, #32]	; (8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006972:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3b01      	subs	r3, #1
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	2201      	movs	r2, #1
 800697e:	409a      	lsls	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	1000823f 	.word	0x1000823f
 8006994:	40020940 	.word	0x40020940

08006998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80069a6:	e15a      	b.n	8006c5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	2101      	movs	r1, #1
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	fa01 f303 	lsl.w	r3, r1, r3
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 814c 	beq.w	8006c58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d00b      	beq.n	80069e0 <HAL_GPIO_Init+0x48>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d007      	beq.n	80069e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80069d4:	2b11      	cmp	r3, #17
 80069d6:	d003      	beq.n	80069e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b12      	cmp	r3, #18
 80069de:	d130      	bne.n	8006a42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	2203      	movs	r2, #3
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	43db      	mvns	r3, r3
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4013      	ands	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a16:	2201      	movs	r2, #1
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4013      	ands	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	091b      	lsrs	r3, r3, #4
 8006a2c:	f003 0201 	and.w	r2, r3, #1
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4013      	ands	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d003      	beq.n	8006a82 <HAL_GPIO_Init+0xea>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b12      	cmp	r3, #18
 8006a80:	d123      	bne.n	8006aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	08da      	lsrs	r2, r3, #3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3208      	adds	r2, #8
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	220f      	movs	r2, #15
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	08da      	lsrs	r2, r3, #3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3208      	adds	r2, #8
 8006ac4:	6939      	ldr	r1, [r7, #16]
 8006ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	43db      	mvns	r3, r3
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f003 0203 	and.w	r2, r3, #3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80a6 	beq.w	8006c58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b0c:	4b5b      	ldr	r3, [pc, #364]	; (8006c7c <HAL_GPIO_Init+0x2e4>)
 8006b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b10:	4a5a      	ldr	r2, [pc, #360]	; (8006c7c <HAL_GPIO_Init+0x2e4>)
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	6613      	str	r3, [r2, #96]	; 0x60
 8006b18:	4b58      	ldr	r3, [pc, #352]	; (8006c7c <HAL_GPIO_Init+0x2e4>)
 8006b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	60bb      	str	r3, [r7, #8]
 8006b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b24:	4a56      	ldr	r2, [pc, #344]	; (8006c80 <HAL_GPIO_Init+0x2e8>)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	089b      	lsrs	r3, r3, #2
 8006b2a:	3302      	adds	r3, #2
 8006b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f003 0303 	and.w	r3, r3, #3
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	220f      	movs	r2, #15
 8006b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b40:	43db      	mvns	r3, r3
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4013      	ands	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b4e:	d01f      	beq.n	8006b90 <HAL_GPIO_Init+0x1f8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a4c      	ldr	r2, [pc, #304]	; (8006c84 <HAL_GPIO_Init+0x2ec>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d019      	beq.n	8006b8c <HAL_GPIO_Init+0x1f4>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a4b      	ldr	r2, [pc, #300]	; (8006c88 <HAL_GPIO_Init+0x2f0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d013      	beq.n	8006b88 <HAL_GPIO_Init+0x1f0>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a4a      	ldr	r2, [pc, #296]	; (8006c8c <HAL_GPIO_Init+0x2f4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00d      	beq.n	8006b84 <HAL_GPIO_Init+0x1ec>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a49      	ldr	r2, [pc, #292]	; (8006c90 <HAL_GPIO_Init+0x2f8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d007      	beq.n	8006b80 <HAL_GPIO_Init+0x1e8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a48      	ldr	r2, [pc, #288]	; (8006c94 <HAL_GPIO_Init+0x2fc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d101      	bne.n	8006b7c <HAL_GPIO_Init+0x1e4>
 8006b78:	2305      	movs	r3, #5
 8006b7a:	e00a      	b.n	8006b92 <HAL_GPIO_Init+0x1fa>
 8006b7c:	2306      	movs	r3, #6
 8006b7e:	e008      	b.n	8006b92 <HAL_GPIO_Init+0x1fa>
 8006b80:	2304      	movs	r3, #4
 8006b82:	e006      	b.n	8006b92 <HAL_GPIO_Init+0x1fa>
 8006b84:	2303      	movs	r3, #3
 8006b86:	e004      	b.n	8006b92 <HAL_GPIO_Init+0x1fa>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e002      	b.n	8006b92 <HAL_GPIO_Init+0x1fa>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <HAL_GPIO_Init+0x1fa>
 8006b90:	2300      	movs	r3, #0
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	f002 0203 	and.w	r2, r2, #3
 8006b98:	0092      	lsls	r2, r2, #2
 8006b9a:	4093      	lsls	r3, r2
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ba2:	4937      	ldr	r1, [pc, #220]	; (8006c80 <HAL_GPIO_Init+0x2e8>)
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	3302      	adds	r3, #2
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006bb0:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <HAL_GPIO_Init+0x300>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bd4:	4a30      	ldr	r2, [pc, #192]	; (8006c98 <HAL_GPIO_Init+0x300>)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006bda:	4b2f      	ldr	r3, [pc, #188]	; (8006c98 <HAL_GPIO_Init+0x300>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	43db      	mvns	r3, r3
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4013      	ands	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006bfe:	4a26      	ldr	r2, [pc, #152]	; (8006c98 <HAL_GPIO_Init+0x300>)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c04:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <HAL_GPIO_Init+0x300>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4013      	ands	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c28:	4a1b      	ldr	r2, [pc, #108]	; (8006c98 <HAL_GPIO_Init+0x300>)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c2e:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <HAL_GPIO_Init+0x300>)
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	43db      	mvns	r3, r3
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c52:	4a11      	ldr	r2, [pc, #68]	; (8006c98 <HAL_GPIO_Init+0x300>)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f47f ae9d 	bne.w	80069a8 <HAL_GPIO_Init+0x10>
  }
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	40010000 	.word	0x40010000
 8006c84:	48000400 	.word	0x48000400
 8006c88:	48000800 	.word	0x48000800
 8006c8c:	48000c00 	.word	0x48000c00
 8006c90:	48001000 	.word	0x48001000
 8006c94:	48001400 	.word	0x48001400
 8006c98:	40010400 	.word	0x40010400

08006c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	73fb      	strb	r3, [r7, #15]
 8006cb8:	e001      	b.n	8006cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	807b      	strh	r3, [r7, #2]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cdc:	787b      	ldrb	r3, [r7, #1]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ce2:	887a      	ldrh	r2, [r7, #2]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ce8:	e002      	b.n	8006cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006cea:	887a      	ldrh	r2, [r7, #2]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d0e:	887a      	ldrh	r2, [r7, #2]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4013      	ands	r3, r2
 8006d14:	041a      	lsls	r2, r3, #16
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	43d9      	mvns	r1, r3
 8006d1a:	887b      	ldrh	r3, [r7, #2]
 8006d1c:	400b      	ands	r3, r1
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	619a      	str	r2, [r3, #24]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d3c:	695a      	ldr	r2, [r3, #20]
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d006      	beq.n	8006d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d46:	4a05      	ldr	r2, [pc, #20]	; (8006d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d48:	88fb      	ldrh	r3, [r7, #6]
 8006d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fb f820 	bl	8001d94 <HAL_GPIO_EXTI_Callback>
  }
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40010400 	.word	0x40010400

08006d60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d141      	bne.n	8006df2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d6e:	4b4b      	ldr	r3, [pc, #300]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d7a:	d131      	bne.n	8006de0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d7c:	4b47      	ldr	r3, [pc, #284]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d82:	4a46      	ldr	r2, [pc, #280]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d8c:	4b43      	ldr	r3, [pc, #268]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d94:	4a41      	ldr	r2, [pc, #260]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d9c:	4b40      	ldr	r3, [pc, #256]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2232      	movs	r2, #50	; 0x32
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	4a3f      	ldr	r2, [pc, #252]	; (8006ea4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006da8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dac:	0c9b      	lsrs	r3, r3, #18
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006db2:	e002      	b.n	8006dba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dba:	4b38      	ldr	r3, [pc, #224]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc6:	d102      	bne.n	8006dce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f2      	bne.n	8006db4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dce:	4b33      	ldr	r3, [pc, #204]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dda:	d158      	bne.n	8006e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e057      	b.n	8006e90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006de0:	4b2e      	ldr	r3, [pc, #184]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de6:	4a2d      	ldr	r2, [pc, #180]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006df0:	e04d      	b.n	8006e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df8:	d141      	bne.n	8006e7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006dfa:	4b28      	ldr	r3, [pc, #160]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e06:	d131      	bne.n	8006e6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e08:	4b24      	ldr	r3, [pc, #144]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e0e:	4a23      	ldr	r2, [pc, #140]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e18:	4b20      	ldr	r3, [pc, #128]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e20:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e28:	4b1d      	ldr	r3, [pc, #116]	; (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2232      	movs	r2, #50	; 0x32
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	4a1c      	ldr	r2, [pc, #112]	; (8006ea4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	0c9b      	lsrs	r3, r3, #18
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e3e:	e002      	b.n	8006e46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e46:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e52:	d102      	bne.n	8006e5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f2      	bne.n	8006e40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e5a:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e66:	d112      	bne.n	8006e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e011      	b.n	8006e90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e72:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006e7c:	e007      	b.n	8006e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e86:	4a05      	ldr	r2, [pc, #20]	; (8006e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	40007000 	.word	0x40007000
 8006ea0:	20000000 	.word	0x20000000
 8006ea4:	431bde83 	.word	0x431bde83

08006ea8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	4a04      	ldr	r2, [pc, #16]	; (8006ec4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006eb6:	6093      	str	r3, [r2, #8]
}
 8006eb8:	bf00      	nop
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40007000 	.word	0x40007000

08006ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e308      	b.n	80074ec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d075      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ee6:	4ba3      	ldr	r3, [pc, #652]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 030c 	and.w	r3, r3, #12
 8006eee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ef0:	4ba0      	ldr	r3, [pc, #640]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0303 	and.w	r3, r3, #3
 8006ef8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b0c      	cmp	r3, #12
 8006efe:	d102      	bne.n	8006f06 <HAL_RCC_OscConfig+0x3e>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d002      	beq.n	8006f0c <HAL_RCC_OscConfig+0x44>
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d10b      	bne.n	8006f24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f0c:	4b99      	ldr	r3, [pc, #612]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d05b      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x108>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d157      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e2e3      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f2c:	d106      	bne.n	8006f3c <HAL_RCC_OscConfig+0x74>
 8006f2e:	4b91      	ldr	r3, [pc, #580]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a90      	ldr	r2, [pc, #576]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e01d      	b.n	8006f78 <HAL_RCC_OscConfig+0xb0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f44:	d10c      	bne.n	8006f60 <HAL_RCC_OscConfig+0x98>
 8006f46:	4b8b      	ldr	r3, [pc, #556]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a8a      	ldr	r2, [pc, #552]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	4b88      	ldr	r3, [pc, #544]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a87      	ldr	r2, [pc, #540]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	e00b      	b.n	8006f78 <HAL_RCC_OscConfig+0xb0>
 8006f60:	4b84      	ldr	r3, [pc, #528]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a83      	ldr	r2, [pc, #524]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	4b81      	ldr	r3, [pc, #516]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a80      	ldr	r2, [pc, #512]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d013      	beq.n	8006fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f80:	f7fd fd70 	bl	8004a64 <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f88:	f7fd fd6c 	bl	8004a64 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b64      	cmp	r3, #100	; 0x64
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e2a8      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f9a:	4b76      	ldr	r3, [pc, #472]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f0      	beq.n	8006f88 <HAL_RCC_OscConfig+0xc0>
 8006fa6:	e014      	b.n	8006fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa8:	f7fd fd5c 	bl	8004a64 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb0:	f7fd fd58 	bl	8004a64 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b64      	cmp	r3, #100	; 0x64
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e294      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fc2:	4b6c      	ldr	r3, [pc, #432]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <HAL_RCC_OscConfig+0xe8>
 8006fce:	e000      	b.n	8006fd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d075      	beq.n	80070ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fde:	4b65      	ldr	r3, [pc, #404]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fe8:	4b62      	ldr	r3, [pc, #392]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b0c      	cmp	r3, #12
 8006ff6:	d102      	bne.n	8006ffe <HAL_RCC_OscConfig+0x136>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d002      	beq.n	8007004 <HAL_RCC_OscConfig+0x13c>
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d11f      	bne.n	8007044 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007004:	4b5b      	ldr	r3, [pc, #364]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <HAL_RCC_OscConfig+0x154>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e267      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800701c:	4b55      	ldr	r3, [pc, #340]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	061b      	lsls	r3, r3, #24
 800702a:	4952      	ldr	r1, [pc, #328]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800702c:	4313      	orrs	r3, r2
 800702e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007030:	4b51      	ldr	r3, [pc, #324]	; (8007178 <HAL_RCC_OscConfig+0x2b0>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4618      	mov	r0, r3
 8007036:	f7fd fcc9 	bl	80049cc <HAL_InitTick>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d043      	beq.n	80070c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e253      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d023      	beq.n	8007094 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800704c:	4b49      	ldr	r3, [pc, #292]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a48      	ldr	r2, [pc, #288]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007058:	f7fd fd04 	bl	8004a64 <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007060:	f7fd fd00 	bl	8004a64 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e23c      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007072:	4b40      	ldr	r3, [pc, #256]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0f0      	beq.n	8007060 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707e:	4b3d      	ldr	r3, [pc, #244]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	061b      	lsls	r3, r3, #24
 800708c:	4939      	ldr	r1, [pc, #228]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800708e:	4313      	orrs	r3, r2
 8007090:	604b      	str	r3, [r1, #4]
 8007092:	e01a      	b.n	80070ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007094:	4b37      	ldr	r3, [pc, #220]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a36      	ldr	r2, [pc, #216]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800709a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fd fce0 	bl	8004a64 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070a8:	f7fd fcdc 	bl	8004a64 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e218      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070ba:	4b2e      	ldr	r3, [pc, #184]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0x1e0>
 80070c6:	e000      	b.n	80070ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d03c      	beq.n	8007150 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d01c      	beq.n	8007118 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070de:	4b25      	ldr	r3, [pc, #148]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 80070e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070e4:	4a23      	ldr	r2, [pc, #140]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 80070e6:	f043 0301 	orr.w	r3, r3, #1
 80070ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ee:	f7fd fcb9 	bl	8004a64 <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070f6:	f7fd fcb5 	bl	8004a64 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e1f1      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007108:	4b1a      	ldr	r3, [pc, #104]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800710a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0ef      	beq.n	80070f6 <HAL_RCC_OscConfig+0x22e>
 8007116:	e01b      	b.n	8007150 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007118:	4b16      	ldr	r3, [pc, #88]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 800711a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800711e:	4a15      	ldr	r2, [pc, #84]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007120:	f023 0301 	bic.w	r3, r3, #1
 8007124:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007128:	f7fd fc9c 	bl	8004a64 <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007130:	f7fd fc98 	bl	8004a64 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e1d4      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007142:	4b0c      	ldr	r3, [pc, #48]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1ef      	bne.n	8007130 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80ab 	beq.w	80072b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800715e:	2300      	movs	r3, #0
 8007160:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007162:	4b04      	ldr	r3, [pc, #16]	; (8007174 <HAL_RCC_OscConfig+0x2ac>)
 8007164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <HAL_RCC_OscConfig+0x2b4>
 800716e:	2301      	movs	r3, #1
 8007170:	e005      	b.n	800717e <HAL_RCC_OscConfig+0x2b6>
 8007172:	bf00      	nop
 8007174:	40021000 	.word	0x40021000
 8007178:	20000004 	.word	0x20000004
 800717c:	2300      	movs	r3, #0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00d      	beq.n	800719e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007182:	4baf      	ldr	r3, [pc, #700]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007186:	4aae      	ldr	r2, [pc, #696]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800718c:	6593      	str	r3, [r2, #88]	; 0x58
 800718e:	4bac      	ldr	r3, [pc, #688]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800719a:	2301      	movs	r3, #1
 800719c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800719e:	4ba9      	ldr	r3, [pc, #676]	; (8007444 <HAL_RCC_OscConfig+0x57c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d118      	bne.n	80071dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071aa:	4ba6      	ldr	r3, [pc, #664]	; (8007444 <HAL_RCC_OscConfig+0x57c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4aa5      	ldr	r2, [pc, #660]	; (8007444 <HAL_RCC_OscConfig+0x57c>)
 80071b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071b6:	f7fd fc55 	bl	8004a64 <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071be:	f7fd fc51 	bl	8004a64 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e18d      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071d0:	4b9c      	ldr	r3, [pc, #624]	; (8007444 <HAL_RCC_OscConfig+0x57c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d108      	bne.n	80071f6 <HAL_RCC_OscConfig+0x32e>
 80071e4:	4b96      	ldr	r3, [pc, #600]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	4a95      	ldr	r2, [pc, #596]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071f4:	e024      	b.n	8007240 <HAL_RCC_OscConfig+0x378>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	2b05      	cmp	r3, #5
 80071fc:	d110      	bne.n	8007220 <HAL_RCC_OscConfig+0x358>
 80071fe:	4b90      	ldr	r3, [pc, #576]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007204:	4a8e      	ldr	r2, [pc, #568]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007206:	f043 0304 	orr.w	r3, r3, #4
 800720a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800720e:	4b8c      	ldr	r3, [pc, #560]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007214:	4a8a      	ldr	r2, [pc, #552]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007216:	f043 0301 	orr.w	r3, r3, #1
 800721a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800721e:	e00f      	b.n	8007240 <HAL_RCC_OscConfig+0x378>
 8007220:	4b87      	ldr	r3, [pc, #540]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	4a86      	ldr	r2, [pc, #536]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007228:	f023 0301 	bic.w	r3, r3, #1
 800722c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007230:	4b83      	ldr	r3, [pc, #524]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007236:	4a82      	ldr	r2, [pc, #520]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007238:	f023 0304 	bic.w	r3, r3, #4
 800723c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d016      	beq.n	8007276 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007248:	f7fd fc0c 	bl	8004a64 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800724e:	e00a      	b.n	8007266 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007250:	f7fd fc08 	bl	8004a64 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	f241 3288 	movw	r2, #5000	; 0x1388
 800725e:	4293      	cmp	r3, r2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e142      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007266:	4b76      	ldr	r3, [pc, #472]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0ed      	beq.n	8007250 <HAL_RCC_OscConfig+0x388>
 8007274:	e015      	b.n	80072a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007276:	f7fd fbf5 	bl	8004a64 <HAL_GetTick>
 800727a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800727c:	e00a      	b.n	8007294 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800727e:	f7fd fbf1 	bl	8004a64 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	f241 3288 	movw	r2, #5000	; 0x1388
 800728c:	4293      	cmp	r3, r2
 800728e:	d901      	bls.n	8007294 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e12b      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007294:	4b6a      	ldr	r3, [pc, #424]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1ed      	bne.n	800727e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072a2:	7ffb      	ldrb	r3, [r7, #31]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d105      	bne.n	80072b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072a8:	4b65      	ldr	r3, [pc, #404]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80072aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ac:	4a64      	ldr	r2, [pc, #400]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80072ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d03c      	beq.n	800733a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01c      	beq.n	8007302 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072c8:	4b5d      	ldr	r3, [pc, #372]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80072ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072ce:	4a5c      	ldr	r2, [pc, #368]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80072d0:	f043 0301 	orr.w	r3, r3, #1
 80072d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d8:	f7fd fbc4 	bl	8004a64 <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072e0:	f7fd fbc0 	bl	8004a64 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e0fc      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072f2:	4b53      	ldr	r3, [pc, #332]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80072f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0ef      	beq.n	80072e0 <HAL_RCC_OscConfig+0x418>
 8007300:	e01b      	b.n	800733a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007302:	4b4f      	ldr	r3, [pc, #316]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007308:	4a4d      	ldr	r2, [pc, #308]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007312:	f7fd fba7 	bl	8004a64 <HAL_GetTick>
 8007316:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007318:	e008      	b.n	800732c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800731a:	f7fd fba3 	bl	8004a64 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e0df      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800732c:	4b44      	ldr	r3, [pc, #272]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 800732e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1ef      	bne.n	800731a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 80d3 	beq.w	80074ea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007344:	4b3e      	ldr	r3, [pc, #248]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 030c 	and.w	r3, r3, #12
 800734c:	2b0c      	cmp	r3, #12
 800734e:	f000 808d 	beq.w	800746c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	2b02      	cmp	r3, #2
 8007358:	d15a      	bne.n	8007410 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800735a:	4b39      	ldr	r3, [pc, #228]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a38      	ldr	r2, [pc, #224]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007366:	f7fd fb7d 	bl	8004a64 <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800736e:	f7fd fb79 	bl	8004a64 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e0b5      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007380:	4b2f      	ldr	r3, [pc, #188]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f0      	bne.n	800736e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800738c:	4b2c      	ldr	r3, [pc, #176]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <HAL_RCC_OscConfig+0x580>)
 8007392:	4013      	ands	r3, r2
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6a11      	ldr	r1, [r2, #32]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800739c:	3a01      	subs	r2, #1
 800739e:	0112      	lsls	r2, r2, #4
 80073a0:	4311      	orrs	r1, r2
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80073a6:	0212      	lsls	r2, r2, #8
 80073a8:	4311      	orrs	r1, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073ae:	0852      	lsrs	r2, r2, #1
 80073b0:	3a01      	subs	r2, #1
 80073b2:	0552      	lsls	r2, r2, #21
 80073b4:	4311      	orrs	r1, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073ba:	0852      	lsrs	r2, r2, #1
 80073bc:	3a01      	subs	r2, #1
 80073be:	0652      	lsls	r2, r2, #25
 80073c0:	4311      	orrs	r1, r2
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80073c6:	06d2      	lsls	r2, r2, #27
 80073c8:	430a      	orrs	r2, r1
 80073ca:	491d      	ldr	r1, [pc, #116]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1a      	ldr	r2, [pc, #104]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80073d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073dc:	4b18      	ldr	r3, [pc, #96]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	4a17      	ldr	r2, [pc, #92]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 80073e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e8:	f7fd fb3c 	bl	8004a64 <HAL_GetTick>
 80073ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073ee:	e008      	b.n	8007402 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f0:	f7fd fb38 	bl	8004a64 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e074      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007402:	4b0f      	ldr	r3, [pc, #60]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f0      	beq.n	80073f0 <HAL_RCC_OscConfig+0x528>
 800740e:	e06c      	b.n	80074ea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a0a      	ldr	r2, [pc, #40]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800741a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800741c:	4b08      	ldr	r3, [pc, #32]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	4a07      	ldr	r2, [pc, #28]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 8007422:	f023 0303 	bic.w	r3, r3, #3
 8007426:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007428:	4b05      	ldr	r3, [pc, #20]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	4a04      	ldr	r2, [pc, #16]	; (8007440 <HAL_RCC_OscConfig+0x578>)
 800742e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007436:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007438:	f7fd fb14 	bl	8004a64 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800743e:	e00e      	b.n	800745e <HAL_RCC_OscConfig+0x596>
 8007440:	40021000 	.word	0x40021000
 8007444:	40007000 	.word	0x40007000
 8007448:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800744c:	f7fd fb0a 	bl	8004a64 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e046      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800745e:	4b25      	ldr	r3, [pc, #148]	; (80074f4 <HAL_RCC_OscConfig+0x62c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f0      	bne.n	800744c <HAL_RCC_OscConfig+0x584>
 800746a:	e03e      	b.n	80074ea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e039      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007478:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <HAL_RCC_OscConfig+0x62c>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f003 0203 	and.w	r2, r3, #3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	429a      	cmp	r2, r3
 800748a:	d12c      	bne.n	80074e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	3b01      	subs	r3, #1
 8007498:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749a:	429a      	cmp	r2, r3
 800749c:	d123      	bne.n	80074e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d11b      	bne.n	80074e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d113      	bne.n	80074e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	085b      	lsrs	r3, r3, #1
 80074ca:	3b01      	subs	r3, #1
 80074cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d109      	bne.n	80074e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074dc:	085b      	lsrs	r3, r3, #1
 80074de:	3b01      	subs	r3, #1
 80074e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d001      	beq.n	80074ea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40021000 	.word	0x40021000

080074f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e11e      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007510:	4b91      	ldr	r3, [pc, #580]	; (8007758 <HAL_RCC_ClockConfig+0x260>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d910      	bls.n	8007540 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800751e:	4b8e      	ldr	r3, [pc, #568]	; (8007758 <HAL_RCC_ClockConfig+0x260>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f023 020f 	bic.w	r2, r3, #15
 8007526:	498c      	ldr	r1, [pc, #560]	; (8007758 <HAL_RCC_ClockConfig+0x260>)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	4313      	orrs	r3, r2
 800752c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800752e:	4b8a      	ldr	r3, [pc, #552]	; (8007758 <HAL_RCC_ClockConfig+0x260>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d001      	beq.n	8007540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e106      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d073      	beq.n	8007634 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2b03      	cmp	r3, #3
 8007552:	d129      	bne.n	80075a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007554:	4b81      	ldr	r3, [pc, #516]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e0f4      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007564:	f000 f99e 	bl	80078a4 <RCC_GetSysClockFreqFromPLLSource>
 8007568:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	4a7c      	ldr	r2, [pc, #496]	; (8007760 <HAL_RCC_ClockConfig+0x268>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d93f      	bls.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007572:	4b7a      	ldr	r3, [pc, #488]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007586:	2b00      	cmp	r3, #0
 8007588:	d033      	beq.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800758e:	2b00      	cmp	r3, #0
 8007590:	d12f      	bne.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007592:	4b72      	ldr	r3, [pc, #456]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800759a:	4a70      	ldr	r2, [pc, #448]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 800759c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80075a2:	2380      	movs	r3, #128	; 0x80
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e024      	b.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d107      	bne.n	80075c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075b0:	4b6a      	ldr	r3, [pc, #424]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0c6      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075c0:	4b66      	ldr	r3, [pc, #408]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0be      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80075d0:	f000 f8ce 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 80075d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	4a61      	ldr	r2, [pc, #388]	; (8007760 <HAL_RCC_ClockConfig+0x268>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d909      	bls.n	80075f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075de:	4b5f      	ldr	r3, [pc, #380]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075e6:	4a5d      	ldr	r2, [pc, #372]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 80075e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80075ee:	2380      	movs	r3, #128	; 0x80
 80075f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075f2:	4b5a      	ldr	r3, [pc, #360]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f023 0203 	bic.w	r2, r3, #3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	4957      	ldr	r1, [pc, #348]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007600:	4313      	orrs	r3, r2
 8007602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007604:	f7fd fa2e 	bl	8004a64 <HAL_GetTick>
 8007608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800760a:	e00a      	b.n	8007622 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800760c:	f7fd fa2a 	bl	8004a64 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	f241 3288 	movw	r2, #5000	; 0x1388
 800761a:	4293      	cmp	r3, r2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e095      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007622:	4b4e      	ldr	r3, [pc, #312]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f003 020c 	and.w	r2, r3, #12
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	429a      	cmp	r2, r3
 8007632:	d1eb      	bne.n	800760c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d023      	beq.n	8007688 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800764c:	4b43      	ldr	r3, [pc, #268]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	4a42      	ldr	r2, [pc, #264]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007656:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007664:	4b3d      	ldr	r3, [pc, #244]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800766c:	4a3b      	ldr	r2, [pc, #236]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 800766e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007672:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007674:	4b39      	ldr	r3, [pc, #228]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4936      	ldr	r1, [pc, #216]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007682:	4313      	orrs	r3, r2
 8007684:	608b      	str	r3, [r1, #8]
 8007686:	e008      	b.n	800769a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2b80      	cmp	r3, #128	; 0x80
 800768c:	d105      	bne.n	800769a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800768e:	4b33      	ldr	r3, [pc, #204]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	4a32      	ldr	r2, [pc, #200]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007698:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800769a:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <HAL_RCC_ClockConfig+0x260>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d21d      	bcs.n	80076e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a8:	4b2b      	ldr	r3, [pc, #172]	; (8007758 <HAL_RCC_ClockConfig+0x260>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f023 020f 	bic.w	r2, r3, #15
 80076b0:	4929      	ldr	r1, [pc, #164]	; (8007758 <HAL_RCC_ClockConfig+0x260>)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076b8:	f7fd f9d4 	bl	8004a64 <HAL_GetTick>
 80076bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076be:	e00a      	b.n	80076d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c0:	f7fd f9d0 	bl	8004a64 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e03b      	b.n	800774e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d6:	4b20      	ldr	r3, [pc, #128]	; (8007758 <HAL_RCC_ClockConfig+0x260>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d1ed      	bne.n	80076c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076f0:	4b1a      	ldr	r3, [pc, #104]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	4917      	ldr	r1, [pc, #92]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	490f      	ldr	r1, [pc, #60]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 800771e:	4313      	orrs	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007722:	f000 f825 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 8007726:	4602      	mov	r2, r0
 8007728:	4b0c      	ldr	r3, [pc, #48]	; (800775c <HAL_RCC_ClockConfig+0x264>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	490c      	ldr	r1, [pc, #48]	; (8007764 <HAL_RCC_ClockConfig+0x26c>)
 8007734:	5ccb      	ldrb	r3, [r1, r3]
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	fa22 f303 	lsr.w	r3, r2, r3
 800773e:	4a0a      	ldr	r2, [pc, #40]	; (8007768 <HAL_RCC_ClockConfig+0x270>)
 8007740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007742:	4b0a      	ldr	r3, [pc, #40]	; (800776c <HAL_RCC_ClockConfig+0x274>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4618      	mov	r0, r3
 8007748:	f7fd f940 	bl	80049cc <HAL_InitTick>
 800774c:	4603      	mov	r3, r0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40022000 	.word	0x40022000
 800775c:	40021000 	.word	0x40021000
 8007760:	04c4b400 	.word	0x04c4b400
 8007764:	0800ad24 	.word	0x0800ad24
 8007768:	20000000 	.word	0x20000000
 800776c:	20000004 	.word	0x20000004

08007770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007776:	4b2c      	ldr	r3, [pc, #176]	; (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 030c 	and.w	r3, r3, #12
 800777e:	2b04      	cmp	r3, #4
 8007780:	d102      	bne.n	8007788 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007782:	4b2a      	ldr	r3, [pc, #168]	; (800782c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	e047      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007788:	4b27      	ldr	r3, [pc, #156]	; (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 030c 	and.w	r3, r3, #12
 8007790:	2b08      	cmp	r3, #8
 8007792:	d102      	bne.n	800779a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007794:	4b26      	ldr	r3, [pc, #152]	; (8007830 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	e03e      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800779a:	4b23      	ldr	r3, [pc, #140]	; (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 030c 	and.w	r3, r3, #12
 80077a2:	2b0c      	cmp	r3, #12
 80077a4:	d136      	bne.n	8007814 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077a6:	4b20      	ldr	r3, [pc, #128]	; (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077b0:	4b1d      	ldr	r3, [pc, #116]	; (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	091b      	lsrs	r3, r3, #4
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	3301      	adds	r3, #1
 80077bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d10c      	bne.n	80077de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077c4:	4a1a      	ldr	r2, [pc, #104]	; (8007830 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	4a16      	ldr	r2, [pc, #88]	; (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077ce:	68d2      	ldr	r2, [r2, #12]
 80077d0:	0a12      	lsrs	r2, r2, #8
 80077d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	617b      	str	r3, [r7, #20]
      break;
 80077dc:	e00c      	b.n	80077f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077de:	4a13      	ldr	r2, [pc, #76]	; (800782c <HAL_RCC_GetSysClockFreq+0xbc>)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	4a10      	ldr	r2, [pc, #64]	; (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077e8:	68d2      	ldr	r2, [r2, #12]
 80077ea:	0a12      	lsrs	r2, r2, #8
 80077ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077f0:	fb02 f303 	mul.w	r3, r2, r3
 80077f4:	617b      	str	r3, [r7, #20]
      break;
 80077f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	0e5b      	lsrs	r3, r3, #25
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	3301      	adds	r3, #1
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	e001      	b.n	8007818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007818:	693b      	ldr	r3, [r7, #16]
}
 800781a:	4618      	mov	r0, r3
 800781c:	371c      	adds	r7, #28
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40021000 	.word	0x40021000
 800782c:	00f42400 	.word	0x00f42400
 8007830:	016e3600 	.word	0x016e3600

08007834 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007838:	4b03      	ldr	r3, [pc, #12]	; (8007848 <HAL_RCC_GetHCLKFreq+0x14>)
 800783a:	681b      	ldr	r3, [r3, #0]
}
 800783c:	4618      	mov	r0, r3
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20000000 	.word	0x20000000

0800784c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007850:	f7ff fff0 	bl	8007834 <HAL_RCC_GetHCLKFreq>
 8007854:	4602      	mov	r2, r0
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	4904      	ldr	r1, [pc, #16]	; (8007874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007862:	5ccb      	ldrb	r3, [r1, r3]
 8007864:	f003 031f 	and.w	r3, r3, #31
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800786c:	4618      	mov	r0, r3
 800786e:	bd80      	pop	{r7, pc}
 8007870:	40021000 	.word	0x40021000
 8007874:	0800ad34 	.word	0x0800ad34

08007878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800787c:	f7ff ffda 	bl	8007834 <HAL_RCC_GetHCLKFreq>
 8007880:	4602      	mov	r2, r0
 8007882:	4b06      	ldr	r3, [pc, #24]	; (800789c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	0adb      	lsrs	r3, r3, #11
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	4904      	ldr	r1, [pc, #16]	; (80078a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800788e:	5ccb      	ldrb	r3, [r1, r3]
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007898:	4618      	mov	r0, r3
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40021000 	.word	0x40021000
 80078a0:	0800ad34 	.word	0x0800ad34

080078a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078aa:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f003 0303 	and.w	r3, r3, #3
 80078b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078b4:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	091b      	lsrs	r3, r3, #4
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	3301      	adds	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d10c      	bne.n	80078e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078c8:	4a17      	ldr	r2, [pc, #92]	; (8007928 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d0:	4a14      	ldr	r2, [pc, #80]	; (8007924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078d2:	68d2      	ldr	r2, [r2, #12]
 80078d4:	0a12      	lsrs	r2, r2, #8
 80078d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078da:	fb02 f303 	mul.w	r3, r2, r3
 80078de:	617b      	str	r3, [r7, #20]
    break;
 80078e0:	e00c      	b.n	80078fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078e2:	4a12      	ldr	r2, [pc, #72]	; (800792c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ea:	4a0e      	ldr	r2, [pc, #56]	; (8007924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078ec:	68d2      	ldr	r2, [r2, #12]
 80078ee:	0a12      	lsrs	r2, r2, #8
 80078f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078f4:	fb02 f303 	mul.w	r3, r2, r3
 80078f8:	617b      	str	r3, [r7, #20]
    break;
 80078fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	0e5b      	lsrs	r3, r3, #25
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	3301      	adds	r3, #1
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007916:	687b      	ldr	r3, [r7, #4]
}
 8007918:	4618      	mov	r0, r3
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	40021000 	.word	0x40021000
 8007928:	016e3600 	.word	0x016e3600
 800792c:	00f42400 	.word	0x00f42400

08007930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007938:	2300      	movs	r3, #0
 800793a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800793c:	2300      	movs	r3, #0
 800793e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 8098 	beq.w	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800794e:	2300      	movs	r3, #0
 8007950:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007952:	4b43      	ldr	r3, [pc, #268]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10d      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800795e:	4b40      	ldr	r3, [pc, #256]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007962:	4a3f      	ldr	r2, [pc, #252]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007968:	6593      	str	r3, [r2, #88]	; 0x58
 800796a:	4b3d      	ldr	r3, [pc, #244]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800796c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007972:	60bb      	str	r3, [r7, #8]
 8007974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007976:	2301      	movs	r3, #1
 8007978:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800797a:	4b3a      	ldr	r3, [pc, #232]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a39      	ldr	r2, [pc, #228]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007986:	f7fd f86d 	bl	8004a64 <HAL_GetTick>
 800798a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800798c:	e009      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800798e:	f7fd f869 	bl	8004a64 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d902      	bls.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	74fb      	strb	r3, [r7, #19]
        break;
 80079a0:	e005      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079a2:	4b30      	ldr	r3, [pc, #192]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0ef      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80079ae:	7cfb      	ldrb	r3, [r7, #19]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d159      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079b4:	4b2a      	ldr	r3, [pc, #168]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01e      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d019      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079d0:	4b23      	ldr	r3, [pc, #140]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079dc:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e2:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079ec:	4b1c      	ldr	r3, [pc, #112]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f2:	4a1b      	ldr	r2, [pc, #108]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079fc:	4a18      	ldr	r2, [pc, #96]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d016      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0e:	f7fd f829 	bl	8004a64 <HAL_GetTick>
 8007a12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a14:	e00b      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a16:	f7fd f825 	bl	8004a64 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d902      	bls.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	74fb      	strb	r3, [r7, #19]
            break;
 8007a2c:	e006      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d0ec      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007a3c:	7cfb      	ldrb	r3, [r7, #19]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a42:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a50:	4903      	ldr	r1, [pc, #12]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a58:	e008      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a5a:	7cfb      	ldrb	r3, [r7, #19]
 8007a5c:	74bb      	strb	r3, [r7, #18]
 8007a5e:	e005      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007a60:	40021000 	.word	0x40021000
 8007a64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a68:	7cfb      	ldrb	r3, [r7, #19]
 8007a6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a6c:	7c7b      	ldrb	r3, [r7, #17]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d105      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a72:	4ba6      	ldr	r3, [pc, #664]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a76:	4aa5      	ldr	r2, [pc, #660]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a8a:	4ba0      	ldr	r3, [pc, #640]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a90:	f023 0203 	bic.w	r2, r3, #3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	499c      	ldr	r1, [pc, #624]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007aac:	4b97      	ldr	r3, [pc, #604]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab2:	f023 020c 	bic.w	r2, r3, #12
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	4994      	ldr	r1, [pc, #592]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0304 	and.w	r3, r3, #4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ace:	4b8f      	ldr	r3, [pc, #572]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	498b      	ldr	r1, [pc, #556]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007af0:	4b86      	ldr	r3, [pc, #536]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	4983      	ldr	r1, [pc, #524]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b12:	4b7e      	ldr	r3, [pc, #504]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	497a      	ldr	r1, [pc, #488]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b34:	4b75      	ldr	r3, [pc, #468]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	4972      	ldr	r1, [pc, #456]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b56:	4b6d      	ldr	r3, [pc, #436]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	4969      	ldr	r1, [pc, #420]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b78:	4b64      	ldr	r3, [pc, #400]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	4961      	ldr	r1, [pc, #388]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b9a:	4b5c      	ldr	r3, [pc, #368]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	4958      	ldr	r1, [pc, #352]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d015      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bbc:	4b53      	ldr	r3, [pc, #332]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	4950      	ldr	r1, [pc, #320]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bda:	d105      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bdc:	4b4b      	ldr	r3, [pc, #300]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4a4a      	ldr	r2, [pc, #296]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007be6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d015      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007bf4:	4b45      	ldr	r3, [pc, #276]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c02:	4942      	ldr	r1, [pc, #264]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c12:	d105      	bne.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c14:	4b3d      	ldr	r3, [pc, #244]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	4a3c      	ldr	r2, [pc, #240]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c1e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d015      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c2c:	4b37      	ldr	r3, [pc, #220]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	4934      	ldr	r1, [pc, #208]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c4a:	d105      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c4c:	4b2f      	ldr	r3, [pc, #188]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a2e      	ldr	r2, [pc, #184]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d015      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c64:	4b29      	ldr	r3, [pc, #164]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c72:	4926      	ldr	r1, [pc, #152]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c82:	d105      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c84:	4b21      	ldr	r3, [pc, #132]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	4a20      	ldr	r2, [pc, #128]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d015      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c9c:	4b1b      	ldr	r3, [pc, #108]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	4918      	ldr	r1, [pc, #96]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cba:	d105      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cbc:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4a12      	ldr	r2, [pc, #72]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d015      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007cd4:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce2:	490a      	ldr	r1, [pc, #40]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cf2:	d105      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007cf4:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4a04      	ldr	r2, [pc, #16]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007d00:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40021000 	.word	0x40021000

08007d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d001      	beq.n	8007d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e04a      	b.n	8007dbe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a21      	ldr	r2, [pc, #132]	; (8007dcc <HAL_TIM_Base_Start_IT+0xbc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d018      	beq.n	8007d7c <HAL_TIM_Base_Start_IT+0x6c>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d52:	d013      	beq.n	8007d7c <HAL_TIM_Base_Start_IT+0x6c>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1d      	ldr	r2, [pc, #116]	; (8007dd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00e      	beq.n	8007d7c <HAL_TIM_Base_Start_IT+0x6c>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1c      	ldr	r2, [pc, #112]	; (8007dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d009      	beq.n	8007d7c <HAL_TIM_Base_Start_IT+0x6c>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1a      	ldr	r2, [pc, #104]	; (8007dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <HAL_TIM_Base_Start_IT+0x6c>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a19      	ldr	r2, [pc, #100]	; (8007ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d115      	bne.n	8007da8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	4b17      	ldr	r3, [pc, #92]	; (8007de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d84:	4013      	ands	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b06      	cmp	r3, #6
 8007d8c:	d015      	beq.n	8007dba <HAL_TIM_Base_Start_IT+0xaa>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d94:	d011      	beq.n	8007dba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0201 	orr.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da6:	e008      	b.n	8007dba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 0201 	orr.w	r2, r2, #1
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	e000      	b.n	8007dbc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	40012c00 	.word	0x40012c00
 8007dd0:	40000400 	.word	0x40000400
 8007dd4:	40000800 	.word	0x40000800
 8007dd8:	40013400 	.word	0x40013400
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	00010007 	.word	0x00010007

08007de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e049      	b.n	8007e8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7fc f902 	bl	8004014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f000 fc8e 	bl	8008744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d109      	bne.n	8007eb8 <HAL_TIM_PWM_Start+0x24>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	bf14      	ite	ne
 8007eb0:	2301      	movne	r3, #1
 8007eb2:	2300      	moveq	r3, #0
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	e03c      	b.n	8007f32 <HAL_TIM_PWM_Start+0x9e>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d109      	bne.n	8007ed2 <HAL_TIM_PWM_Start+0x3e>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	bf14      	ite	ne
 8007eca:	2301      	movne	r3, #1
 8007ecc:	2300      	moveq	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	e02f      	b.n	8007f32 <HAL_TIM_PWM_Start+0x9e>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d109      	bne.n	8007eec <HAL_TIM_PWM_Start+0x58>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	bf14      	ite	ne
 8007ee4:	2301      	movne	r3, #1
 8007ee6:	2300      	moveq	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	e022      	b.n	8007f32 <HAL_TIM_PWM_Start+0x9e>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b0c      	cmp	r3, #12
 8007ef0:	d109      	bne.n	8007f06 <HAL_TIM_PWM_Start+0x72>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	bf14      	ite	ne
 8007efe:	2301      	movne	r3, #1
 8007f00:	2300      	moveq	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	e015      	b.n	8007f32 <HAL_TIM_PWM_Start+0x9e>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d109      	bne.n	8007f20 <HAL_TIM_PWM_Start+0x8c>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	bf14      	ite	ne
 8007f18:	2301      	movne	r3, #1
 8007f1a:	2300      	moveq	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	e008      	b.n	8007f32 <HAL_TIM_PWM_Start+0x9e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	bf14      	ite	ne
 8007f2c:	2301      	movne	r3, #1
 8007f2e:	2300      	moveq	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e097      	b.n	800806a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <HAL_TIM_PWM_Start+0xb6>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f48:	e023      	b.n	8007f92 <HAL_TIM_PWM_Start+0xfe>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d104      	bne.n	8007f5a <HAL_TIM_PWM_Start+0xc6>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f58:	e01b      	b.n	8007f92 <HAL_TIM_PWM_Start+0xfe>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d104      	bne.n	8007f6a <HAL_TIM_PWM_Start+0xd6>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f68:	e013      	b.n	8007f92 <HAL_TIM_PWM_Start+0xfe>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b0c      	cmp	r3, #12
 8007f6e:	d104      	bne.n	8007f7a <HAL_TIM_PWM_Start+0xe6>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f78:	e00b      	b.n	8007f92 <HAL_TIM_PWM_Start+0xfe>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d104      	bne.n	8007f8a <HAL_TIM_PWM_Start+0xf6>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f88:	e003      	b.n	8007f92 <HAL_TIM_PWM_Start+0xfe>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2201      	movs	r2, #1
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 ff58 	bl	8008e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a33      	ldr	r2, [pc, #204]	; (8008074 <HAL_TIM_PWM_Start+0x1e0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d013      	beq.n	8007fd2 <HAL_TIM_PWM_Start+0x13e>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a32      	ldr	r2, [pc, #200]	; (8008078 <HAL_TIM_PWM_Start+0x1e4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00e      	beq.n	8007fd2 <HAL_TIM_PWM_Start+0x13e>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a30      	ldr	r2, [pc, #192]	; (800807c <HAL_TIM_PWM_Start+0x1e8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d009      	beq.n	8007fd2 <HAL_TIM_PWM_Start+0x13e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a2f      	ldr	r2, [pc, #188]	; (8008080 <HAL_TIM_PWM_Start+0x1ec>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d004      	beq.n	8007fd2 <HAL_TIM_PWM_Start+0x13e>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a2d      	ldr	r2, [pc, #180]	; (8008084 <HAL_TIM_PWM_Start+0x1f0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d101      	bne.n	8007fd6 <HAL_TIM_PWM_Start+0x142>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <HAL_TIM_PWM_Start+0x144>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d007      	beq.n	8007fec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a20      	ldr	r2, [pc, #128]	; (8008074 <HAL_TIM_PWM_Start+0x1e0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d018      	beq.n	8008028 <HAL_TIM_PWM_Start+0x194>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ffe:	d013      	beq.n	8008028 <HAL_TIM_PWM_Start+0x194>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a20      	ldr	r2, [pc, #128]	; (8008088 <HAL_TIM_PWM_Start+0x1f4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00e      	beq.n	8008028 <HAL_TIM_PWM_Start+0x194>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1f      	ldr	r2, [pc, #124]	; (800808c <HAL_TIM_PWM_Start+0x1f8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d009      	beq.n	8008028 <HAL_TIM_PWM_Start+0x194>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a17      	ldr	r2, [pc, #92]	; (8008078 <HAL_TIM_PWM_Start+0x1e4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_TIM_PWM_Start+0x194>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a16      	ldr	r2, [pc, #88]	; (800807c <HAL_TIM_PWM_Start+0x1e8>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d115      	bne.n	8008054 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	4b18      	ldr	r3, [pc, #96]	; (8008090 <HAL_TIM_PWM_Start+0x1fc>)
 8008030:	4013      	ands	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b06      	cmp	r3, #6
 8008038:	d015      	beq.n	8008066 <HAL_TIM_PWM_Start+0x1d2>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008040:	d011      	beq.n	8008066 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f042 0201 	orr.w	r2, r2, #1
 8008050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008052:	e008      	b.n	8008066 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e000      	b.n	8008068 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008066:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40013400 	.word	0x40013400
 800807c:	40014000 	.word	0x40014000
 8008080:	40014400 	.word	0x40014400
 8008084:	40014800 	.word	0x40014800
 8008088:	40000400 	.word	0x40000400
 800808c:	40000800 	.word	0x40000800
 8008090:	00010007 	.word	0x00010007

08008094 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2200      	movs	r2, #0
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fed2 	bl	8008e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a3e      	ldr	r2, [pc, #248]	; (80081ac <HAL_TIM_PWM_Stop+0x118>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <HAL_TIM_PWM_Stop+0x4a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a3d      	ldr	r2, [pc, #244]	; (80081b0 <HAL_TIM_PWM_Stop+0x11c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00e      	beq.n	80080de <HAL_TIM_PWM_Stop+0x4a>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a3b      	ldr	r2, [pc, #236]	; (80081b4 <HAL_TIM_PWM_Stop+0x120>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d009      	beq.n	80080de <HAL_TIM_PWM_Stop+0x4a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a3a      	ldr	r2, [pc, #232]	; (80081b8 <HAL_TIM_PWM_Stop+0x124>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d004      	beq.n	80080de <HAL_TIM_PWM_Stop+0x4a>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a38      	ldr	r2, [pc, #224]	; (80081bc <HAL_TIM_PWM_Stop+0x128>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d101      	bne.n	80080e2 <HAL_TIM_PWM_Stop+0x4e>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <HAL_TIM_PWM_Stop+0x50>
 80080e2:	2300      	movs	r3, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d017      	beq.n	8008118 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10f      	bne.n	8008118 <HAL_TIM_PWM_Stop+0x84>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6a1a      	ldr	r2, [r3, #32]
 80080fe:	f244 4344 	movw	r3, #17476	; 0x4444
 8008102:	4013      	ands	r3, r2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d107      	bne.n	8008118 <HAL_TIM_PWM_Stop+0x84>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008116:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6a1a      	ldr	r2, [r3, #32]
 800811e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008122:	4013      	ands	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10f      	bne.n	8008148 <HAL_TIM_PWM_Stop+0xb4>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6a1a      	ldr	r2, [r3, #32]
 800812e:	f244 4344 	movw	r3, #17476	; 0x4444
 8008132:	4013      	ands	r3, r2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d107      	bne.n	8008148 <HAL_TIM_PWM_Stop+0xb4>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0201 	bic.w	r2, r2, #1
 8008146:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d104      	bne.n	8008158 <HAL_TIM_PWM_Stop+0xc4>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008156:	e023      	b.n	80081a0 <HAL_TIM_PWM_Stop+0x10c>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b04      	cmp	r3, #4
 800815c:	d104      	bne.n	8008168 <HAL_TIM_PWM_Stop+0xd4>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008166:	e01b      	b.n	80081a0 <HAL_TIM_PWM_Stop+0x10c>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b08      	cmp	r3, #8
 800816c:	d104      	bne.n	8008178 <HAL_TIM_PWM_Stop+0xe4>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008176:	e013      	b.n	80081a0 <HAL_TIM_PWM_Stop+0x10c>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b0c      	cmp	r3, #12
 800817c:	d104      	bne.n	8008188 <HAL_TIM_PWM_Stop+0xf4>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008186:	e00b      	b.n	80081a0 <HAL_TIM_PWM_Stop+0x10c>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b10      	cmp	r3, #16
 800818c:	d104      	bne.n	8008198 <HAL_TIM_PWM_Stop+0x104>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008196:	e003      	b.n	80081a0 <HAL_TIM_PWM_Stop+0x10c>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40013400 	.word	0x40013400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800

080081c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d122      	bne.n	800821c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d11b      	bne.n	800821c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0202 	mvn.w	r2, #2
 80081ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa80 	bl	8008708 <HAL_TIM_IC_CaptureCallback>
 8008208:	e005      	b.n	8008216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa72 	bl	80086f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fa83 	bl	800871c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b04      	cmp	r3, #4
 8008228:	d122      	bne.n	8008270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b04      	cmp	r3, #4
 8008236:	d11b      	bne.n	8008270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0204 	mvn.w	r2, #4
 8008240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2202      	movs	r2, #2
 8008246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa56 	bl	8008708 <HAL_TIM_IC_CaptureCallback>
 800825c:	e005      	b.n	800826a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa48 	bl	80086f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fa59 	bl	800871c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b08      	cmp	r3, #8
 800827c:	d122      	bne.n	80082c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f003 0308 	and.w	r3, r3, #8
 8008288:	2b08      	cmp	r3, #8
 800828a:	d11b      	bne.n	80082c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f06f 0208 	mvn.w	r2, #8
 8008294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2204      	movs	r2, #4
 800829a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fa2c 	bl	8008708 <HAL_TIM_IC_CaptureCallback>
 80082b0:	e005      	b.n	80082be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa1e 	bl	80086f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa2f 	bl	800871c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f003 0310 	and.w	r3, r3, #16
 80082ce:	2b10      	cmp	r3, #16
 80082d0:	d122      	bne.n	8008318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f003 0310 	and.w	r3, r3, #16
 80082dc:	2b10      	cmp	r3, #16
 80082de:	d11b      	bne.n	8008318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0210 	mvn.w	r2, #16
 80082e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2208      	movs	r2, #8
 80082ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa02 	bl	8008708 <HAL_TIM_IC_CaptureCallback>
 8008304:	e005      	b.n	8008312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f9f4 	bl	80086f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa05 	bl	800871c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b01      	cmp	r3, #1
 8008324:	d10e      	bne.n	8008344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b01      	cmp	r3, #1
 8008332:	d107      	bne.n	8008344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0201 	mvn.w	r2, #1
 800833c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9ce 	bl	80086e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834e:	2b80      	cmp	r3, #128	; 0x80
 8008350:	d10e      	bne.n	8008370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835c:	2b80      	cmp	r3, #128	; 0x80
 800835e:	d107      	bne.n	8008370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 ffd4 	bl	8009318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800837e:	d10e      	bne.n	800839e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838a:	2b80      	cmp	r3, #128	; 0x80
 800838c:	d107      	bne.n	800839e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 ffc7 	bl	800932c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a8:	2b40      	cmp	r3, #64	; 0x40
 80083aa:	d10e      	bne.n	80083ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d107      	bne.n	80083ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f9b3 	bl	8008730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f003 0320 	and.w	r3, r3, #32
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	d10e      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d107      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f06f 0220 	mvn.w	r2, #32
 80083ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 ff87 	bl	8009304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008404:	d10f      	bne.n	8008426 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008414:	d107      	bne.n	8008426 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800841e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 ff8d 	bl	8009340 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008430:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008434:	d10f      	bne.n	8008456 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008444:	d107      	bne.n	8008456 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800844e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 ff7f 	bl	8009354 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008464:	d10f      	bne.n	8008486 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008474:	d107      	bne.n	8008486 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800847e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 ff71 	bl	8009368 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008494:	d10f      	bne.n	80084b6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084a4:	d107      	bne.n	80084b6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80084ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 ff63 	bl	800937c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e0fd      	b.n	80086d6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b14      	cmp	r3, #20
 80084e6:	f200 80f0 	bhi.w	80086ca <HAL_TIM_PWM_ConfigChannel+0x20a>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008545 	.word	0x08008545
 80084f4:	080086cb 	.word	0x080086cb
 80084f8:	080086cb 	.word	0x080086cb
 80084fc:	080086cb 	.word	0x080086cb
 8008500:	08008585 	.word	0x08008585
 8008504:	080086cb 	.word	0x080086cb
 8008508:	080086cb 	.word	0x080086cb
 800850c:	080086cb 	.word	0x080086cb
 8008510:	080085c7 	.word	0x080085c7
 8008514:	080086cb 	.word	0x080086cb
 8008518:	080086cb 	.word	0x080086cb
 800851c:	080086cb 	.word	0x080086cb
 8008520:	08008607 	.word	0x08008607
 8008524:	080086cb 	.word	0x080086cb
 8008528:	080086cb 	.word	0x080086cb
 800852c:	080086cb 	.word	0x080086cb
 8008530:	08008649 	.word	0x08008649
 8008534:	080086cb 	.word	0x080086cb
 8008538:	080086cb 	.word	0x080086cb
 800853c:	080086cb 	.word	0x080086cb
 8008540:	08008689 	.word	0x08008689
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 f98a 	bl	8008864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0208 	orr.w	r2, r2, #8
 800855e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0204 	bic.w	r2, r2, #4
 800856e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6999      	ldr	r1, [r3, #24]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	619a      	str	r2, [r3, #24]
      break;
 8008582:	e0a3      	b.n	80086cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f9fa 	bl	8008984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800859e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6999      	ldr	r1, [r3, #24]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	021a      	lsls	r2, r3, #8
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	619a      	str	r2, [r3, #24]
      break;
 80085c4:	e082      	b.n	80086cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 fa63 	bl	8008a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69da      	ldr	r2, [r3, #28]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f042 0208 	orr.w	r2, r2, #8
 80085e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0204 	bic.w	r2, r2, #4
 80085f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69d9      	ldr	r1, [r3, #28]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	61da      	str	r2, [r3, #28]
      break;
 8008604:	e062      	b.n	80086cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 facb 	bl	8008ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69d9      	ldr	r1, [r3, #28]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	021a      	lsls	r2, r3, #8
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	61da      	str	r2, [r3, #28]
      break;
 8008646:	e041      	b.n	80086cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 fb34 	bl	8008cbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0208 	orr.w	r2, r2, #8
 8008662:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0204 	bic.w	r2, r2, #4
 8008672:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008686:	e021      	b.n	80086cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fb78 	bl	8008d84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	021a      	lsls	r2, r3, #8
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80086c8:	e000      	b.n	80086cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80086ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop

080086e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a3c      	ldr	r2, [pc, #240]	; (8008848 <TIM_Base_SetConfig+0x104>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00f      	beq.n	800877c <TIM_Base_SetConfig+0x38>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008762:	d00b      	beq.n	800877c <TIM_Base_SetConfig+0x38>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a39      	ldr	r2, [pc, #228]	; (800884c <TIM_Base_SetConfig+0x108>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d007      	beq.n	800877c <TIM_Base_SetConfig+0x38>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a38      	ldr	r2, [pc, #224]	; (8008850 <TIM_Base_SetConfig+0x10c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d003      	beq.n	800877c <TIM_Base_SetConfig+0x38>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a37      	ldr	r2, [pc, #220]	; (8008854 <TIM_Base_SetConfig+0x110>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d108      	bne.n	800878e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a2d      	ldr	r2, [pc, #180]	; (8008848 <TIM_Base_SetConfig+0x104>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d01b      	beq.n	80087ce <TIM_Base_SetConfig+0x8a>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879c:	d017      	beq.n	80087ce <TIM_Base_SetConfig+0x8a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a2a      	ldr	r2, [pc, #168]	; (800884c <TIM_Base_SetConfig+0x108>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d013      	beq.n	80087ce <TIM_Base_SetConfig+0x8a>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a29      	ldr	r2, [pc, #164]	; (8008850 <TIM_Base_SetConfig+0x10c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00f      	beq.n	80087ce <TIM_Base_SetConfig+0x8a>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a28      	ldr	r2, [pc, #160]	; (8008854 <TIM_Base_SetConfig+0x110>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d00b      	beq.n	80087ce <TIM_Base_SetConfig+0x8a>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a27      	ldr	r2, [pc, #156]	; (8008858 <TIM_Base_SetConfig+0x114>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d007      	beq.n	80087ce <TIM_Base_SetConfig+0x8a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a26      	ldr	r2, [pc, #152]	; (800885c <TIM_Base_SetConfig+0x118>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d003      	beq.n	80087ce <TIM_Base_SetConfig+0x8a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a25      	ldr	r2, [pc, #148]	; (8008860 <TIM_Base_SetConfig+0x11c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d108      	bne.n	80087e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4313      	orrs	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a10      	ldr	r2, [pc, #64]	; (8008848 <TIM_Base_SetConfig+0x104>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d00f      	beq.n	800882c <TIM_Base_SetConfig+0xe8>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a11      	ldr	r2, [pc, #68]	; (8008854 <TIM_Base_SetConfig+0x110>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00b      	beq.n	800882c <TIM_Base_SetConfig+0xe8>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a10      	ldr	r2, [pc, #64]	; (8008858 <TIM_Base_SetConfig+0x114>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d007      	beq.n	800882c <TIM_Base_SetConfig+0xe8>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a0f      	ldr	r2, [pc, #60]	; (800885c <TIM_Base_SetConfig+0x118>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d003      	beq.n	800882c <TIM_Base_SetConfig+0xe8>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a0e      	ldr	r2, [pc, #56]	; (8008860 <TIM_Base_SetConfig+0x11c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d103      	bne.n	8008834 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	615a      	str	r2, [r3, #20]
}
 800883a:	bf00      	nop
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	40012c00 	.word	0x40012c00
 800884c:	40000400 	.word	0x40000400
 8008850:	40000800 	.word	0x40000800
 8008854:	40013400 	.word	0x40013400
 8008858:	40014000 	.word	0x40014000
 800885c:	40014400 	.word	0x40014400
 8008860:	40014800 	.word	0x40014800

08008864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f023 0201 	bic.w	r2, r3, #1
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f023 0302 	bic.w	r3, r3, #2
 80088b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a2c      	ldr	r2, [pc, #176]	; (8008970 <TIM_OC1_SetConfig+0x10c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00f      	beq.n	80088e4 <TIM_OC1_SetConfig+0x80>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a2b      	ldr	r2, [pc, #172]	; (8008974 <TIM_OC1_SetConfig+0x110>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d00b      	beq.n	80088e4 <TIM_OC1_SetConfig+0x80>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a2a      	ldr	r2, [pc, #168]	; (8008978 <TIM_OC1_SetConfig+0x114>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d007      	beq.n	80088e4 <TIM_OC1_SetConfig+0x80>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a29      	ldr	r2, [pc, #164]	; (800897c <TIM_OC1_SetConfig+0x118>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <TIM_OC1_SetConfig+0x80>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a28      	ldr	r2, [pc, #160]	; (8008980 <TIM_OC1_SetConfig+0x11c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d10c      	bne.n	80088fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f023 0308 	bic.w	r3, r3, #8
 80088ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f023 0304 	bic.w	r3, r3, #4
 80088fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a1b      	ldr	r2, [pc, #108]	; (8008970 <TIM_OC1_SetConfig+0x10c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d00f      	beq.n	8008926 <TIM_OC1_SetConfig+0xc2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a1a      	ldr	r2, [pc, #104]	; (8008974 <TIM_OC1_SetConfig+0x110>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d00b      	beq.n	8008926 <TIM_OC1_SetConfig+0xc2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a19      	ldr	r2, [pc, #100]	; (8008978 <TIM_OC1_SetConfig+0x114>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d007      	beq.n	8008926 <TIM_OC1_SetConfig+0xc2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a18      	ldr	r2, [pc, #96]	; (800897c <TIM_OC1_SetConfig+0x118>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d003      	beq.n	8008926 <TIM_OC1_SetConfig+0xc2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a17      	ldr	r2, [pc, #92]	; (8008980 <TIM_OC1_SetConfig+0x11c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d111      	bne.n	800894a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800892c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4313      	orrs	r3, r2
 8008948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	621a      	str	r2, [r3, #32]
}
 8008964:	bf00      	nop
 8008966:	371c      	adds	r7, #28
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	40012c00 	.word	0x40012c00
 8008974:	40013400 	.word	0x40013400
 8008978:	40014000 	.word	0x40014000
 800897c:	40014400 	.word	0x40014400
 8008980:	40014800 	.word	0x40014800

08008984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	f023 0210 	bic.w	r2, r3, #16
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	021b      	lsls	r3, r3, #8
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f023 0320 	bic.w	r3, r3, #32
 80089d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	4313      	orrs	r3, r2
 80089de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a28      	ldr	r2, [pc, #160]	; (8008a84 <TIM_OC2_SetConfig+0x100>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d003      	beq.n	80089f0 <TIM_OC2_SetConfig+0x6c>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a27      	ldr	r2, [pc, #156]	; (8008a88 <TIM_OC2_SetConfig+0x104>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d10d      	bne.n	8008a0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <TIM_OC2_SetConfig+0x100>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d00f      	beq.n	8008a34 <TIM_OC2_SetConfig+0xb0>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a1c      	ldr	r2, [pc, #112]	; (8008a88 <TIM_OC2_SetConfig+0x104>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00b      	beq.n	8008a34 <TIM_OC2_SetConfig+0xb0>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <TIM_OC2_SetConfig+0x108>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d007      	beq.n	8008a34 <TIM_OC2_SetConfig+0xb0>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a1a      	ldr	r2, [pc, #104]	; (8008a90 <TIM_OC2_SetConfig+0x10c>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d003      	beq.n	8008a34 <TIM_OC2_SetConfig+0xb0>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a19      	ldr	r2, [pc, #100]	; (8008a94 <TIM_OC2_SetConfig+0x110>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d113      	bne.n	8008a5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	621a      	str	r2, [r3, #32]
}
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40012c00 	.word	0x40012c00
 8008a88:	40013400 	.word	0x40013400
 8008a8c:	40014000 	.word	0x40014000
 8008a90:	40014400 	.word	0x40014400
 8008a94:	40014800 	.word	0x40014800

08008a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 0303 	bic.w	r3, r3, #3
 8008ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	021b      	lsls	r3, r3, #8
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a27      	ldr	r2, [pc, #156]	; (8008b94 <TIM_OC3_SetConfig+0xfc>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d003      	beq.n	8008b02 <TIM_OC3_SetConfig+0x6a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a26      	ldr	r2, [pc, #152]	; (8008b98 <TIM_OC3_SetConfig+0x100>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d10d      	bne.n	8008b1e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	021b      	lsls	r3, r3, #8
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a1c      	ldr	r2, [pc, #112]	; (8008b94 <TIM_OC3_SetConfig+0xfc>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00f      	beq.n	8008b46 <TIM_OC3_SetConfig+0xae>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a1b      	ldr	r2, [pc, #108]	; (8008b98 <TIM_OC3_SetConfig+0x100>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00b      	beq.n	8008b46 <TIM_OC3_SetConfig+0xae>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1a      	ldr	r2, [pc, #104]	; (8008b9c <TIM_OC3_SetConfig+0x104>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d007      	beq.n	8008b46 <TIM_OC3_SetConfig+0xae>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a19      	ldr	r2, [pc, #100]	; (8008ba0 <TIM_OC3_SetConfig+0x108>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d003      	beq.n	8008b46 <TIM_OC3_SetConfig+0xae>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a18      	ldr	r2, [pc, #96]	; (8008ba4 <TIM_OC3_SetConfig+0x10c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d113      	bne.n	8008b6e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	011b      	lsls	r3, r3, #4
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	621a      	str	r2, [r3, #32]
}
 8008b88:	bf00      	nop
 8008b8a:	371c      	adds	r7, #28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	40012c00 	.word	0x40012c00
 8008b98:	40013400 	.word	0x40013400
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	40014400 	.word	0x40014400
 8008ba4:	40014800 	.word	0x40014800

08008ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	031b      	lsls	r3, r3, #12
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a28      	ldr	r2, [pc, #160]	; (8008ca8 <TIM_OC4_SetConfig+0x100>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_OC4_SetConfig+0x6c>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a27      	ldr	r2, [pc, #156]	; (8008cac <TIM_OC4_SetConfig+0x104>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d10d      	bne.n	8008c30 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	031b      	lsls	r3, r3, #12
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a1d      	ldr	r2, [pc, #116]	; (8008ca8 <TIM_OC4_SetConfig+0x100>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00f      	beq.n	8008c58 <TIM_OC4_SetConfig+0xb0>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a1c      	ldr	r2, [pc, #112]	; (8008cac <TIM_OC4_SetConfig+0x104>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00b      	beq.n	8008c58 <TIM_OC4_SetConfig+0xb0>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a1b      	ldr	r2, [pc, #108]	; (8008cb0 <TIM_OC4_SetConfig+0x108>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d007      	beq.n	8008c58 <TIM_OC4_SetConfig+0xb0>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a1a      	ldr	r2, [pc, #104]	; (8008cb4 <TIM_OC4_SetConfig+0x10c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d003      	beq.n	8008c58 <TIM_OC4_SetConfig+0xb0>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a19      	ldr	r2, [pc, #100]	; (8008cb8 <TIM_OC4_SetConfig+0x110>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d113      	bne.n	8008c80 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c5e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c66:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	019b      	lsls	r3, r3, #6
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	019b      	lsls	r3, r3, #6
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	40012c00 	.word	0x40012c00
 8008cac:	40013400 	.word	0x40013400
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	40014400 	.word	0x40014400
 8008cb8:	40014800 	.word	0x40014800

08008cbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	041b      	lsls	r3, r3, #16
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a17      	ldr	r2, [pc, #92]	; (8008d70 <TIM_OC5_SetConfig+0xb4>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00f      	beq.n	8008d36 <TIM_OC5_SetConfig+0x7a>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a16      	ldr	r2, [pc, #88]	; (8008d74 <TIM_OC5_SetConfig+0xb8>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00b      	beq.n	8008d36 <TIM_OC5_SetConfig+0x7a>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <TIM_OC5_SetConfig+0xbc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d007      	beq.n	8008d36 <TIM_OC5_SetConfig+0x7a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <TIM_OC5_SetConfig+0xc0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d003      	beq.n	8008d36 <TIM_OC5_SetConfig+0x7a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a13      	ldr	r2, [pc, #76]	; (8008d80 <TIM_OC5_SetConfig+0xc4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d109      	bne.n	8008d4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	621a      	str	r2, [r3, #32]
}
 8008d64:	bf00      	nop
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	40012c00 	.word	0x40012c00
 8008d74:	40013400 	.word	0x40013400
 8008d78:	40014000 	.word	0x40014000
 8008d7c:	40014400 	.word	0x40014400
 8008d80:	40014800 	.word	0x40014800

08008d84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	051b      	lsls	r3, r3, #20
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a18      	ldr	r2, [pc, #96]	; (8008e3c <TIM_OC6_SetConfig+0xb8>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00f      	beq.n	8008e00 <TIM_OC6_SetConfig+0x7c>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a17      	ldr	r2, [pc, #92]	; (8008e40 <TIM_OC6_SetConfig+0xbc>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00b      	beq.n	8008e00 <TIM_OC6_SetConfig+0x7c>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a16      	ldr	r2, [pc, #88]	; (8008e44 <TIM_OC6_SetConfig+0xc0>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d007      	beq.n	8008e00 <TIM_OC6_SetConfig+0x7c>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a15      	ldr	r2, [pc, #84]	; (8008e48 <TIM_OC6_SetConfig+0xc4>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d003      	beq.n	8008e00 <TIM_OC6_SetConfig+0x7c>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a14      	ldr	r2, [pc, #80]	; (8008e4c <TIM_OC6_SetConfig+0xc8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d109      	bne.n	8008e14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	029b      	lsls	r3, r3, #10
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	621a      	str	r2, [r3, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	40012c00 	.word	0x40012c00
 8008e40:	40013400 	.word	0x40013400
 8008e44:	40014000 	.word	0x40014000
 8008e48:	40014400 	.word	0x40014400
 8008e4c:	40014800 	.word	0x40014800

08008e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	2201      	movs	r2, #1
 8008e64:	fa02 f303 	lsl.w	r3, r2, r3
 8008e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6a1a      	ldr	r2, [r3, #32]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	43db      	mvns	r3, r3
 8008e72:	401a      	ands	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a1a      	ldr	r2, [r3, #32]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f003 031f 	and.w	r3, r3, #31
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	fa01 f303 	lsl.w	r3, r1, r3
 8008e88:	431a      	orrs	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	621a      	str	r2, [r3, #32]
}
 8008e8e:	bf00      	nop
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
	...

08008e9c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d109      	bne.n	8008ec0 <HAL_TIMEx_PWMN_Start+0x24>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	bf14      	ite	ne
 8008eb8:	2301      	movne	r3, #1
 8008eba:	2300      	moveq	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	e022      	b.n	8008f06 <HAL_TIMEx_PWMN_Start+0x6a>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d109      	bne.n	8008eda <HAL_TIMEx_PWMN_Start+0x3e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	bf14      	ite	ne
 8008ed2:	2301      	movne	r3, #1
 8008ed4:	2300      	moveq	r3, #0
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	e015      	b.n	8008f06 <HAL_TIMEx_PWMN_Start+0x6a>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d109      	bne.n	8008ef4 <HAL_TIMEx_PWMN_Start+0x58>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	bf14      	ite	ne
 8008eec:	2301      	movne	r3, #1
 8008eee:	2300      	moveq	r3, #0
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	e008      	b.n	8008f06 <HAL_TIMEx_PWMN_Start+0x6a>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	bf14      	ite	ne
 8008f00:	2301      	movne	r3, #1
 8008f02:	2300      	moveq	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e069      	b.n	8008fe2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d104      	bne.n	8008f1e <HAL_TIMEx_PWMN_Start+0x82>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f1c:	e013      	b.n	8008f46 <HAL_TIMEx_PWMN_Start+0xaa>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d104      	bne.n	8008f2e <HAL_TIMEx_PWMN_Start+0x92>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f2c:	e00b      	b.n	8008f46 <HAL_TIMEx_PWMN_Start+0xaa>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d104      	bne.n	8008f3e <HAL_TIMEx_PWMN_Start+0xa2>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f3c:	e003      	b.n	8008f46 <HAL_TIMEx_PWMN_Start+0xaa>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2202      	movs	r2, #2
 8008f42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2204      	movs	r2, #4
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fa1e 	bl	8009390 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a20      	ldr	r2, [pc, #128]	; (8008fec <HAL_TIMEx_PWMN_Start+0x150>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d018      	beq.n	8008fa0 <HAL_TIMEx_PWMN_Start+0x104>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f76:	d013      	beq.n	8008fa0 <HAL_TIMEx_PWMN_Start+0x104>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a1c      	ldr	r2, [pc, #112]	; (8008ff0 <HAL_TIMEx_PWMN_Start+0x154>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00e      	beq.n	8008fa0 <HAL_TIMEx_PWMN_Start+0x104>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a1b      	ldr	r2, [pc, #108]	; (8008ff4 <HAL_TIMEx_PWMN_Start+0x158>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d009      	beq.n	8008fa0 <HAL_TIMEx_PWMN_Start+0x104>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a19      	ldr	r2, [pc, #100]	; (8008ff8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d004      	beq.n	8008fa0 <HAL_TIMEx_PWMN_Start+0x104>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a18      	ldr	r2, [pc, #96]	; (8008ffc <HAL_TIMEx_PWMN_Start+0x160>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d115      	bne.n	8008fcc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689a      	ldr	r2, [r3, #8]
 8008fa6:	4b16      	ldr	r3, [pc, #88]	; (8009000 <HAL_TIMEx_PWMN_Start+0x164>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b06      	cmp	r3, #6
 8008fb0:	d015      	beq.n	8008fde <HAL_TIMEx_PWMN_Start+0x142>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb8:	d011      	beq.n	8008fde <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f042 0201 	orr.w	r2, r2, #1
 8008fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fca:	e008      	b.n	8008fde <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0201 	orr.w	r2, r2, #1
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	e000      	b.n	8008fe0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	40012c00 	.word	0x40012c00
 8008ff0:	40000400 	.word	0x40000400
 8008ff4:	40000800 	.word	0x40000800
 8008ff8:	40013400 	.word	0x40013400
 8008ffc:	40014000 	.word	0x40014000
 8009000:	00010007 	.word	0x00010007

08009004 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2200      	movs	r2, #0
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f9ba 	bl	8009390 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6a1a      	ldr	r2, [r3, #32]
 8009022:	f241 1311 	movw	r3, #4369	; 0x1111
 8009026:	4013      	ands	r3, r2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10f      	bne.n	800904c <HAL_TIMEx_PWMN_Stop+0x48>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6a1a      	ldr	r2, [r3, #32]
 8009032:	f244 4344 	movw	r3, #17476	; 0x4444
 8009036:	4013      	ands	r3, r2
 8009038:	2b00      	cmp	r3, #0
 800903a:	d107      	bne.n	800904c <HAL_TIMEx_PWMN_Stop+0x48>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800904a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6a1a      	ldr	r2, [r3, #32]
 8009052:	f241 1311 	movw	r3, #4369	; 0x1111
 8009056:	4013      	ands	r3, r2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10f      	bne.n	800907c <HAL_TIMEx_PWMN_Stop+0x78>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6a1a      	ldr	r2, [r3, #32]
 8009062:	f244 4344 	movw	r3, #17476	; 0x4444
 8009066:	4013      	ands	r3, r2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d107      	bne.n	800907c <HAL_TIMEx_PWMN_Stop+0x78>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0201 	bic.w	r2, r2, #1
 800907a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <HAL_TIMEx_PWMN_Stop+0x88>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800908a:	e013      	b.n	80090b4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b04      	cmp	r3, #4
 8009090:	d104      	bne.n	800909c <HAL_TIMEx_PWMN_Stop+0x98>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800909a:	e00b      	b.n	80090b4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b08      	cmp	r3, #8
 80090a0:	d104      	bne.n	80090ac <HAL_TIMEx_PWMN_Stop+0xa8>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090aa:	e003      	b.n	80090b4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d101      	bne.n	80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090d4:	2302      	movs	r3, #2
 80090d6:	e065      	b.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2202      	movs	r2, #2
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a2c      	ldr	r2, [pc, #176]	; (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d004      	beq.n	800910c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a2b      	ldr	r2, [pc, #172]	; (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d108      	bne.n	800911e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009112:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4313      	orrs	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a1b      	ldr	r2, [pc, #108]	; (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d018      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800914e:	d013      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00e      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a17      	ldr	r2, [pc, #92]	; (80091bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d009      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a12      	ldr	r2, [pc, #72]	; (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d004      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a13      	ldr	r2, [pc, #76]	; (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d10c      	bne.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800917e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	4313      	orrs	r3, r2
 8009188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	40012c00 	.word	0x40012c00
 80091b4:	40013400 	.word	0x40013400
 80091b8:	40000400 	.word	0x40000400
 80091bc:	40000800 	.word	0x40000800
 80091c0:	40014000 	.word	0x40014000

080091c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d101      	bne.n	80091e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091dc:	2302      	movs	r3, #2
 80091de:	e087      	b.n	80092f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	4313      	orrs	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4313      	orrs	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	041b      	lsls	r3, r3, #16
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a27      	ldr	r2, [pc, #156]	; (80092fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d004      	beq.n	800926e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a25      	ldr	r2, [pc, #148]	; (8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d106      	bne.n	800927c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a1e      	ldr	r2, [pc, #120]	; (80092fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d004      	beq.n	8009290 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a1d      	ldr	r2, [pc, #116]	; (8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d126      	bne.n	80092de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929a:	051b      	lsls	r3, r3, #20
 800929c:	4313      	orrs	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0e      	ldr	r2, [pc, #56]	; (80092fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d004      	beq.n	80092d0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a0d      	ldr	r2, [pc, #52]	; (8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d106      	bne.n	80092de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	40012c00 	.word	0x40012c00
 8009300:	40013400 	.word	0x40013400

08009304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f003 031f 	and.w	r3, r3, #31
 80093a2:	2204      	movs	r2, #4
 80093a4:	fa02 f303 	lsl.w	r3, r2, r3
 80093a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6a1a      	ldr	r2, [r3, #32]
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	43db      	mvns	r3, r3
 80093b2:	401a      	ands	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6a1a      	ldr	r2, [r3, #32]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f003 031f 	and.w	r3, r3, #31
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	fa01 f303 	lsl.w	r3, r1, r3
 80093c8:	431a      	orrs	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	621a      	str	r2, [r3, #32]
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b082      	sub	sp, #8
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e042      	b.n	8009472 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7fa feba 	bl	8004178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2224      	movs	r2, #36	; 0x24
 8009408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 0201 	bic.w	r2, r2, #1
 800941a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fae5 	bl	80099ec <UART_SetConfig>
 8009422:	4603      	mov	r3, r0
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e022      	b.n	8009472 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fd7d 	bl	8009f34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009448:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009458:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f042 0201 	orr.w	r2, r2, #1
 8009468:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fe04 	bl	800a078 <UART_CheckIdleState>
 8009470:	4603      	mov	r3, r0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
	...

0800947c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009490:	2b20      	cmp	r3, #32
 8009492:	d168      	bne.n	8009566 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <HAL_UART_Transmit_DMA+0x24>
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e061      	b.n	8009568 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <HAL_UART_Transmit_DMA+0x36>
 80094ae:	2302      	movs	r3, #2
 80094b0:	e05a      	b.n	8009568 <HAL_UART_Transmit_DMA+0xec>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	88fa      	ldrh	r2, [r7, #6]
 80094c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	88fa      	ldrh	r2, [r7, #6]
 80094cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2221      	movs	r2, #33	; 0x21
 80094dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d02c      	beq.n	8009542 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ec:	4a20      	ldr	r2, [pc, #128]	; (8009570 <HAL_UART_Transmit_DMA+0xf4>)
 80094ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094f4:	4a1f      	ldr	r2, [pc, #124]	; (8009574 <HAL_UART_Transmit_DMA+0xf8>)
 80094f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094fc:	4a1e      	ldr	r2, [pc, #120]	; (8009578 <HAL_UART_Transmit_DMA+0xfc>)
 80094fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009504:	2200      	movs	r2, #0
 8009506:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009510:	4619      	mov	r1, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3328      	adds	r3, #40	; 0x28
 8009518:	461a      	mov	r2, r3
 800951a:	88fb      	ldrh	r3, [r7, #6]
 800951c:	f7fd f80a 	bl	8006534 <HAL_DMA_Start_IT>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00d      	beq.n	8009542 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2210      	movs	r2, #16
 800952a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2220      	movs	r2, #32
 800953a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e012      	b.n	8009568 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2240      	movs	r2, #64	; 0x40
 8009548:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009560:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	e000      	b.n	8009568 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8009566:	2302      	movs	r3, #2
  }
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	0800a28b 	.word	0x0800a28b
 8009574:	0800a2df 	.word	0x0800a2df
 8009578:	0800a381 	.word	0x0800a381

0800957c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009590:	2b20      	cmp	r3, #32
 8009592:	d170      	bne.n	8009676 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <HAL_UART_Receive_DMA+0x24>
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e069      	b.n	8009678 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d101      	bne.n	80095b2 <HAL_UART_Receive_DMA+0x36>
 80095ae:	2302      	movs	r3, #2
 80095b0:	e062      	b.n	8009678 <HAL_UART_Receive_DMA+0xfc>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2222      	movs	r2, #34	; 0x22
 80095d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d02c      	beq.n	800963a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095e4:	4a26      	ldr	r2, [pc, #152]	; (8009680 <HAL_UART_Receive_DMA+0x104>)
 80095e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ec:	4a25      	ldr	r2, [pc, #148]	; (8009684 <HAL_UART_Receive_DMA+0x108>)
 80095ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095f4:	4a24      	ldr	r2, [pc, #144]	; (8009688 <HAL_UART_Receive_DMA+0x10c>)
 80095f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095fc:	2200      	movs	r2, #0
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3324      	adds	r3, #36	; 0x24
 800960a:	4619      	mov	r1, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009610:	461a      	mov	r2, r3
 8009612:	88fb      	ldrh	r3, [r7, #6]
 8009614:	f7fc ff8e 	bl	8006534 <HAL_DMA_Start_IT>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00d      	beq.n	800963a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2210      	movs	r2, #16
 8009622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2220      	movs	r2, #32
 8009632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e01e      	b.n	8009678 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009650:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0201 	orr.w	r2, r2, #1
 8009660:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009670:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	e000      	b.n	8009678 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009676:	2302      	movs	r3, #2
  }
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	0800a2fb 	.word	0x0800a2fb
 8009684:	0800a365 	.word	0x0800a365
 8009688:	0800a381 	.word	0x0800a381

0800968c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096ac:	69fa      	ldr	r2, [r7, #28]
 80096ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80096b2:	4013      	ands	r3, r2
 80096b4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d118      	bne.n	80096ee <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	f003 0320 	and.w	r3, r3, #32
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d013      	beq.n	80096ee <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	f003 0320 	and.w	r3, r3, #32
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d104      	bne.n	80096da <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d009      	beq.n	80096ee <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 8144 	beq.w	800996c <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	4798      	blx	r3
      }
      return;
 80096ec:	e13e      	b.n	800996c <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 80e8 	beq.w	80098c6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	4ba0      	ldr	r3, [pc, #640]	; (800997c <HAL_UART_IRQHandler+0x2f0>)
 80096fa:	4013      	ands	r3, r2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d105      	bne.n	800970c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	4b9f      	ldr	r3, [pc, #636]	; (8009980 <HAL_UART_IRQHandler+0x2f4>)
 8009704:	4013      	ands	r3, r2
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 80dd 	beq.w	80098c6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d010      	beq.n	8009738 <HAL_UART_IRQHandler+0xac>
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2201      	movs	r2, #1
 8009726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972e:	f043 0201 	orr.w	r2, r3, #1
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d010      	beq.n	8009764 <HAL_UART_IRQHandler+0xd8>
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2202      	movs	r2, #2
 8009752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975a:	f043 0204 	orr.w	r2, r3, #4
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d010      	beq.n	8009790 <HAL_UART_IRQHandler+0x104>
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2204      	movs	r2, #4
 800977e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009786:	f043 0202 	orr.w	r2, r3, #2
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f003 0308 	and.w	r3, r3, #8
 8009796:	2b00      	cmp	r3, #0
 8009798:	d015      	beq.n	80097c6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d104      	bne.n	80097ae <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4b75      	ldr	r3, [pc, #468]	; (800997c <HAL_UART_IRQHandler+0x2f0>)
 80097a8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00b      	beq.n	80097c6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2208      	movs	r2, #8
 80097b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097bc:	f043 0208 	orr.w	r2, r3, #8
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d011      	beq.n	80097f4 <HAL_UART_IRQHandler+0x168>
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00c      	beq.n	80097f4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ea:	f043 0220 	orr.w	r2, r3, #32
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 80b8 	beq.w	8009970 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	f003 0320 	and.w	r3, r3, #32
 8009806:	2b00      	cmp	r3, #0
 8009808:	d011      	beq.n	800982e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	f003 0320 	and.w	r3, r3, #32
 8009810:	2b00      	cmp	r3, #0
 8009812:	d104      	bne.n	800981e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d007      	beq.n	800982e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009834:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009840:	2b40      	cmp	r3, #64	; 0x40
 8009842:	d004      	beq.n	800984e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800984a:	2b00      	cmp	r3, #0
 800984c:	d031      	beq.n	80098b2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fcf8 	bl	800a244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985e:	2b40      	cmp	r3, #64	; 0x40
 8009860:	d123      	bne.n	80098aa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009870:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009876:	2b00      	cmp	r3, #0
 8009878:	d013      	beq.n	80098a2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800987e:	4a41      	ldr	r2, [pc, #260]	; (8009984 <HAL_UART_IRQHandler+0x2f8>)
 8009880:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009886:	4618      	mov	r0, r3
 8009888:	f7fc fecf 	bl	800662a <HAL_DMA_Abort_IT>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d017      	beq.n	80098c2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098a0:	e00f      	b.n	80098c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f898 	bl	80099d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098a8:	e00b      	b.n	80098c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f894 	bl	80099d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b0:	e007      	b.n	80098c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f890 	bl	80099d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80098c0:	e056      	b.n	8009970 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c2:	bf00      	nop
    return;
 80098c4:	e054      	b.n	8009970 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00d      	beq.n	80098ec <HAL_UART_IRQHandler+0x260>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d008      	beq.n	80098ec <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80098e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fdbb 	bl	800a460 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ea:	e044      	b.n	8009976 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d012      	beq.n	800991c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d008      	beq.n	800991c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990e:	2b00      	cmp	r3, #0
 8009910:	d030      	beq.n	8009974 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	4798      	blx	r3
    }
    return;
 800991a:	e02b      	b.n	8009974 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009922:	2b00      	cmp	r3, #0
 8009924:	d008      	beq.n	8009938 <HAL_UART_IRQHandler+0x2ac>
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fd7b 	bl	800a42c <UART_EndTransmit_IT>
    return;
 8009936:	e01e      	b.n	8009976 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d008      	beq.n	8009954 <HAL_UART_IRQHandler+0x2c8>
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fd9b 	bl	800a488 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009952:	e010      	b.n	8009976 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00b      	beq.n	8009976 <HAL_UART_IRQHandler+0x2ea>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	da08      	bge.n	8009976 <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fd85 	bl	800a474 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800996a:	e004      	b.n	8009976 <HAL_UART_IRQHandler+0x2ea>
      return;
 800996c:	bf00      	nop
 800996e:	e002      	b.n	8009976 <HAL_UART_IRQHandler+0x2ea>
    return;
 8009970:	bf00      	nop
 8009972:	e000      	b.n	8009976 <HAL_UART_IRQHandler+0x2ea>
    return;
 8009974:	bf00      	nop
  }
}
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	10000001 	.word	0x10000001
 8009980:	04000120 	.word	0x04000120
 8009984:	0800a401 	.word	0x0800a401

08009988 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099ec:	b5b0      	push	{r4, r5, r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	431a      	orrs	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	431a      	orrs	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a14:	69fa      	ldr	r2, [r7, #28]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	4baf      	ldr	r3, [pc, #700]	; (8009ce0 <UART_SetConfig+0x2f4>)
 8009a22:	4013      	ands	r3, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6812      	ldr	r2, [r2, #0]
 8009a28:	69f9      	ldr	r1, [r7, #28]
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4aa5      	ldr	r2, [pc, #660]	; (8009ce4 <UART_SetConfig+0x2f8>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d004      	beq.n	8009a5e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009a68:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	6812      	ldr	r2, [r2, #0]
 8009a70:	69f9      	ldr	r1, [r7, #28]
 8009a72:	430b      	orrs	r3, r1
 8009a74:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	f023 010f 	bic.w	r1, r3, #15
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a95      	ldr	r2, [pc, #596]	; (8009ce8 <UART_SetConfig+0x2fc>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d121      	bne.n	8009ada <UART_SetConfig+0xee>
 8009a96:	4b95      	ldr	r3, [pc, #596]	; (8009cec <UART_SetConfig+0x300>)
 8009a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a9c:	f003 0303 	and.w	r3, r3, #3
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d817      	bhi.n	8009ad4 <UART_SetConfig+0xe8>
 8009aa4:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <UART_SetConfig+0xc0>)
 8009aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aaa:	bf00      	nop
 8009aac:	08009abd 	.word	0x08009abd
 8009ab0:	08009ac9 	.word	0x08009ac9
 8009ab4:	08009ac3 	.word	0x08009ac3
 8009ab8:	08009acf 	.word	0x08009acf
 8009abc:	2301      	movs	r3, #1
 8009abe:	76fb      	strb	r3, [r7, #27]
 8009ac0:	e0bc      	b.n	8009c3c <UART_SetConfig+0x250>
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	76fb      	strb	r3, [r7, #27]
 8009ac6:	e0b9      	b.n	8009c3c <UART_SetConfig+0x250>
 8009ac8:	2304      	movs	r3, #4
 8009aca:	76fb      	strb	r3, [r7, #27]
 8009acc:	e0b6      	b.n	8009c3c <UART_SetConfig+0x250>
 8009ace:	2308      	movs	r3, #8
 8009ad0:	76fb      	strb	r3, [r7, #27]
 8009ad2:	e0b3      	b.n	8009c3c <UART_SetConfig+0x250>
 8009ad4:	2310      	movs	r3, #16
 8009ad6:	76fb      	strb	r3, [r7, #27]
 8009ad8:	e0b0      	b.n	8009c3c <UART_SetConfig+0x250>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a84      	ldr	r2, [pc, #528]	; (8009cf0 <UART_SetConfig+0x304>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d132      	bne.n	8009b4a <UART_SetConfig+0x15e>
 8009ae4:	4b81      	ldr	r3, [pc, #516]	; (8009cec <UART_SetConfig+0x300>)
 8009ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aea:	f003 030c 	and.w	r3, r3, #12
 8009aee:	2b0c      	cmp	r3, #12
 8009af0:	d828      	bhi.n	8009b44 <UART_SetConfig+0x158>
 8009af2:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <UART_SetConfig+0x10c>)
 8009af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af8:	08009b2d 	.word	0x08009b2d
 8009afc:	08009b45 	.word	0x08009b45
 8009b00:	08009b45 	.word	0x08009b45
 8009b04:	08009b45 	.word	0x08009b45
 8009b08:	08009b39 	.word	0x08009b39
 8009b0c:	08009b45 	.word	0x08009b45
 8009b10:	08009b45 	.word	0x08009b45
 8009b14:	08009b45 	.word	0x08009b45
 8009b18:	08009b33 	.word	0x08009b33
 8009b1c:	08009b45 	.word	0x08009b45
 8009b20:	08009b45 	.word	0x08009b45
 8009b24:	08009b45 	.word	0x08009b45
 8009b28:	08009b3f 	.word	0x08009b3f
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	76fb      	strb	r3, [r7, #27]
 8009b30:	e084      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b32:	2302      	movs	r3, #2
 8009b34:	76fb      	strb	r3, [r7, #27]
 8009b36:	e081      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	76fb      	strb	r3, [r7, #27]
 8009b3c:	e07e      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b3e:	2308      	movs	r3, #8
 8009b40:	76fb      	strb	r3, [r7, #27]
 8009b42:	e07b      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b44:	2310      	movs	r3, #16
 8009b46:	76fb      	strb	r3, [r7, #27]
 8009b48:	e078      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a69      	ldr	r2, [pc, #420]	; (8009cf4 <UART_SetConfig+0x308>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d120      	bne.n	8009b96 <UART_SetConfig+0x1aa>
 8009b54:	4b65      	ldr	r3, [pc, #404]	; (8009cec <UART_SetConfig+0x300>)
 8009b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b5e:	2b30      	cmp	r3, #48	; 0x30
 8009b60:	d013      	beq.n	8009b8a <UART_SetConfig+0x19e>
 8009b62:	2b30      	cmp	r3, #48	; 0x30
 8009b64:	d814      	bhi.n	8009b90 <UART_SetConfig+0x1a4>
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	d009      	beq.n	8009b7e <UART_SetConfig+0x192>
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	d810      	bhi.n	8009b90 <UART_SetConfig+0x1a4>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <UART_SetConfig+0x18c>
 8009b72:	2b10      	cmp	r3, #16
 8009b74:	d006      	beq.n	8009b84 <UART_SetConfig+0x198>
 8009b76:	e00b      	b.n	8009b90 <UART_SetConfig+0x1a4>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	76fb      	strb	r3, [r7, #27]
 8009b7c:	e05e      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	76fb      	strb	r3, [r7, #27]
 8009b82:	e05b      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b84:	2304      	movs	r3, #4
 8009b86:	76fb      	strb	r3, [r7, #27]
 8009b88:	e058      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b8a:	2308      	movs	r3, #8
 8009b8c:	76fb      	strb	r3, [r7, #27]
 8009b8e:	e055      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b90:	2310      	movs	r3, #16
 8009b92:	76fb      	strb	r3, [r7, #27]
 8009b94:	e052      	b.n	8009c3c <UART_SetConfig+0x250>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a57      	ldr	r2, [pc, #348]	; (8009cf8 <UART_SetConfig+0x30c>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d120      	bne.n	8009be2 <UART_SetConfig+0x1f6>
 8009ba0:	4b52      	ldr	r3, [pc, #328]	; (8009cec <UART_SetConfig+0x300>)
 8009ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009baa:	2bc0      	cmp	r3, #192	; 0xc0
 8009bac:	d013      	beq.n	8009bd6 <UART_SetConfig+0x1ea>
 8009bae:	2bc0      	cmp	r3, #192	; 0xc0
 8009bb0:	d814      	bhi.n	8009bdc <UART_SetConfig+0x1f0>
 8009bb2:	2b80      	cmp	r3, #128	; 0x80
 8009bb4:	d009      	beq.n	8009bca <UART_SetConfig+0x1de>
 8009bb6:	2b80      	cmp	r3, #128	; 0x80
 8009bb8:	d810      	bhi.n	8009bdc <UART_SetConfig+0x1f0>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <UART_SetConfig+0x1d8>
 8009bbe:	2b40      	cmp	r3, #64	; 0x40
 8009bc0:	d006      	beq.n	8009bd0 <UART_SetConfig+0x1e4>
 8009bc2:	e00b      	b.n	8009bdc <UART_SetConfig+0x1f0>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	76fb      	strb	r3, [r7, #27]
 8009bc8:	e038      	b.n	8009c3c <UART_SetConfig+0x250>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	76fb      	strb	r3, [r7, #27]
 8009bce:	e035      	b.n	8009c3c <UART_SetConfig+0x250>
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	76fb      	strb	r3, [r7, #27]
 8009bd4:	e032      	b.n	8009c3c <UART_SetConfig+0x250>
 8009bd6:	2308      	movs	r3, #8
 8009bd8:	76fb      	strb	r3, [r7, #27]
 8009bda:	e02f      	b.n	8009c3c <UART_SetConfig+0x250>
 8009bdc:	2310      	movs	r3, #16
 8009bde:	76fb      	strb	r3, [r7, #27]
 8009be0:	e02c      	b.n	8009c3c <UART_SetConfig+0x250>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a3f      	ldr	r2, [pc, #252]	; (8009ce4 <UART_SetConfig+0x2f8>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d125      	bne.n	8009c38 <UART_SetConfig+0x24c>
 8009bec:	4b3f      	ldr	r3, [pc, #252]	; (8009cec <UART_SetConfig+0x300>)
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009bf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bfa:	d017      	beq.n	8009c2c <UART_SetConfig+0x240>
 8009bfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c00:	d817      	bhi.n	8009c32 <UART_SetConfig+0x246>
 8009c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c06:	d00b      	beq.n	8009c20 <UART_SetConfig+0x234>
 8009c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c0c:	d811      	bhi.n	8009c32 <UART_SetConfig+0x246>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <UART_SetConfig+0x22e>
 8009c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c16:	d006      	beq.n	8009c26 <UART_SetConfig+0x23a>
 8009c18:	e00b      	b.n	8009c32 <UART_SetConfig+0x246>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	76fb      	strb	r3, [r7, #27]
 8009c1e:	e00d      	b.n	8009c3c <UART_SetConfig+0x250>
 8009c20:	2302      	movs	r3, #2
 8009c22:	76fb      	strb	r3, [r7, #27]
 8009c24:	e00a      	b.n	8009c3c <UART_SetConfig+0x250>
 8009c26:	2304      	movs	r3, #4
 8009c28:	76fb      	strb	r3, [r7, #27]
 8009c2a:	e007      	b.n	8009c3c <UART_SetConfig+0x250>
 8009c2c:	2308      	movs	r3, #8
 8009c2e:	76fb      	strb	r3, [r7, #27]
 8009c30:	e004      	b.n	8009c3c <UART_SetConfig+0x250>
 8009c32:	2310      	movs	r3, #16
 8009c34:	76fb      	strb	r3, [r7, #27]
 8009c36:	e001      	b.n	8009c3c <UART_SetConfig+0x250>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a28      	ldr	r2, [pc, #160]	; (8009ce4 <UART_SetConfig+0x2f8>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	f040 809e 	bne.w	8009d84 <UART_SetConfig+0x398>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c48:	7efb      	ldrb	r3, [r7, #27]
 8009c4a:	2b08      	cmp	r3, #8
 8009c4c:	d823      	bhi.n	8009c96 <UART_SetConfig+0x2aa>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <UART_SetConfig+0x268>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c79 	.word	0x08009c79
 8009c58:	08009c97 	.word	0x08009c97
 8009c5c:	08009c81 	.word	0x08009c81
 8009c60:	08009c97 	.word	0x08009c97
 8009c64:	08009c87 	.word	0x08009c87
 8009c68:	08009c97 	.word	0x08009c97
 8009c6c:	08009c97 	.word	0x08009c97
 8009c70:	08009c97 	.word	0x08009c97
 8009c74:	08009c8f 	.word	0x08009c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c78:	f7fd fde8 	bl	800784c <HAL_RCC_GetPCLK1Freq>
 8009c7c:	6178      	str	r0, [r7, #20]
        break;
 8009c7e:	e00f      	b.n	8009ca0 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c80:	4b1e      	ldr	r3, [pc, #120]	; (8009cfc <UART_SetConfig+0x310>)
 8009c82:	617b      	str	r3, [r7, #20]
        break;
 8009c84:	e00c      	b.n	8009ca0 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c86:	f7fd fd73 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 8009c8a:	6178      	str	r0, [r7, #20]
        break;
 8009c8c:	e008      	b.n	8009ca0 <UART_SetConfig+0x2b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c92:	617b      	str	r3, [r7, #20]
        break;
 8009c94:	e004      	b.n	8009ca0 <UART_SetConfig+0x2b4>
      default:
        pclk = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	76bb      	strb	r3, [r7, #26]
        break;
 8009c9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 812e 	beq.w	8009f04 <UART_SetConfig+0x518>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	4a14      	ldr	r2, [pc, #80]	; (8009d00 <UART_SetConfig+0x314>)
 8009cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cba:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	4413      	add	r3, r2
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d305      	bcc.n	8009cd8 <UART_SetConfig+0x2ec>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d915      	bls.n	8009d04 <UART_SetConfig+0x318>
      {
        ret = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	76bb      	strb	r3, [r7, #26]
 8009cdc:	e112      	b.n	8009f04 <UART_SetConfig+0x518>
 8009cde:	bf00      	nop
 8009ce0:	cfff69f3 	.word	0xcfff69f3
 8009ce4:	40008000 	.word	0x40008000
 8009ce8:	40013800 	.word	0x40013800
 8009cec:	40021000 	.word	0x40021000
 8009cf0:	40004400 	.word	0x40004400
 8009cf4:	40004800 	.word	0x40004800
 8009cf8:	40004c00 	.word	0x40004c00
 8009cfc:	00f42400 	.word	0x00f42400
 8009d00:	0800ad3c 	.word	0x0800ad3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f04f 0100 	mov.w	r1, #0
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d10:	4a86      	ldr	r2, [pc, #536]	; (8009f2c <UART_SetConfig+0x540>)
 8009d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	f04f 0300 	mov.w	r3, #0
 8009d1c:	f7f6 fea2 	bl	8000a64 <__aeabi_uldivmod>
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	4610      	mov	r0, r2
 8009d26:	4619      	mov	r1, r3
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	020b      	lsls	r3, r1, #8
 8009d32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d36:	0202      	lsls	r2, r0, #8
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	6849      	ldr	r1, [r1, #4]
 8009d3c:	0849      	lsrs	r1, r1, #1
 8009d3e:	4608      	mov	r0, r1
 8009d40:	f04f 0100 	mov.w	r1, #0
 8009d44:	1814      	adds	r4, r2, r0
 8009d46:	eb43 0501 	adc.w	r5, r3, r1
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f04f 0300 	mov.w	r3, #0
 8009d54:	4620      	mov	r0, r4
 8009d56:	4629      	mov	r1, r5
 8009d58:	f7f6 fe84 	bl	8000a64 <__aeabi_uldivmod>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4613      	mov	r3, r2
 8009d62:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d6a:	d308      	bcc.n	8009d7e <UART_SetConfig+0x392>
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d72:	d204      	bcs.n	8009d7e <UART_SetConfig+0x392>
        {
          huart->Instance->BRR = usartdiv;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	60da      	str	r2, [r3, #12]
 8009d7c:	e0c2      	b.n	8009f04 <UART_SetConfig+0x518>
        }
        else
        {
          ret = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	76bb      	strb	r3, [r7, #26]
 8009d82:	e0bf      	b.n	8009f04 <UART_SetConfig+0x518>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d8c:	d165      	bne.n	8009e5a <UART_SetConfig+0x46e>
  {
    switch (clocksource)
 8009d8e:	7efb      	ldrb	r3, [r7, #27]
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d828      	bhi.n	8009de6 <UART_SetConfig+0x3fa>
 8009d94:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <UART_SetConfig+0x3b0>)
 8009d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9a:	bf00      	nop
 8009d9c:	08009dc1 	.word	0x08009dc1
 8009da0:	08009dc9 	.word	0x08009dc9
 8009da4:	08009dd1 	.word	0x08009dd1
 8009da8:	08009de7 	.word	0x08009de7
 8009dac:	08009dd7 	.word	0x08009dd7
 8009db0:	08009de7 	.word	0x08009de7
 8009db4:	08009de7 	.word	0x08009de7
 8009db8:	08009de7 	.word	0x08009de7
 8009dbc:	08009ddf 	.word	0x08009ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dc0:	f7fd fd44 	bl	800784c <HAL_RCC_GetPCLK1Freq>
 8009dc4:	6178      	str	r0, [r7, #20]
        break;
 8009dc6:	e013      	b.n	8009df0 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dc8:	f7fd fd56 	bl	8007878 <HAL_RCC_GetPCLK2Freq>
 8009dcc:	6178      	str	r0, [r7, #20]
        break;
 8009dce:	e00f      	b.n	8009df0 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd0:	4b57      	ldr	r3, [pc, #348]	; (8009f30 <UART_SetConfig+0x544>)
 8009dd2:	617b      	str	r3, [r7, #20]
        break;
 8009dd4:	e00c      	b.n	8009df0 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dd6:	f7fd fccb 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 8009dda:	6178      	str	r0, [r7, #20]
        break;
 8009ddc:	e008      	b.n	8009df0 <UART_SetConfig+0x404>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009de2:	617b      	str	r3, [r7, #20]
        break;
 8009de4:	e004      	b.n	8009df0 <UART_SetConfig+0x404>
      default:
        pclk = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	76bb      	strb	r3, [r7, #26]
        break;
 8009dee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 8086 	beq.w	8009f04 <UART_SetConfig+0x518>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	4a4b      	ldr	r2, [pc, #300]	; (8009f2c <UART_SetConfig+0x540>)
 8009dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e02:	461a      	mov	r2, r3
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e0a:	005a      	lsls	r2, r3, #1
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	085b      	lsrs	r3, r3, #1
 8009e12:	441a      	add	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	2b0f      	cmp	r3, #15
 8009e24:	d916      	bls.n	8009e54 <UART_SetConfig+0x468>
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e2c:	d212      	bcs.n	8009e54 <UART_SetConfig+0x468>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f023 030f 	bic.w	r3, r3, #15
 8009e36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	f003 0307 	and.w	r3, r3, #7
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	89fb      	ldrh	r3, [r7, #14]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	89fa      	ldrh	r2, [r7, #14]
 8009e50:	60da      	str	r2, [r3, #12]
 8009e52:	e057      	b.n	8009f04 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	76bb      	strb	r3, [r7, #26]
 8009e58:	e054      	b.n	8009f04 <UART_SetConfig+0x518>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e5a:	7efb      	ldrb	r3, [r7, #27]
 8009e5c:	2b08      	cmp	r3, #8
 8009e5e:	d828      	bhi.n	8009eb2 <UART_SetConfig+0x4c6>
 8009e60:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <UART_SetConfig+0x47c>)
 8009e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e66:	bf00      	nop
 8009e68:	08009e8d 	.word	0x08009e8d
 8009e6c:	08009e95 	.word	0x08009e95
 8009e70:	08009e9d 	.word	0x08009e9d
 8009e74:	08009eb3 	.word	0x08009eb3
 8009e78:	08009ea3 	.word	0x08009ea3
 8009e7c:	08009eb3 	.word	0x08009eb3
 8009e80:	08009eb3 	.word	0x08009eb3
 8009e84:	08009eb3 	.word	0x08009eb3
 8009e88:	08009eab 	.word	0x08009eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e8c:	f7fd fcde 	bl	800784c <HAL_RCC_GetPCLK1Freq>
 8009e90:	6178      	str	r0, [r7, #20]
        break;
 8009e92:	e013      	b.n	8009ebc <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e94:	f7fd fcf0 	bl	8007878 <HAL_RCC_GetPCLK2Freq>
 8009e98:	6178      	str	r0, [r7, #20]
        break;
 8009e9a:	e00f      	b.n	8009ebc <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e9c:	4b24      	ldr	r3, [pc, #144]	; (8009f30 <UART_SetConfig+0x544>)
 8009e9e:	617b      	str	r3, [r7, #20]
        break;
 8009ea0:	e00c      	b.n	8009ebc <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ea2:	f7fd fc65 	bl	8007770 <HAL_RCC_GetSysClockFreq>
 8009ea6:	6178      	str	r0, [r7, #20]
        break;
 8009ea8:	e008      	b.n	8009ebc <UART_SetConfig+0x4d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eae:	617b      	str	r3, [r7, #20]
        break;
 8009eb0:	e004      	b.n	8009ebc <UART_SetConfig+0x4d0>
      default:
        pclk = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	76bb      	strb	r3, [r7, #26]
        break;
 8009eba:	bf00      	nop
    }

    if (pclk != 0U)
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d020      	beq.n	8009f04 <UART_SetConfig+0x518>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	4a19      	ldr	r2, [pc, #100]	; (8009f2c <UART_SetConfig+0x540>)
 8009ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	085b      	lsrs	r3, r3, #1
 8009eda:	441a      	add	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2b0f      	cmp	r3, #15
 8009eec:	d908      	bls.n	8009f00 <UART_SetConfig+0x514>
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef4:	d204      	bcs.n	8009f00 <UART_SetConfig+0x514>
      {
        huart->Instance->BRR = usartdiv;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	60da      	str	r2, [r3, #12]
 8009efe:	e001      	b.n	8009f04 <UART_SetConfig+0x518>
      }
      else
      {
        ret = HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009f20:	7ebb      	ldrb	r3, [r7, #26]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3720      	adds	r7, #32
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bdb0      	pop	{r4, r5, r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	0800ad3c 	.word	0x0800ad3c
 8009f30:	00f42400 	.word	0x00f42400

08009f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00a      	beq.n	8009f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f84:	f003 0304 	and.w	r3, r3, #4
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00a      	beq.n	8009fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa6:	f003 0308 	and.w	r3, r3, #8
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc8:	f003 0310 	and.w	r3, r3, #16
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00a      	beq.n	8009fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01a      	beq.n	800a04a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a032:	d10a      	bne.n	800a04a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	430a      	orrs	r2, r1
 800a06a:	605a      	str	r2, [r3, #4]
  }
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a088:	f7fa fcec 	bl	8004a64 <HAL_GetTick>
 800a08c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0308 	and.w	r3, r3, #8
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d10e      	bne.n	800a0ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a09c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f82c 	bl	800a108 <UART_WaitOnFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e022      	b.n	800a100 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0304 	and.w	r3, r3, #4
 800a0c4:	2b04      	cmp	r3, #4
 800a0c6:	d10e      	bne.n	800a0e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f816 	bl	800a108 <UART_WaitOnFlagUntilTimeout>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e00c      	b.n	800a100 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	603b      	str	r3, [r7, #0]
 800a114:	4613      	mov	r3, r2
 800a116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a118:	e062      	b.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a120:	d05e      	beq.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a122:	f7fa fc9f 	bl	8004a64 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d302      	bcc.n	800a138 <UART_WaitOnFlagUntilTimeout+0x30>
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d11d      	bne.n	800a174 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a146:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689a      	ldr	r2, [r3, #8]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 0201 	bic.w	r2, r2, #1
 800a156:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2220      	movs	r2, #32
 800a15c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2220      	movs	r2, #32
 800a164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e045      	b.n	800a200 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0304 	and.w	r3, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d02e      	beq.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	69db      	ldr	r3, [r3, #28]
 800a188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a18c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a190:	d126      	bne.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a19a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a1aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689a      	ldr	r2, [r3, #8]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f022 0201 	bic.w	r2, r2, #1
 800a1ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e00f      	b.n	800a200 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	69da      	ldr	r2, [r3, #28]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2301      	moveq	r3, #1
 800a1f2:	2300      	movne	r3, #0
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	79fb      	ldrb	r3, [r7, #7]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d08d      	beq.n	800a11a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a21e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	689a      	ldr	r2, [r3, #8]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a22e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2220      	movs	r2, #32
 800a234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a25a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	6812      	ldr	r2, [r2, #0]
 800a266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a26a:	f023 0301 	bic.w	r3, r3, #1
 800a26e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2220      	movs	r2, #32
 800a274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a296:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d114      	bne.n	800a2d0 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2bc:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2cc:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2ce:	e002      	b.n	800a2d6 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f7ff fb59 	bl	8009988 <HAL_UART_TxCpltCallback>
}
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff fb55 	bl	800999c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2f2:	bf00      	nop
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a306:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0320 	and.w	r3, r3, #32
 800a312:	2b00      	cmp	r3, #0
 800a314:	d11f      	bne.n	800a356 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a32c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 0201 	bic.w	r2, r2, #1
 800a33c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a34c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2220      	movs	r2, #32
 800a352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f7ff fb2a 	bl	80099b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a35c:	bf00      	nop
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a370:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f7ff fb26 	bl	80099c4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a378:	bf00      	nop
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a394:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a39c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a8:	2b80      	cmp	r3, #128	; 0x80
 800a3aa:	d109      	bne.n	800a3c0 <UART_DMAError+0x40>
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	2b21      	cmp	r3, #33	; 0x21
 800a3b0:	d106      	bne.n	800a3c0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a3ba:	6978      	ldr	r0, [r7, #20]
 800a3bc:	f7ff ff24 	bl	800a208 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ca:	2b40      	cmp	r3, #64	; 0x40
 800a3cc:	d109      	bne.n	800a3e2 <UART_DMAError+0x62>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b22      	cmp	r3, #34	; 0x22
 800a3d2:	d106      	bne.n	800a3e2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a3dc:	6978      	ldr	r0, [r7, #20]
 800a3de:	f7ff ff31 	bl	800a244 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e8:	f043 0210 	orr.w	r2, r3, #16
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3f2:	6978      	ldr	r0, [r7, #20]
 800a3f4:	f7ff faf0 	bl	80099d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3f8:	bf00      	nop
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f7ff fada 	bl	80099d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a424:	bf00      	nop
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a442:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2220      	movs	r2, #32
 800a448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff fa98 	bl	8009988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d101      	bne.n	800a4b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	e027      	b.n	800a502 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2224      	movs	r2, #36	; 0x24
 800a4be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 0201 	bic.w	r2, r2, #1
 800a4d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a4e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a522:	2302      	movs	r3, #2
 800a524:	e02d      	b.n	800a582 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2224      	movs	r2, #36	; 0x24
 800a532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 0201 	bic.w	r2, r2, #1
 800a54c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f850 	bl	800a608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2220      	movs	r2, #32
 800a574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d101      	bne.n	800a5a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a59e:	2302      	movs	r3, #2
 800a5a0:	e02d      	b.n	800a5fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2224      	movs	r2, #36	; 0x24
 800a5ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f022 0201 	bic.w	r2, r2, #1
 800a5c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f812 	bl	800a608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a608:	b480      	push	{r7}
 800a60a:	b089      	sub	sp, #36	; 0x24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a610:	4a2f      	ldr	r2, [pc, #188]	; (800a6d0 <UARTEx_SetNbDataToProcess+0xc8>)
 800a612:	f107 0314 	add.w	r3, r7, #20
 800a616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a61a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a61e:	4a2d      	ldr	r2, [pc, #180]	; (800a6d4 <UARTEx_SetNbDataToProcess+0xcc>)
 800a620:	f107 030c 	add.w	r3, r7, #12
 800a624:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a628:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a630:	2b00      	cmp	r3, #0
 800a632:	d108      	bne.n	800a646 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a644:	e03d      	b.n	800a6c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a646:	2308      	movs	r3, #8
 800a648:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a64a:	2308      	movs	r3, #8
 800a64c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	0e5b      	lsrs	r3, r3, #25
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 0307 	and.w	r3, r3, #7
 800a65c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	0f5b      	lsrs	r3, r3, #29
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 0307 	and.w	r3, r3, #7
 800a66c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a66e:	7fbb      	ldrb	r3, [r7, #30]
 800a670:	7f3a      	ldrb	r2, [r7, #28]
 800a672:	f107 0120 	add.w	r1, r7, #32
 800a676:	440a      	add	r2, r1
 800a678:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a67c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a680:	7f3a      	ldrb	r2, [r7, #28]
 800a682:	f107 0120 	add.w	r1, r7, #32
 800a686:	440a      	add	r2, r1
 800a688:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a68c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a698:	7ffb      	ldrb	r3, [r7, #31]
 800a69a:	7f7a      	ldrb	r2, [r7, #29]
 800a69c:	f107 0120 	add.w	r1, r7, #32
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a6a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6aa:	7f7a      	ldrb	r2, [r7, #29]
 800a6ac:	f107 0120 	add.w	r1, r7, #32
 800a6b0:	440a      	add	r2, r1
 800a6b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6c2:	bf00      	nop
 800a6c4:	3724      	adds	r7, #36	; 0x24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	0800abe0 	.word	0x0800abe0
 800a6d4:	0800abe8 	.word	0x0800abe8

0800a6d8 <__cxa_pure_virtual>:
 800a6d8:	b508      	push	{r3, lr}
 800a6da:	f000 f80d 	bl	800a6f8 <_ZSt9terminatev>

0800a6de <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a6de:	b508      	push	{r3, lr}
 800a6e0:	4780      	blx	r0
 800a6e2:	f000 f80e 	bl	800a702 <abort>
	...

0800a6e8 <_ZSt13get_terminatev>:
 800a6e8:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <_ZSt13get_terminatev+0xc>)
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	f3bf 8f5b 	dmb	ish
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	2000000c 	.word	0x2000000c

0800a6f8 <_ZSt9terminatev>:
 800a6f8:	b508      	push	{r3, lr}
 800a6fa:	f7ff fff5 	bl	800a6e8 <_ZSt13get_terminatev>
 800a6fe:	f7ff ffee 	bl	800a6de <_ZN10__cxxabiv111__terminateEPFvvE>

0800a702 <abort>:
 800a702:	b508      	push	{r3, lr}
 800a704:	2006      	movs	r0, #6
 800a706:	f000 f873 	bl	800a7f0 <raise>
 800a70a:	2001      	movs	r0, #1
 800a70c:	f7fa f89a 	bl	8004844 <_exit>

0800a710 <__errno>:
 800a710:	4b01      	ldr	r3, [pc, #4]	; (800a718 <__errno+0x8>)
 800a712:	6818      	ldr	r0, [r3, #0]
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	20000010 	.word	0x20000010

0800a71c <__libc_init_array>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	4d0d      	ldr	r5, [pc, #52]	; (800a754 <__libc_init_array+0x38>)
 800a720:	4c0d      	ldr	r4, [pc, #52]	; (800a758 <__libc_init_array+0x3c>)
 800a722:	1b64      	subs	r4, r4, r5
 800a724:	10a4      	asrs	r4, r4, #2
 800a726:	2600      	movs	r6, #0
 800a728:	42a6      	cmp	r6, r4
 800a72a:	d109      	bne.n	800a740 <__libc_init_array+0x24>
 800a72c:	4d0b      	ldr	r5, [pc, #44]	; (800a75c <__libc_init_array+0x40>)
 800a72e:	4c0c      	ldr	r4, [pc, #48]	; (800a760 <__libc_init_array+0x44>)
 800a730:	f000 f970 	bl	800aa14 <_init>
 800a734:	1b64      	subs	r4, r4, r5
 800a736:	10a4      	asrs	r4, r4, #2
 800a738:	2600      	movs	r6, #0
 800a73a:	42a6      	cmp	r6, r4
 800a73c:	d105      	bne.n	800a74a <__libc_init_array+0x2e>
 800a73e:	bd70      	pop	{r4, r5, r6, pc}
 800a740:	f855 3b04 	ldr.w	r3, [r5], #4
 800a744:	4798      	blx	r3
 800a746:	3601      	adds	r6, #1
 800a748:	e7ee      	b.n	800a728 <__libc_init_array+0xc>
 800a74a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a74e:	4798      	blx	r3
 800a750:	3601      	adds	r6, #1
 800a752:	e7f2      	b.n	800a73a <__libc_init_array+0x1e>
 800a754:	0800ad5c 	.word	0x0800ad5c
 800a758:	0800ad5c 	.word	0x0800ad5c
 800a75c:	0800ad5c 	.word	0x0800ad5c
 800a760:	0800ad64 	.word	0x0800ad64

0800a764 <memcpy>:
 800a764:	440a      	add	r2, r1
 800a766:	4291      	cmp	r1, r2
 800a768:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a76c:	d100      	bne.n	800a770 <memcpy+0xc>
 800a76e:	4770      	bx	lr
 800a770:	b510      	push	{r4, lr}
 800a772:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a77a:	4291      	cmp	r1, r2
 800a77c:	d1f9      	bne.n	800a772 <memcpy+0xe>
 800a77e:	bd10      	pop	{r4, pc}

0800a780 <memset>:
 800a780:	4402      	add	r2, r0
 800a782:	4603      	mov	r3, r0
 800a784:	4293      	cmp	r3, r2
 800a786:	d100      	bne.n	800a78a <memset+0xa>
 800a788:	4770      	bx	lr
 800a78a:	f803 1b01 	strb.w	r1, [r3], #1
 800a78e:	e7f9      	b.n	800a784 <memset+0x4>

0800a790 <realloc>:
 800a790:	4b02      	ldr	r3, [pc, #8]	; (800a79c <realloc+0xc>)
 800a792:	460a      	mov	r2, r1
 800a794:	4601      	mov	r1, r0
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	f000 b8a0 	b.w	800a8dc <_realloc_r>
 800a79c:	20000010 	.word	0x20000010

0800a7a0 <_raise_r>:
 800a7a0:	291f      	cmp	r1, #31
 800a7a2:	b538      	push	{r3, r4, r5, lr}
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	460d      	mov	r5, r1
 800a7a8:	d904      	bls.n	800a7b4 <_raise_r+0x14>
 800a7aa:	2316      	movs	r3, #22
 800a7ac:	6003      	str	r3, [r0, #0]
 800a7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7b6:	b112      	cbz	r2, 800a7be <_raise_r+0x1e>
 800a7b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7bc:	b94b      	cbnz	r3, 800a7d2 <_raise_r+0x32>
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 f830 	bl	800a824 <_getpid_r>
 800a7c4:	462a      	mov	r2, r5
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ce:	f000 b817 	b.w	800a800 <_kill_r>
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d00a      	beq.n	800a7ec <_raise_r+0x4c>
 800a7d6:	1c59      	adds	r1, r3, #1
 800a7d8:	d103      	bne.n	800a7e2 <_raise_r+0x42>
 800a7da:	2316      	movs	r3, #22
 800a7dc:	6003      	str	r3, [r0, #0]
 800a7de:	2001      	movs	r0, #1
 800a7e0:	e7e7      	b.n	800a7b2 <_raise_r+0x12>
 800a7e2:	2400      	movs	r4, #0
 800a7e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	4798      	blx	r3
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	e7e0      	b.n	800a7b2 <_raise_r+0x12>

0800a7f0 <raise>:
 800a7f0:	4b02      	ldr	r3, [pc, #8]	; (800a7fc <raise+0xc>)
 800a7f2:	4601      	mov	r1, r0
 800a7f4:	6818      	ldr	r0, [r3, #0]
 800a7f6:	f7ff bfd3 	b.w	800a7a0 <_raise_r>
 800a7fa:	bf00      	nop
 800a7fc:	20000010 	.word	0x20000010

0800a800 <_kill_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d07      	ldr	r5, [pc, #28]	; (800a820 <_kill_r+0x20>)
 800a804:	2300      	movs	r3, #0
 800a806:	4604      	mov	r4, r0
 800a808:	4608      	mov	r0, r1
 800a80a:	4611      	mov	r1, r2
 800a80c:	602b      	str	r3, [r5, #0]
 800a80e:	f7fa f809 	bl	8004824 <_kill>
 800a812:	1c43      	adds	r3, r0, #1
 800a814:	d102      	bne.n	800a81c <_kill_r+0x1c>
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	b103      	cbz	r3, 800a81c <_kill_r+0x1c>
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	bd38      	pop	{r3, r4, r5, pc}
 800a81e:	bf00      	nop
 800a820:	20000e3c 	.word	0x20000e3c

0800a824 <_getpid_r>:
 800a824:	f7f9 bff6 	b.w	8004814 <_getpid>

0800a828 <_malloc_r>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	1ccd      	adds	r5, r1, #3
 800a82c:	f025 0503 	bic.w	r5, r5, #3
 800a830:	3508      	adds	r5, #8
 800a832:	2d0c      	cmp	r5, #12
 800a834:	bf38      	it	cc
 800a836:	250c      	movcc	r5, #12
 800a838:	2d00      	cmp	r5, #0
 800a83a:	4606      	mov	r6, r0
 800a83c:	db01      	blt.n	800a842 <_malloc_r+0x1a>
 800a83e:	42a9      	cmp	r1, r5
 800a840:	d903      	bls.n	800a84a <_malloc_r+0x22>
 800a842:	230c      	movs	r3, #12
 800a844:	6033      	str	r3, [r6, #0]
 800a846:	2000      	movs	r0, #0
 800a848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a84a:	f000 f87d 	bl	800a948 <__malloc_lock>
 800a84e:	4921      	ldr	r1, [pc, #132]	; (800a8d4 <_malloc_r+0xac>)
 800a850:	680a      	ldr	r2, [r1, #0]
 800a852:	4614      	mov	r4, r2
 800a854:	b99c      	cbnz	r4, 800a87e <_malloc_r+0x56>
 800a856:	4f20      	ldr	r7, [pc, #128]	; (800a8d8 <_malloc_r+0xb0>)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	b923      	cbnz	r3, 800a866 <_malloc_r+0x3e>
 800a85c:	4621      	mov	r1, r4
 800a85e:	4630      	mov	r0, r6
 800a860:	f000 f862 	bl	800a928 <_sbrk_r>
 800a864:	6038      	str	r0, [r7, #0]
 800a866:	4629      	mov	r1, r5
 800a868:	4630      	mov	r0, r6
 800a86a:	f000 f85d 	bl	800a928 <_sbrk_r>
 800a86e:	1c43      	adds	r3, r0, #1
 800a870:	d123      	bne.n	800a8ba <_malloc_r+0x92>
 800a872:	230c      	movs	r3, #12
 800a874:	6033      	str	r3, [r6, #0]
 800a876:	4630      	mov	r0, r6
 800a878:	f000 f86c 	bl	800a954 <__malloc_unlock>
 800a87c:	e7e3      	b.n	800a846 <_malloc_r+0x1e>
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	1b5b      	subs	r3, r3, r5
 800a882:	d417      	bmi.n	800a8b4 <_malloc_r+0x8c>
 800a884:	2b0b      	cmp	r3, #11
 800a886:	d903      	bls.n	800a890 <_malloc_r+0x68>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	441c      	add	r4, r3
 800a88c:	6025      	str	r5, [r4, #0]
 800a88e:	e004      	b.n	800a89a <_malloc_r+0x72>
 800a890:	6863      	ldr	r3, [r4, #4]
 800a892:	42a2      	cmp	r2, r4
 800a894:	bf0c      	ite	eq
 800a896:	600b      	streq	r3, [r1, #0]
 800a898:	6053      	strne	r3, [r2, #4]
 800a89a:	4630      	mov	r0, r6
 800a89c:	f000 f85a 	bl	800a954 <__malloc_unlock>
 800a8a0:	f104 000b 	add.w	r0, r4, #11
 800a8a4:	1d23      	adds	r3, r4, #4
 800a8a6:	f020 0007 	bic.w	r0, r0, #7
 800a8aa:	1ac2      	subs	r2, r0, r3
 800a8ac:	d0cc      	beq.n	800a848 <_malloc_r+0x20>
 800a8ae:	1a1b      	subs	r3, r3, r0
 800a8b0:	50a3      	str	r3, [r4, r2]
 800a8b2:	e7c9      	b.n	800a848 <_malloc_r+0x20>
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	6864      	ldr	r4, [r4, #4]
 800a8b8:	e7cc      	b.n	800a854 <_malloc_r+0x2c>
 800a8ba:	1cc4      	adds	r4, r0, #3
 800a8bc:	f024 0403 	bic.w	r4, r4, #3
 800a8c0:	42a0      	cmp	r0, r4
 800a8c2:	d0e3      	beq.n	800a88c <_malloc_r+0x64>
 800a8c4:	1a21      	subs	r1, r4, r0
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f000 f82e 	bl	800a928 <_sbrk_r>
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	d1dd      	bne.n	800a88c <_malloc_r+0x64>
 800a8d0:	e7cf      	b.n	800a872 <_malloc_r+0x4a>
 800a8d2:	bf00      	nop
 800a8d4:	20000abc 	.word	0x20000abc
 800a8d8:	20000ac0 	.word	0x20000ac0

0800a8dc <_realloc_r>:
 800a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8de:	4607      	mov	r7, r0
 800a8e0:	4614      	mov	r4, r2
 800a8e2:	460e      	mov	r6, r1
 800a8e4:	b921      	cbnz	r1, 800a8f0 <_realloc_r+0x14>
 800a8e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	f7ff bf9c 	b.w	800a828 <_malloc_r>
 800a8f0:	b922      	cbnz	r2, 800a8fc <_realloc_r+0x20>
 800a8f2:	f000 f835 	bl	800a960 <_free_r>
 800a8f6:	4625      	mov	r5, r4
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fc:	f000 f880 	bl	800aa00 <_malloc_usable_size_r>
 800a900:	42a0      	cmp	r0, r4
 800a902:	d20f      	bcs.n	800a924 <_realloc_r+0x48>
 800a904:	4621      	mov	r1, r4
 800a906:	4638      	mov	r0, r7
 800a908:	f7ff ff8e 	bl	800a828 <_malloc_r>
 800a90c:	4605      	mov	r5, r0
 800a90e:	2800      	cmp	r0, #0
 800a910:	d0f2      	beq.n	800a8f8 <_realloc_r+0x1c>
 800a912:	4631      	mov	r1, r6
 800a914:	4622      	mov	r2, r4
 800a916:	f7ff ff25 	bl	800a764 <memcpy>
 800a91a:	4631      	mov	r1, r6
 800a91c:	4638      	mov	r0, r7
 800a91e:	f000 f81f 	bl	800a960 <_free_r>
 800a922:	e7e9      	b.n	800a8f8 <_realloc_r+0x1c>
 800a924:	4635      	mov	r5, r6
 800a926:	e7e7      	b.n	800a8f8 <_realloc_r+0x1c>

0800a928 <_sbrk_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d06      	ldr	r5, [pc, #24]	; (800a944 <_sbrk_r+0x1c>)
 800a92c:	2300      	movs	r3, #0
 800a92e:	4604      	mov	r4, r0
 800a930:	4608      	mov	r0, r1
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	f7f9 ff90 	bl	8004858 <_sbrk>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_sbrk_r+0x1a>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_sbrk_r+0x1a>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	20000e3c 	.word	0x20000e3c

0800a948 <__malloc_lock>:
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <__malloc_lock+0x8>)
 800a94a:	f000 b861 	b.w	800aa10 <__retarget_lock_acquire_recursive>
 800a94e:	bf00      	nop
 800a950:	20000e44 	.word	0x20000e44

0800a954 <__malloc_unlock>:
 800a954:	4801      	ldr	r0, [pc, #4]	; (800a95c <__malloc_unlock+0x8>)
 800a956:	f000 b85c 	b.w	800aa12 <__retarget_lock_release_recursive>
 800a95a:	bf00      	nop
 800a95c:	20000e44 	.word	0x20000e44

0800a960 <_free_r>:
 800a960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a962:	2900      	cmp	r1, #0
 800a964:	d048      	beq.n	800a9f8 <_free_r+0x98>
 800a966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96a:	9001      	str	r0, [sp, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f1a1 0404 	sub.w	r4, r1, #4
 800a972:	bfb8      	it	lt
 800a974:	18e4      	addlt	r4, r4, r3
 800a976:	f7ff ffe7 	bl	800a948 <__malloc_lock>
 800a97a:	4a20      	ldr	r2, [pc, #128]	; (800a9fc <_free_r+0x9c>)
 800a97c:	9801      	ldr	r0, [sp, #4]
 800a97e:	6813      	ldr	r3, [r2, #0]
 800a980:	4615      	mov	r5, r2
 800a982:	b933      	cbnz	r3, 800a992 <_free_r+0x32>
 800a984:	6063      	str	r3, [r4, #4]
 800a986:	6014      	str	r4, [r2, #0]
 800a988:	b003      	add	sp, #12
 800a98a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a98e:	f7ff bfe1 	b.w	800a954 <__malloc_unlock>
 800a992:	42a3      	cmp	r3, r4
 800a994:	d90b      	bls.n	800a9ae <_free_r+0x4e>
 800a996:	6821      	ldr	r1, [r4, #0]
 800a998:	1862      	adds	r2, r4, r1
 800a99a:	4293      	cmp	r3, r2
 800a99c:	bf04      	itt	eq
 800a99e:	681a      	ldreq	r2, [r3, #0]
 800a9a0:	685b      	ldreq	r3, [r3, #4]
 800a9a2:	6063      	str	r3, [r4, #4]
 800a9a4:	bf04      	itt	eq
 800a9a6:	1852      	addeq	r2, r2, r1
 800a9a8:	6022      	streq	r2, [r4, #0]
 800a9aa:	602c      	str	r4, [r5, #0]
 800a9ac:	e7ec      	b.n	800a988 <_free_r+0x28>
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	b10b      	cbz	r3, 800a9b8 <_free_r+0x58>
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	d9fa      	bls.n	800a9ae <_free_r+0x4e>
 800a9b8:	6811      	ldr	r1, [r2, #0]
 800a9ba:	1855      	adds	r5, r2, r1
 800a9bc:	42a5      	cmp	r5, r4
 800a9be:	d10b      	bne.n	800a9d8 <_free_r+0x78>
 800a9c0:	6824      	ldr	r4, [r4, #0]
 800a9c2:	4421      	add	r1, r4
 800a9c4:	1854      	adds	r4, r2, r1
 800a9c6:	42a3      	cmp	r3, r4
 800a9c8:	6011      	str	r1, [r2, #0]
 800a9ca:	d1dd      	bne.n	800a988 <_free_r+0x28>
 800a9cc:	681c      	ldr	r4, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	6053      	str	r3, [r2, #4]
 800a9d2:	4421      	add	r1, r4
 800a9d4:	6011      	str	r1, [r2, #0]
 800a9d6:	e7d7      	b.n	800a988 <_free_r+0x28>
 800a9d8:	d902      	bls.n	800a9e0 <_free_r+0x80>
 800a9da:	230c      	movs	r3, #12
 800a9dc:	6003      	str	r3, [r0, #0]
 800a9de:	e7d3      	b.n	800a988 <_free_r+0x28>
 800a9e0:	6825      	ldr	r5, [r4, #0]
 800a9e2:	1961      	adds	r1, r4, r5
 800a9e4:	428b      	cmp	r3, r1
 800a9e6:	bf04      	itt	eq
 800a9e8:	6819      	ldreq	r1, [r3, #0]
 800a9ea:	685b      	ldreq	r3, [r3, #4]
 800a9ec:	6063      	str	r3, [r4, #4]
 800a9ee:	bf04      	itt	eq
 800a9f0:	1949      	addeq	r1, r1, r5
 800a9f2:	6021      	streq	r1, [r4, #0]
 800a9f4:	6054      	str	r4, [r2, #4]
 800a9f6:	e7c7      	b.n	800a988 <_free_r+0x28>
 800a9f8:	b003      	add	sp, #12
 800a9fa:	bd30      	pop	{r4, r5, pc}
 800a9fc:	20000abc 	.word	0x20000abc

0800aa00 <_malloc_usable_size_r>:
 800aa00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa04:	1f18      	subs	r0, r3, #4
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bfbc      	itt	lt
 800aa0a:	580b      	ldrlt	r3, [r1, r0]
 800aa0c:	18c0      	addlt	r0, r0, r3
 800aa0e:	4770      	bx	lr

0800aa10 <__retarget_lock_acquire_recursive>:
 800aa10:	4770      	bx	lr

0800aa12 <__retarget_lock_release_recursive>:
 800aa12:	4770      	bx	lr

0800aa14 <_init>:
 800aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa16:	bf00      	nop
 800aa18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa1a:	bc08      	pop	{r3}
 800aa1c:	469e      	mov	lr, r3
 800aa1e:	4770      	bx	lr

0800aa20 <_fini>:
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	bf00      	nop
 800aa24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa26:	bc08      	pop	{r3}
 800aa28:	469e      	mov	lr, r3
 800aa2a:	4770      	bx	lr
